{"version":3,"sources":["resources/images/group-business.jpg","resources/images/company-concept-illustration_114360-2581.jpg","resources/images/individual.jpg","Models/User.js","Types/Messages.js","Types/Common.js","redux/actions/action-types.js","Services/Cache.js","Services/HttpClient.js","redux/actions/city-county-actions.js","Core/Helper.js","Core/Response.js","Models/InboxMessageContract.js","Services/UserService.js","redux/actions/login-actions.js","components/Begin/google/google-login.js","components/Begin/Login.js","redux/actions/register-actions.js","redux/actions/page-actions.js","components/Common/Constants.js","Services/CoreService.js","Models/Company.js","components/Common/city-component.js","components/Common/county-component.js","components/Begin/SignIn.js","components/Begin/TabIn.js","components/Utils/iconHelper.js","components/Navigation/app-bar.js","components/ToolBox/action.js","components/Navigation/action-bar.js","components/ToolBox/backdrop.js","components/Begin/password-change.js","components/Layout.js","components/Home.js","Models/ApartmentContract.js","components/Common/parameter-component.js","Services/DefineSiteApartment.js","redux/actions/apertment-actions.js","components/ToolBox/icon-buttons.js","Models/BlockContract.js","components/ToolBox/list.js","components/ToolBox/popup-block-definition.js","components/Admin/SiteApartment/DefineSiteApartment.js","Models/MemberUserContract.js","Services/MemberDefineService.js","components/ToolBox/combo-box.js","components/Admin/Member/member-define.js","components/ToolBox/DataTable.js","components/Admin/Member/member-list.js","components/User/user-profile.js","components/ToolBox/dialog-form.js","components/User/Inbox.js","Models/VoteContract.js","components/ToolBox/dynamic-list.js","Services/VoteService.js","components/Vote/VoteDefining.js","components/ToolBox/chart.js","components/Vote/VotingAndResult.js","components/ToolBox/datetime-component.js","components/Common/apartment-component.js","Models/Invoice.js","Services/Accounting.js","components/Accounting/expense-entry.js","components/Accounting/expense-list.js","Models/TenderContract.js","Services/TenderService.js","components/Tender/tender-defining-component.js","components/ToolBox/countdown.js","components/Tender/tender-list-component.js","Models/DuesContract.js","Models/DivitContract.js","components/Common/divit-component.js","components/Accounting/dues-payment.js","components/Accounting/dues-listing.js","App.js","Models/Parameter.js","redux/reducers/initial-state.js","redux/reducers/index.js","redux/reducers/login-reducer.js","redux/reducers/city-county-reducer.js","redux/reducers/county-reducer.js","redux/reducers/parameter-reducer.js","redux/reducers/register-reducer.js","redux/reducers/change-login-status-reducer.js","redux/reducers/message-reducer.js","redux/reducers/change-selected-city-reducer.js","redux/reducers/definingReducers/define-block-reducer.js","redux/reducers/actionReducers/action-list-reducer.js","redux/reducers/actionReducers/action-execute-reducer.js","redux/reducers/actionReducers/change-backdrop-status-reducer.js","redux/reducers/change-login-new-password-reducer.js","index.js","redux/reducers/configure-store.js"],"names":["module","exports","User","Messages","PlsLogIn","EMailInputFormText","EMailInvalid","EMailValid","MenuNames","Main","admin","Action","addApartmernOrSite","Other","managment","Titles","defineBlock","ActionNames","save","enter","add","getInfo","edit","close","examine","read","LabelNames","name","surname","email","address","zipcode","city","county","recordType","password","floorCount","blockCount","blockName","Warnings","selectRecordType","CouldNotDoProc","Information","Success","Errors","InvalidInformation","AccurredAnError","InvalidMailOrUser","dateFormat","require","CommonTypes","controllerName","actionName","this","URLaddress","concat","trim","getDateIsoDate","Date","KafkaHost","KafkaTopic","RabbitMQ","RabbitMQTopicName","MessageTypes","success","error","info","Iconkeys","inbox","personadd","viewlist","howtovote","home","addChart","listChart","paydue","updown","profile","apartment","CacheKeys","CityList","CountyList","ActionKeys","Save","GetList","Clean","Close","Edit","Examine","Read","AddAgreement","GiveOffer","Divit","ActionTypes","delete","list","giveoffer","Resources","resourceCode","actionKeys","defineSiteApartment","defineMember","memberList","userProfile","userInbox","VoteDefine","VotingAndResult","ExpenseEntry","ExpenseList","TenderDefining","TenderListing","DuesPayment","DuesListing","ResponseStatusCode","successful","created","accepted","nonAuthoritative","noContent","resetContent","partialContent","clientError","badRequest","unAuthorized","paymentRequired","forbidden","notFound","methodNotAllowed","serverError","InternalServerError","notImplemented","badGateway","serviceUnavailable","gatewayTimeout","httpVersionNotSupported","LRU","Cache","paramType","value","key","lru","has","set","get","max","maxAge","getParameter","HttpClientServiceInstance","setTokenOnLogin","token","axiosInstance","defaults","headers","Authorization","clearTokenOnLogout","localStorage","removeItem","JSON","parse","getItem","axios","create","baseURL","url","then","resp","catch","undefined","response","status","Promise","reject","window","location","replace","data","post","resolve","console","log","changeSelectedCityId","cityId","type","payload","getCityList","dispatch","getCountyListSuccess","GetUrlForAPI","res","stringify","countylist","getCountyListAll","StringBuilder","IsNullOrEmpty","text","length","IsNullOrEmptyAll","params","GetIntValue","parseInt","e","DateControlOlderToday","GetActiveLocalUser","ShowStatusError","message","Alertify","ShowStatusInfo","notify","ShowStatusSuccess","ShowStatusWarning","warning","Response","addResult","severity","errorCode","results","push","Result","getResultsStringFormat","string","result","ErrorMessage","appendLine","toString","errorMessage","code","ErrorCode","Severity","InboxmessageContract","userContract","a","contract","setItem","accessToken","shouldNewPassword","userData","userDefinitionContract","user","userId","firstName","lastName","userName","companyContract","isCorporateUser","company","apartmentContract","expiration","inboxNotificationCount","generalNotificationCount","resourceActionList","resourceActions","SetUserResources","addCoreResults","ForgotPassword","ro","err","SetNewPassword","GetUserInboxList","inboxmessageContract","inboxContract","receiverUserId","updateMessageStatusForReaded","inboxId","resourceList","item","find","x","parentCode","tmpRes","parentName","resources","Actions","ind","findIndex","r","val","resourceSub","iconKey","path","actions","actionKey","act","overrideItem","LoginSuccess","ChangeLoginStatusSuccess","isSuccess","isNewPassword","ChangeLoginStatus","jwtObject","Login","LoginUser","GoogleLoginComponent","props","onSuccess","profileObj","onFailure","state","isDisable","className","style","justifyContent","justifyItems","clientId","buttonText","cookiePolicy","marginTop","width","isSignedIn","disabled","Component","loginUserContract","onForgotPassword","dataContract","Email","setState","isForgotPassword","validate","emailState","Password","loginUser","memberId","test","target","Grid","container","spacing","alignItems","justify","xs","direction","Form","Col","FormGroup","Label","Input","valid","invalid","id","autoComplete","placeholder","onChange","datac","onBlur","validateEmail","FormFeedback","for","FormControlLabel","control","Checkbox","checked","label","Button","color","onClick","src","alt","connect","loginReducer","bindActionCreators","cityActions","loginActions","changeLoginStatus","registerUserSuccess","registerUser","isRegistered","changeActiveResourceCode","apply","actionKeyList","GetActionListSuccess","executeCommand","onExecute","executeSuccess","changeBackDropStatus","changeBackDropSuccess","AppmanCommon","isBackDrop","ParameterService","returnObject","parameters","ParamType","forEach","element","setParameter","valueList","Company","CityComponent","loading","Autocomplete","options","cityList","getOptionLabel","option","fullWidth","renderInput","TextField","variant","reason","onSelectedCity","cityReducer","cityCountyActions","CountyComponent","getCountyList","countyList","filtered","filter","Fragment","onSelectedCounty","countyId","createContent","currentCityId","countyReducer","changeSelectedCityReducer","SignIn","getSubscriptionPackages","GetParameter","packageList","pac","packageName","paramValue","period","paramValue2","apartmentLimit","paramValue3","memberLimit","paramValue4","toOString","cmp","selectedCityId","hasAlert","messageType","alertMessage","selectedPackage","isCompany","validateContract","RegisterCompany","register","changeBackdropStatus","companyName","taxNumber","FirstName","LastName","margin","aria-orientation","map","Paper","elevation","Card","CardActionArea","CardContent","Typography","gutterBottom","component","CardActions","size","Container","Row","Switch","inputProps","addressText","FormText","dtc","pattern","phoneNumber","submitForm","paragraph","pageActions","registerActions","registeredUser","registerReducer","useState","activeTab","setActiveTab","toggle","tab","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","GetIcon","useStyles","makeStyles","theme","root","display","appBar","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","hide","drawer","flexShrink","drawerPaper","drawerHeader","padding","mixins","toolbar","grow","flexGrow","menuButton","marginRight","title","breakpoints","up","content","contentShift","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","searchIcon","height","pointerEvents","inputRoot","inputInput","paddingLeft","sectionDesktop","sectionMobile","classes","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","tmpusr","cacheResources","useTheme","openMenu","setOpenMenu","inboxNotifCount","generalNotifCount","isMenuOpen","Boolean","isMobileMenuOpen","handleProfileMenuOpen","event","currentTarget","handleMobileMenuClose","menuId","renderMenu","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","onClose","MenuItem","Link","to","renderMobileMenu","IconButton","aria-label","Badge","badgeContent","aria-controls","aria-haspopup","CssBaseline","AppBar","clsx","Toolbar","edge","noWrap","InputBase","input","showZero","Drawer","anchor","paper","Divider","Accordion","AccordionDetails","List","ListItem","button","ListItemIcon","ListItemText","primary","AccordionSummary","expandIcon","fontSize","fontWeight","sval","sind","children","ActionKey","startIcon","Icon","onExecuteCommand","getActionLabel","propType","ResourceCode","PropTypes","isRequired","actionExecuteReducer","ActionBar","getIcon","generateActions","actionListInfo","index","alert","actionListReducer","BackdropComponent","Backdrop","backdropStatus","zIndex","CircularProgress","backdropStatusReducer","PasswordChange","onSubmitForm","newPassword","newPassword2","changeStatus","required","loginJwtObject","changeLoginStatusReducer","maxWidth","Home","Jumbotron","fluid","displayName","ApartmentContract","ParameterComponent","service","onSelectParameter","paramDescription","labelName","isAllOption","selectedParamCode","Object","assign","paramCode","siteApartmentContract","managerUserName","managerUserId","saveBlock","blockList","addBlockSuccess","ButtonWithIcon","actionType","setIconToButton","prototype","BlockContract","Code","background","CheckboxList","React","setChecked","isCheckBoxVisible","handleToggle","currentIndex","indexOf","newChecked","splice","labelId","role","dense","tabIndex","disableRipple","hidden","ListItemSecondaryAction","onDelete","BlockDefinition","modal","blockCode","getBlockListForCheckBoxList","Modal","aria-labelledby","aria-describedby","CardHeader","onFocus","lst","addBlock","apartmentActions","DefineSiteApartment","controlDataContract","apartmentType","DefineSiteApartmentService","messagebuilder","append","renderForParameter","Collapse","isOpen","siteDefinitionCard","apartmentDefinitionCard","getBlockList","addedBlocks","elm","blocks","bind","zipCode","sm","cityContract","xl","multiline","rows","defineBlockReducer","actionEvent","MemberUserContract","GetApartmentListByManagerUserName","returnData","SaveNewMember","memberContract","member","apartmentName","userlogin","UpdateMemberUser","ComboBox","defaultValue","dataList","itemSource","selectedValue","tempList","dt","v","prevProps","prevState","snapshot","onSelectedItemChange","MemberDefine","updateContract","validateResponse","isValidContract","isUpdate","finally","history","pathname","floorNumber","doorNumber","apartmentId","apartmentList","isMailValid","dtContract","GetMemberDetailByMemberId","strbuilder","isValid","addressId","flrNumber","doorn","DataTable","filterType","onRowSelectionChange","selectableRows","selectableRowsOnClick","columns","textAlign","MemberList","criteriaContract","sort","GetMemberListByUserId","selectedMembers","selectedContract","criteria","currentRowIndex","allRowsIndexes","rowsSelectedIndex","dataIndex","selectedList","UserProfile","alignContent","avatar","Avatar","substr","subheader","DialogTitle","withStyles","closeButton","right","top","grey","other","disableTypography","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","DialogForm","setOpen","handleClose","Dialog","dividers","autoFocus","InboxComponent","userActive","startDate","endDate","messageList","selectedMessageList","messageContract","dialogContent","senderFirstName","senderFullName","sendDate","isOpenDialogForm","handleCloseDialog","handleOpenDialog","min","now","VoteContract","userChoice","VoteItem","optionList","userChoiceList","voteOption","VoteOption","userHash","VoteResultContract","DynamicList","addListItem","temp","tempValue","onChangeList","footer","align","AddVote","voteContract","GetUserVote","GetVoteResult","GetUsedUserVote","VoteDefining","validResponse","item1","item2","description","tempListElement","opt","colorPointer","generateColor","uv","pv","amt","ChartComponent","dataKeyList","dataSource","left","bottom","strokeDasharray","dataKey","keyList","fill","next","PureComponent","UserToVote","selectedVote","openVoteDialog","getVoteResult","tmplist","dataKeys","optionDescription","voteCount","tempKeyObject","voteResultList","voteResultKeyList","chartData","getUsedVotes","usedVoteList","selectedValueChanged","setVoteDialogContent","FormControl","FormLabel","RadioGroup","Radio","voteList","getUserVotes","DateTimeComponent","defaultDate","selectedDate","setSelectedDate","utils","DateFnsUtils","disableToolbar","format","date","onChangeDate","KeyboardButtonProps","ApartmentComponent","defaultApartment","getAPartmentList","InvoiceContract","invoiceLineList","InvoiceLineContract","SaveExpense","expenseContract","GetUrlForAccount","GetExpenceList","invoiceFilterContract","filterContract","GetExpenseDetail","invoiceId","SendDuesPayment","duesContract","GetDuesList","textColumn","floatColumn","amount","quantity","unitprice","invoiceNumber","totalAmount","selectedApartmentId","invoiceDate","i","invLine","unitPrice","onChangeApartment","total","self","inv","selectedInvoice","setExpenseDialogContent","invoiceDetail","userFullName","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","line","selected","TenderContract","OfferContract","GetTenderDetail","GetUrlForPurchasing","tenderId","SaveTender","GetTenderByApartment","GetTenderListAll","responseData","offerContract","datacontract","agreementContract","subject","beginDate","firstAmount","agreement","cont","step","parseFloat","TextareaAutosize","rowsMin","timerProps","isPlaying","strokeWidth","renderTime","dimension","time","CountDownComponent","startTime","remainingTime","endTime","daysDuration","Math","ceil","colors","initialRemainingTime","elapsedTime","onComplete","totalElapsedTime","TenderList","selectedCountyId","tenderContract","tender","selectedTender","setDialogContent","tenderDetail","tenderc","setOfferDialogContent","handleOpenOfferDialog","onSaveOffer","SaveNewOffer","offerDialogContent","getTime","minOffer","offeredAmount","handleCloseOfferDialog","cityName","countyName","isOpenOfferDialog","activeUser","DuesContract","DivitContract","DivitComponent","files","reader","FileReader","file","readAsDataURL","onload","divit","uploadDate","onLoadFile","onSave","handleSave","acceptedFiles","showPreviews","maxFileSize","submitButtonText","cancelButtonText","isOpenDivit","divitContract","initialContract","selectedFile","apartmentDues","duesAmount","getMonth","year","getFullYear","setFullYear","setMonth","month","GetOneMonthAgo","selectedDues","duesId","App","exact","Parameter","parameterList","initialParameter","ParamCode","messageObject","siteId","apertment","Name","site","executedAction","backDropStatus","rootReducer","combineReducers","initialState","action","parameterReducer","showMessageReducer","changeLoginToNewPasswordReducer","rootElement","document","getElementById","store","createStore","applyMiddleware","thunk","ReactDOM","render","template","AlertTemplate","timeout","offset"],"mappings":"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","file":"static/js/main.eda4f97a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/group-business.98771346.jpg\";","module.exports = __webpack_public_path__ + \"static/media/company-concept-illustration_114360-2581.7c0026da.jpg\";","module.exports = __webpack_public_path__ + \"static/media/individual.e5384646.jpg\";","export default class User {\n  userId;\n  userName;\n  email;\n  firstName;\n  lastName;\n  password;\n  MemberId;\n  token;\n  expiration;\n  //kullanıcı apartman bilgisi\n  apartment;\n  //üyelik paketi\n  subscription;\n  //bildirim\n  inboxNotificationCount;\n  generalNotificationCount;\n  //kaynak\n  resourceActionList;\n\n  //parola değişikliği gerekiyor!\n  shouldNewPassword;\n\n  // kurumsal\n  isCorporateUser;\n  company;\n}\n\nexport class Subscription {\n  subscriptionId;\n  userId;\n  startDate;\n  endDate;\n  memberLimit;\n  apartmentLimit;\n}\n","export default class Messages {\n  static PlsLogIn = \"Merhaba. Lütfen giriş yapınız...\";\n  static EMailInputFormText = \"Geçerli ve aktif bir mail adresi giriniz.\";\n  static EMailInvalid = \"Geçersiz mail adresi.\";\n  static EMailValid = \"\";\n\n  static MenuNames = {\n    Main: {\n      admin: \"Admin\",\n    },\n    Action: {\n      addApartmernOrSite: \"Site/Aparman ekle\",\n    },\n    Other: {\n      managment: \"Yönetim\",\n    },\n  };\n\n  static Titles = {\n    defineBlock: \"Blok ekleme\",\n  };\n\n  static ActionNames = {\n    save: \"Kaydet\",\n    /**giriş yap */\n    enter: \"Giriş Yap\",\n    /**ekle */\n    add: \"Ekle\",\n    /** bilgi getir, listele*/\n    getInfo:\"Bilgi Getir\",\n    /* güncelle */\n    edit:\"Güncelle\",\n    /* kapat */\n    close:\"Kapat\",\n    /* İncele */\n    examine:\"İncele\",\n    /* Oku */\n    read:\"Oku\"\n  };\n\n  static LabelNames = {\n    name: \"Adınız\",\n    surname: \"Soyadınız\",\n    email: \"Mail Adresiniz\",\n    address: \"Adres\",\n    zipcode: \"Posta Kodu\",\n    city: \"İl\",\n    county: \"İlçe\",\n    recordType: \"Kayıt Türü\",\n    password: \"Parola\",\n    floorCount: \"Kat Sayısı\",\n    blockCount: \"Blok Sayısı\",\n    blockName: \"Blok Adı\",\n  };\n\n  static Warnings = {\n    selectRecordType: \"Kayıt Türünü Seçiniz..\",\n    /**işlem başarısız oldu. */\n    CouldNotDoProc: \"İşlem başarısız.\",\n  };\n\n  static Information = {\n    /**\n     * işlem başarılı\n     */\n    Success: \"İşlem Başarılı.\",\n  };\n\n  static Errors = {\n    InvalidInformation: \"Eksik veya hatalı bilgi girdiniz.\",\n    /**hata oluştu mesajı */\n    AccurredAnError: \"İşlem yapılırken hata meydana geldi.\",\n    /**\n     * geçersiz mail veya parola\n     */\n    InvalidMailOrUser: \"Geçersiz mail adresi veya parola..\",\n  };\n}\n","import Messages from \"./Messages\";\nconst dateFormat = require(\"dateformat\");\n\n/**\n * common types for general components\n */\nexport class CommonTypes {\n  static URLaddress = \"http://167.172.180.44:5001\"; //23163 - api, 5001 - gateway\n  static KafkaHost = \"http://167.172.180.44:9092\";\n  static KafkaTopic = \"apmantest\";\n  static RabbitMQ = \"http://167.172.180.44:5672\";\n  static RabbitMQTopicName = \"apman-client\";\n\n  /**\n   *\n   * @param {string} controllerName\n   * @param {string} actionName\n   */\n  static GetUrlForAPI(controllerName, actionName) {\n    return this.URLaddress.concat(\n      \"/api/\",\n      controllerName.trim(),\n      \"/\",\n      actionName.trim()\n    );\n  }\n  static GetUrlForAccount(controllerName, actionName) {\n    return this.URLaddress.concat(\n      \"/accounting/\",\n      controllerName.trim(),\n      \"/\",\n      actionName.trim()\n    );\n  }\n  static GetUrlForPurchasing(controllerName, actionName) {\n    return this.URLaddress.concat(\n      \"/purchasing/\",\n      controllerName.trim(),\n      \"/\",\n      actionName.trim()\n    );\n  }\n\n  static MessageTypes = {\n    success: \"success\",\n    error: \"error\",\n    info: \"info\",\n  };\n\n  /**\n   * the icon keys\n   * @type {{viewlist: string, personadd: string, inbox: string, howtovote: string}}\n   */\n  static Iconkeys = {\n    inbox: \"inbox\",\n    personadd: \"personadd\",\n    viewlist: \"viewlist\",\n    howtovote: \"howtovote\",\n    home: \"home\",\n    addChart: \"addchart\",\n    listChart: \"listchart\",\n    paydue: \"paydue\",\n    updown: \"updown\",\n    profile: \"profile\",\n    apartment: \"apartment\",\n  };\n\n  /**\n   * cache keyleri tutulur.\n   */\n  static CacheKeys = {\n    CityList: \"CITYLIST\",\n    CountyList: \"COUNTYLIST\",\n  };\n\n  /**\n   * aksiyon isimleri\n   */\n  static ActionKeys = {\n    /**\n     * kaydet\n     */\n    Save: \"SAVE\",\n    /**\n     * bilgi getir (listele)\n     * GETLIST\n     */\n    GetList: \"GETLIST\",\n    /**\n     * Temizle\n     */\n    Clean: \"CLEAN\",\n    /**\n     * kapat\n     */\n    Close: \"CLOSE\",\n    /**\n     * düzenle / güncelle\n     */\n    Edit: \"EDIT\",\n    /**\n     * incele / ayrıntı\n     */\n    Examine: \"EXAMINE\",\n    /* Oku */\n    Read: \"READ\",\n    /* sözleşme ekle */\n    AddAgreement: \"ADDAGR\",\n    /*teklif ver */\n    GiveOffer: \"GVOFFR\",\n    /**döküman ekle */\n    Divit: \"DIVIT\",\n  };\n\n  /**\n   * aksiyon tiplerini tutar.\n   */\n  static ActionTypes = {\n    save: \"save\",\n    add: \"add\",\n    delete: \"delete\",\n    info: \"info\",\n    close: \"close\",\n    list: \"list\",\n    read: \"read\",\n    examine: \"examine\",\n    giveoffer: \"giveoffer\",\n  };\n\n  /**\n   * kaynak tanımları\n   */\n  static Resources = {\n    home: {\n      resourceCode: \"HOME\",\n      actionKeys: [],\n    },\n    /**\n     * site apartman ekle\n     */\n    defineSiteApartment: {\n      /**\n       * DEFAPT\n       */\n      resourceCode: \"DEFAPT\",\n      actionKeys: [CommonTypes.ActionKeys.Save],\n    },\n    /**\n     * üye tanımlama\n     */\n    defineMember: {\n      resourceCode: \"DEFMEM\",\n      actionKeys: [CommonTypes.ActionKeys.Save],\n    },\n    /**\n     * üye listeleme\n     */\n    memberList: {\n      resourceCode: \"DEFLST\",\n      actionKeys: [CommonTypes.ActionKeys.GetList, CommonTypes.ActionKeys.Edit],\n    },\n    /**\n     * kullanıcı profili\n     */\n    userProfile: {\n      resourceCode: \"USRPRF\",\n      actionKeys: [CommonTypes.ActionKeys.Close],\n    },\n    /**\n     * gelen kutusu\n     */\n    userInbox: {\n      resourceCode: \"USRINB\",\n      actionKeys: [CommonTypes.ActionKeys.GetList, CommonTypes.ActionKeys.Read],\n    },\n    /**\n     * Anket tanımlama\n     */\n    VoteDefine: {\n      resourceCode: \"VTEDEF\",\n      actionKeys: [CommonTypes.ActionKeys.Save, CommonTypes.ActionKeys.Clean],\n    },\n    /**\n     * oy kullanma ve sonuç görme\n     */\n    VotingAndResult: {\n      resourceCode: \"VTNRES\",\n      actionKeys: [CommonTypes.ActionKeys.GetList],\n    },\n    /**\n     * masraf giriş\n     */\n    ExpenseEntry: {\n      resourceCode: \"EXPENT\",\n      actionKeys: [CommonTypes.ActionKeys.Save],\n    },\n    /**\n     * masraf giriş\n     */\n    ExpenseList: {\n      resourceCode: \"EXPLST\",\n      actionKeys: [\n        CommonTypes.ActionKeys.GetList,\n        CommonTypes.ActionKeys.Examine,\n      ],\n    },\n    /**\n     * ihale tanımlama\n     *\n     */\n    TenderDefining: {\n      resourceCode: \"TNRDEF\",\n      actionKeys: [CommonTypes.ActionKeys.Save],\n    },\n    /**\n     * ihale listeleme\n     */\n    TenderListing: {\n      resourceCode: \"TNRLST\",\n      actionKeys: [\n        CommonTypes.ActionKeys.GetList,\n        CommonTypes.ActionKeys.Examine,\n        CommonTypes.ActionKeys.GiveOffer,\n      ],\n    },\n    /**\n     * aidat ödeme\n     */\n    DuesPayment: {\n      resourceCode: \"DUESPY\",\n      actionKeys: [CommonTypes.ActionKeys.Divit, CommonTypes.ActionKeys.Save],\n    },\n    /**\n     * aidat listeleme\n     */\n    DuesListing: {\n      resourceCode: \"DUESLS\",\n      actionKeys: [\n        CommonTypes.ActionKeys.GetList,\n        CommonTypes.ActionKeys.Examine,\n      ],\n    },\n  };\n\n  /**\n   * http response status code\n   */\n  static ResponseStatusCode = {\n    successful: {\n      success: 200,\n      created: 201,\n      accepted: 202,\n      nonAuthoritative: 203,\n      noContent: 204,\n      resetContent: 205,\n      partialContent: 206,\n    },\n    clientError: {\n      badRequest: 400,\n      unAuthorized: 401,\n      paymentRequired: 402,\n      forbidden: 403,\n      notFound: 404,\n      methodNotAllowed: 405,\n    },\n    serverError: {\n      InternalServerError: 500,\n      notImplemented: 501,\n      badGateway: 502,\n      serviceUnavailable: 503,\n      gatewayTimeout: 504,\n      httpVersionNotSupported: 505,\n    },\n  };\n}\n\n/**\n * aksiyon ismini verir\n * @param key\n * @returns {string}\n */\nexport function getActionLabel(key) {\n  switch (key) {\n    case CommonTypes.ActionKeys.Save:\n      return Messages.ActionNames.save;\n    case CommonTypes.ActionKeys.GetList:\n      return Messages.ActionNames.getInfo;\n    case CommonTypes.ActionKeys.Edit:\n      return Messages.ActionNames.edit;\n    case CommonTypes.ActionKeys.Close:\n      return Messages.ActionNames.close;\n    case CommonTypes.ActionKeys.Examine:\n      return Messages.ActionNames.examine;\n    case CommonTypes.ActionKeys.Read:\n      return Messages.ActionNames.read;\n    case CommonTypes.ActionKeys.AddAgreement:\n      return \"Sözleşme Ekle\";\n    case CommonTypes.ActionKeys.GiveOffer:\n      return \"Teklif Ver\";\n    case CommonTypes.ActionKeys.Divit:\n      return \"Divit\";\n\n    default:\n      return \"action\";\n  }\n}\n\n/**\n * yyyy-mm-dd tarih verir.\n * @returns {*}\n */\nexport function getDateIsoDate() {\n  return dateFormat(new Date(), \"isoDate\");\n}\n","export const LOGIN = \"LOGIN\";\nexport const REGISTER = \"REGISTER\";\nexport const GETCITYLIST = \"GETCITYLIST\";\nexport const GETCOUNTYLIST = \"GETCOUNTYLIST\";\nexport const GETPARAMETER = \"GETPARAMETER\";\nexport const CHANGE_LOGIN_STATUS = \"CHANGE_LOGIN_STATUS\";\nexport const SHOW_STATUS_MESSAGE = \"SHOW_STATUS_MESSAGE\";\nexport const CHANGE_SELECTED_CITY_ID = \"CHANGE_SELECTED_CITY_ID\";\nexport const SAVE_NEW_BLOCK = \"SAVE_NEW_BLOCK\";\nexport const SAVE_NEW_APERTMENT = \"SAVE_NEW_APERTMENT\";\nexport const CHANGE_ACTION_LIST = \"CHANGE_ACTION_LIST\";\nexport const EXECUTE_ACTION = \"EXECUTE_ACTION\";\nexport const BACKDROP_STATUS = \"BACKDROP_STATUS\";\nexport const CHANGE_LOGIN_NEW_PASSWORD = \"CHANGE_LOGIN_NEW_PASSWORD\";\n","const LRU = require(\"lru-cache\");\n\nexport default class Cache {\n  static lru = new LRU({ max: 100, maxAge: 1000 * 60 * 60 * 24 });\n\n  static getParameter = (paramType) => {\n    let key = \"prm_\" + paramType;\n    if (Cache.lru.has(key)) {\n      return Cache.lru.get(key);\n    } else {\n      return undefined;\n    }\n  };\n\n  static setParameter(paramType, value) {\n    let key = \"prm_\" + paramType;\n    if (!Cache.lru.has(key)) {\n      return Cache.lru.set(key, value);\n    } else {\n      return 0;\n    }\n  }\n  \n  static setItem(key,value){\n    if (!Cache.lru.has(key)){\n      return Cache.lru.set(key, value);\n    }else {\n      return 0;\n    }\n  }\n\n  /**\n   * daha önce varsa üzerine yaz\n   * @param key\n   * @param value\n   * @returns {boolean}\n   */\n  static overrideItem(key,value){\n      return Cache.lru.set(key, value);\n  }\n  \n  static getItem(key){\n    return Cache.lru.get(key);\n  }\n}\n","import axios from \"axios\";\n\nclass HttpClientService {\n  constructor() {\n    localStorage.removeItem(\"user\");\n\n    const token = JSON.parse(localStorage.getItem(\"user\") || \"{}\")[\"token\"];\n    this.axiosInstance = axios.create({\n      baseURL: \"/\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  }\n\n  get(url) {\n    return this.axiosInstance\n      .get(url)\n      .then((resp) => {})\n      .catch((resp) => {\n        if (resp.response !== undefined && resp.response.status === 401) {\n          localStorage.removeItem(\"user\");\n          window.location.replace(\"http://localhost:3000\");\n        } else {\n          return Promise.reject(resp);\n        }\n      });\n  }\n\n  post(url, data) {\n    return this.axiosInstance\n      .post(url, data)\n      .then((resp) => {\n        return Promise.resolve(resp);\n      })\n      .catch((resp) => {\n        if (resp.response !== undefined && resp.response.status === 401) {\n          console.log(\"unauthorized!!\");\n          localStorage.removeItem(\"user\");\n          window.location.replace(\"http://localhost:3000\");\n        }\n        return Promise.reject(resp);\n      });\n  }\n\n  setTokenOnLogin = (token = \"\") => {\n    // const tokens = JSON.parse(localStorage.getItem(\"user\") || \"{}\")[\"token\"];\n    this.axiosInstance.defaults.headers = { Authorization: `Bearer ${token}` };\n  };\n  clearTokenOnLogout = () => {\n    localStorage.removeItem(\"user\");\n    this.axiosInstance.defaults.headers = {};\n  };\n}\n\nexport const HttpClientServiceInstance = new HttpClientService();\n","import { CommonTypes } from \"../../Types/Common\";\nimport * as actionTypes from \"./action-types\";\nimport Cache from \"../../Services/Cache\";\nimport {HttpClientServiceInstance} from \"../../Services/HttpClient\";\n\nexport function getCityListSuccess(city) {\n  return {\n    type: actionTypes.GETCITYLIST,\n    payload: city,\n  };\n}\n\nexport function changeSelectedCityId(cityId) {\n  return {\n    type: actionTypes.CHANGE_SELECTED_CITY_ID,\n    payload: cityId,\n  };\n}\n\nexport function getCityList() {\n  return function (dispatch) {\n    if (Cache.lru.has(CommonTypes.CacheKeys.CityList)) {\n      return dispatch(\n        getCountyListSuccess(Cache.lru.get(CommonTypes.CacheKeys.CityList))\n      );\n    }\n\n    let url = CommonTypes.GetUrlForAPI(\"core\", \"citylist\");\n    \n    return HttpClientServiceInstance.post(url)\n        .then((res) => {\n      if (!Cache.lru.has(CommonTypes.CacheKeys.CountyList)) {\n        Cache.lru.set(\n          CommonTypes.CacheKeys.CountyList,\n          JSON.parse(JSON.stringify(res.data))\n        );\n      }\n      dispatch(getCityListSuccess(JSON.parse(JSON.stringify(res.data))));\n    });\n  };\n}\n\nexport function getCountyListSuccess(countylist) {\n  return {\n    type: actionTypes.GETCOUNTYLIST,\n    payload: countylist,\n  };\n}\n\nexport function getCountyListAll() {\n  return function (dispatch) {\n    if (Cache.lru.has(CommonTypes.CacheKeys.CountyList)) {\n      return dispatch(\n        getCountyListSuccess(Cache.lru.get(CommonTypes.CacheKeys.CountyList))\n      );\n    }\n    let url = CommonTypes.GetUrlForAPI(\"core\", \"countylist\");\n    return HttpClientServiceInstance.post(url).then((res) => {\n      //caching yapılır..\n      if (!Cache.lru.has(CommonTypes.CacheKeys.CountyList)) {\n        Cache.lru.set(\n          CommonTypes.CacheKeys.CountyList,\n          JSON.parse(JSON.stringify(res.data))\n        );\n      }\n\n      dispatch(getCountyListSuccess(JSON.parse(JSON.stringify(res.data))));\n    });\n  };\n}\n","import { getDateIsoDate } from \"../Types/Common\";\nimport Alertify from \"alertifyjs\";\n\nexport const StringBuilder = require(\"string-builder\");\n\n/**\n * metin değerlerinin doluluğunu kontrol eder.\n * undefined veya boş ise true döner.\n * @param {string} text kontrol edilecek metin\n */\nexport function IsNullOrEmpty(text) {\n  return !(text && text.length > 0);\n}\n/**\n * array içerisindeki elemanların null kontrolü yapılır.\n * @param {Array} params\n */\nexport function IsNullOrEmptyAll(params) {\n  if (params && params.length > 0) {\n    for (const item of params) {\n      if (IsNullOrEmpty(item)) return false;\n    }\n    return true;\n  }\n  return false;\n}\n\n/**\n * obj eğer geçerli bir obje ise true döner.\n * @param obj\n * @returns {boolean}\n * @constructor\n */\nexport function IsValidObject(obj) {\n  return !!(obj && typeof obj === \"object\");\n}\n\n/**\n * girilen değer geçersiz ise -1 döner.\n * geçerli ise değeri int oalarak döner\n * @param value\n * @returns {number}\n * @constructor\n */\nexport function GetIntValue(value) {\n  if (value && typeof value === \"number\") {\n    return parseInt(value);\n  }\n  if (value && typeof value === \"string\") {\n    let val = -1;\n    try {\n      val = parseInt(value);\n      return val;\n    } catch (e) {\n      return -1;\n    }\n  } else return -1;\n}\n\n/**\n * tarih kontrolü yapar.\n * eğer bugünden küçük veya geçersiz ise false döner.\n * @param value\n * @returns {boolean}\n * @constructor\n */\nexport function DateControlOlderToday(value) {\n  // eslint-disable-next-line valid-typeof\n  if (value && typeof value === \"date\") {\n    let date = getDateIsoDate();\n    return value >= date;\n  }\n  return false;\n}\n\n/**\n * eğer item1 < item2 ise ve tarihler geçerli ise true döner\n * @param item1\n * @param item2\n * @returns {boolean}\n * @constructor\n */\nexport function IsBiggerDate(item1, item2) {\n  // eslint-disable-next-line valid-typeof\n  if (item1 && typeof item1 === \"date\" && item2 && typeof item2 === \"date\") {\n    return item1 <= item2;\n  }\n  return false;\n}\n\n/**\n * bir ay öncesini verir\n * @param date {Date}\n * @returns {Date}\n * @constructor\n */\nexport function GetOneMonthAgo(date = new Date()){\n  \n  if(date.getMonth() === 0){\n    var year = date.getFullYear()-1;\n    date.setFullYear(year);\n    date.setMonth(11);\n  }else{\n    var month = date.getMonth()-1;\n    date.setMonth(month);\n  }\n  return date;\n}\n\n/**\n * is value -1 ? true:\n * @param value\n * @returns {boolean}\n * @constructor\n */\nexport function IsInvalidIndex(value) {\n  return value === -1;\n}\n\n/**\n * returned login user\n * @returns {User}\n * @constructor\n */\nexport function GetActiveLocalUser() {\n  return JSON.parse(localStorage.getItem(\"user\" || {}));\n}\n\n/**\n * returned message\n * @param propertyName\n * @constructor\n */\nexport function GetMessage(propertyName) {\n  if (propertyName) {\n    //mesaj servisi oluşturulacak.\n  }\n}\n\n//#region status messages\n\n/**\n * status'ta hata mesajı gösterir.\n * @param message\n * @constructor\n */\nexport function ShowStatusError(message) {\n  Alertify.error(message);\n}\n/**\n * status'ta bilgi mesajı gösterir.\n * @param message\n * @constructor\n */\nexport function ShowStatusInfo(message) {\n  Alertify.notify(message);\n}\n/**\n * status'ta başarılı mesajı gösterir.\n * @param message\n * @constructor\n */\nexport function ShowStatusSuccess(message) {\n  Alertify.success(message);\n}\n/**\n * status'ta uyarı mesajı gösterir.\n * @param message\n * @constructor\n */\nexport function ShowStatusWarning(message) {\n  Alertify.warning(message);\n}\n//#endregion\n","/**\n * Response class for the all responses\n */\nimport {StringBuilder} from \"./Helper\";\n\n/**\n * genel response yapısıdır.\n */\nexport class Response {\n    constructor() {\n        this.success = true;\n        this.value = {};\n        this.results = [];\n    }\n\n    /**\n     * hata ekler\n     * @param message {string}\n     * @param severity {number}\n     * @param errorCode {string}\n     */\n    addResult = (message, severity, errorCode = \"no code\") => {\n        //todo severity bilgisine göre log işlenecek..\n        console.log(\"pushed error result:\",message);\n        if (message && message.length > 0) {\n            this.results.push(new Result(errorCode, message, severity))\n            if (this.results.length > 0) {\n                this.success = false;\n            }\n        }\n    }\n\n    /**\n     * api tarafından gelen resultları alır.\n     * @param results\n     */\n    addCoreResults(results){\n        for (let result of results) {\n            this.addResult(result.errorMessage,result.severity,result.errorCode );\n        }\n    }\n    /**\n     * getting string formatted.\n     * @returns {string}\n     */\n    getResultsStringFormat = () => {\n        let string = new StringBuilder();\n\n        if (this.results.length > 0) {\n            for (let result of this.results) {\n                if (result.ErrorMessage.length > 1)\n                    string.appendLine(result.ErrorMessage);\n            }\n        }\n        return string.toString();\n    }\n}\n\n/**\n * the result\n */\nclass Result {\n    constructor(code, message, severity) {\n        this.ErrorCode = code;\n        this.ErrorMessage = message;\n        this.Severity = severity;\n    }\n}\n\n/**\n * the severity\n * hata seviyeleri\n */\nexport const Severity = {\n    /**\n     * düşük derecede hata (kullanıcı hatası, geçersiz input değeri gibi..)\n     */\n    Low: 1,\n    /**\n     * geliştiriciyi ilgilendiren hata türü...\n     */\n    High: 2,\n};\n","/**\n * gelen kutusu data contractı\n */\nexport class InboxmessageContract{\n    inboxId;\n    senderUserId;\n    receiverUserId;\n    message;\n    sendDate;\n    readStatus;\n    readStatusText;\n    senderFirstName;\n    senderLastName;\n    senderFullName;\n    startDate;\n    endDate;\n}","import { CommonTypes } from \"../Types/Common\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\nimport Cache from \"./Cache\";\nimport { Response, Severity } from \"../Core/Response\";\nimport { InboxmessageContract } from \"../Models/InboxMessageContract\";\nimport User from \"../Models/User\";\n\n/**\n * login the user\n * @param userContract\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function LoginUser(userContract) {\n  let response = new Response();\n  let contract = userContract;\n  let url = CommonTypes.GetUrlForAPI(\"user\", \"login\");\n\n  Cache.setItem(\"lastloginrequestuser\", contract);\n\n  await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      if (res.data.success) {\n        //parola değişikliği gerekiyor mu?\n        if (\n          res.data.value.accessToken &&\n          res.data.value.accessToken.token &&\n          res.data.value.accessToken.token.length > 0 &&\n          res.data.value.shouldNewPassword\n        ) {\n          HttpClientServiceInstance.setTokenOnLogin(\n            res.data.value.accessToken.token\n          );\n          response.value = { shouldNewPassword: true };\n        } else {\n          let userData = res.data.value.userDefinitionContract;\n\n          let user = new User();\n          user.userId = userData.userId;\n          user.email = userData.email;\n          user.firstName = userData.firstName;\n          user.lastName = userData.lastName;\n          user.userName = userData.userName;\n\n          if (res.data.value.companyContract) {\n            user.isCorporateUser = true;\n            user.company = { ...res.data.value.companyContract };\n          }\n\n          if (res.data.value.apartmentContract) {\n            user.apartment = res.data.value.apartmentContract;\n          }\n          user.token = res.data.value.accessToken.token;\n          user.expiration = res.data.value.accessToken.expiration;\n          HttpClientServiceInstance.setTokenOnLogin(user.token);\n\n          user.inboxNotificationCount = userData.inboxNotificationCount;\n          user.generalNotificationCount = 0; //doldurulacak - sunucu tarafı null\n\n          //resources\n          user.resourceActionList = res.data.value.resourceActions;\n\n          localStorage.setItem(\"user\", JSON.stringify(user));\n          HttpClientServiceInstance.setTokenOnLogin(user.token);\n\n          response.value = user;\n          SetUserResources(user.resourceActionList);\n        }\n      } else {\n        response.addCoreResults(res.data.results);\n      }\n    })\n    .catch((e) => {\n      response.addResult(e.message, Severity.High, \"login\");\n    });\n  return response;\n}\n\n/**\n * parolayı yenilemek için doğrulama kodu istenir.\n * @param {userContract} userContract\n */\nexport async function ForgotPassword(userContract) {\n  let ro = new Response();\n  let contract = userContract;\n  let url = CommonTypes.GetUrlForAPI(\"user\", \"forgotpassword\");\n\n  await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      if (res.data && res.data.success) {\n        ro.value = res.data.value;\n      } else {\n        ro.addCoreResults(res.data.results);\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  return ro;\n}\n\n/**\n * yeni şifre belirler\n * @param {string} password\n */\nexport async function SetNewPassword(password, email) {\n  let ro = new Response();\n  let contract = new User();\n  contract.email = email;\n  contract.password = password;\n\n  let url = CommonTypes.GetUrlForAPI(\"user\", \"newpassword\");\n\n  await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      if (res.data && res.data.success) {\n        ro.value = res.data.value;\n        return ro;\n      } else {\n        ro.addCoreResults(res.data.results);\n        return ro;\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n      ro.addResult(\"Parola değişikliği yapılamadı.\");\n      return ro;\n    });\n}\n/**\n * gelen kutusu bilgilerini getirir.\n * @param inboxmessageContract\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function GetUserInboxList(inboxmessageContract) {\n  let response = new Response();\n  let inboxContract = new InboxmessageContract();\n  inboxContract = inboxmessageContract;\n\n  if (inboxContract.receiverUserId > 0) {\n    await HttpClientServiceInstance.post(\n      CommonTypes.GetUrlForAPI(\"user\", \"getusermessages\"),\n      inboxContract\n    )\n      .then((res) => {\n        response.value = res.data;\n        console.log(\"inbox data:\", response.value);\n      })\n      .catch((err) => {\n        response.addResult(\"mesajlar getirilemedi.\", Severity.High, \"server\");\n      });\n  } else {\n    response.addResult(\n      \"üye id bilgisi alınamadı\",\n      Severity.Low,\n      \"null parameter\"\n    );\n  }\n\n  return response;\n}\n\n/**\n *\n * @returns {Promise<void>}\n * @param inboxId\n */\nexport async function updateMessageStatusForReaded(inboxId) {\n  let response = new Response();\n  let inboxContract = new InboxmessageContract();\n  inboxContract.inboxId = inboxId;\n\n  if (inboxContract.inboxId > 0) {\n    await HttpClientServiceInstance.post(\n      CommonTypes.GetUrlForAPI(\"user\", \"updatemessagestatus\"),\n      inboxContract\n    )\n      .then((res) => {\n        response.value = res.data;\n        console.log(\"message status updated\");\n      })\n      .catch((err) => {\n        response.addResult(\"mesajlar getirilemedi.\", Severity.High, \"server\");\n      });\n  } else {\n    response.addResult(\n      \"mesaj id bilgisi alınamadı\",\n      Severity.Low,\n      \"null parameter\"\n    );\n  }\n\n  return response;\n}\n\n/**\n * kaynak-aksiyon normalizasyonu yapılır.\n * @param {array} resourceActions\n */\nfunction SetUserResources(resourceActions) {\n  if (resourceActions && resourceActions.length > 0) {\n    // var s = {\n    //     parentCode:'',\n    //     parentName:'',\n    //     resources=[{\n    //         resourceCode:'',\n    //         resourceName:'',\n    //         Actions:[{\n    //\n    //         }]\n    //     }]\n    // }\n    let resourceList = [];\n\n    for (let item of resourceActions) {\n      //parent yoksa eklenir.\n      if (!resourceList.find((x) => x.parentCode === item.parentCode)) {\n        let tmpRes = {};\n        tmpRes.parentCode = item.parentCode;\n        tmpRes.parentName = item.parentName;\n        tmpRes.resources = [];\n        tmpRes.resources.Actions = [];\n        resourceList.push(tmpRes);\n      }\n\n      let ind = resourceList.findIndex((r) => r.parentCode === item.parentCode);\n      // let tmpR = resourceList[ind].Resources.find(val => val.resourceCode === item.resourceCode);\n\n      //ekran eklenmemişse eklenir.\n      if (\n        !resourceList[ind].resources.find(\n          (val) => val.resourceCode === item.resourceCode\n        )\n      ) {\n        let resourceSub = {\n          resourceCode: item.resourceCode,\n          name: item.name,\n          iconKey: item.iconKey,\n          path: item.path,\n          actions: [],\n        };\n        resourceList[ind].resources.push(resourceSub);\n      }\n\n      //aksiyon eklenmemişse eklenir\n      if (\n        resourceList[ind].resources.find(\n          (val) => val.resourceCode === item.resourceCode\n        ) &&\n        !resourceList[ind].resources\n          .find((val) => val.resourceCode === item.resourceCode)\n          .actions.find((r) => r.actionKey === item.actionKey)\n      ) {\n        let act = {\n          actionName: item.actionName,\n          actionKey: item.actionKey,\n        };\n        resourceList[ind].resources\n          .find((val) => val.resourceCode === item.resourceCode)\n          .actions.push(act);\n      }\n    }\n    Cache.overrideItem(\"resources\", resourceList);\n  }\n}\n/**\n * kurum kullanıcı kaydı\n * @param {Company} companyContract\n */\nexport async function RegisterCompany(companyContract) {\n  let ro = new Response();\n\n  return await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForAPI(\"user\", \"savecompany\"),\n    companyContract\n  )\n    .then((res) => {\n      if (!res && !res.data) {\n        ro.addResult(\"Kullanıcı oluşturulamadı.\");\n        return ro;\n      } else {\n        if (res.data && res.data.success) {\n          ro.value = res.data.value;\n          return ro;\n        } else {\n          ro.addCoreResults(res.data.results);\n          return ro;\n        }\n      }\n    })\n    .catch((err) => {\n      ro.addResult(\"İşlem gerçekleştirilemedi.\");\n      return ro;\n    });\n}\n","import * as actionTypes from \"./action-types\";\nimport User from \"../../Models/User\";\nimport { LoginUser } from \"../../Services/UserService\";\nimport { ShowStatusError } from \"../../Core/Helper\";\n\n//import Log from \"../../Services/Log\";\n\n/**\n *\n * @param {User}\n * @returns {{payload: *, type: string}}\n * @constructor\n */\nexport function LoginSuccess(userContract) {\n  return {\n    type: actionTypes.LOGIN,\n    payload: userContract,\n  };\n}\n\nexport function ChangeLoginStatusSuccess(\n  token,\n  expiration,\n  isSuccess,\n  isNewPassword = false\n) {\n  return {\n    type: actionTypes.CHANGE_LOGIN_STATUS,\n    payload: {\n      token,\n      expiration,\n      isSuccess,\n      isNewPassword,\n    },\n  };\n}\n\nexport function ChangeLoginStatus(jwtObject) {\n  return function (dispatch) {\n    dispatch(\n      ChangeLoginStatusSuccess(\n        jwtObject.token,\n        jwtObject.expiration,\n        jwtObject.isSuccess,\n        jwtObject.isNewPassword\n      )\n    );\n  };\n}\n\nexport function ChangeLoginToNewPasswordSuccess(email) {\n  return {\n    type: actionTypes.CHANGE_LOGIN_NEW_PASSWORD,\n    payload: {\n      email,\n    },\n  };\n}\nexport function ChangeLoginToNewPassword(email) {\n  return function (dispatch) {\n    dispatch(ChangeLoginToNewPasswordSuccess(email));\n  };\n}\n\nexport function Login(user) {\n  return function (dispatch) {\n    return LoginUser(user)\n      .then((res) => {\n        if (res.success) {\n          if (res.value.shouldNewPassword) {\n            //dispatch(ChangeLoginToNewPassword(user.email));\n            dispatch(\n              ChangeLoginStatusSuccess(user.token, user.expiration, false, true)\n            );\n          } else {\n            user = res.value;\n            dispatch(LoginSuccess(user));\n            //test\n            dispatch(\n              ChangeLoginStatusSuccess(user.token, user.expiration, true)\n            );\n          }\n        } else {\n          ShowStatusError(res.getResultsStringFormat());\n          dispatch(ChangeLoginStatusSuccess(\"\", new Date(), false));\n          dispatch(LoginSuccess(new User()));\n        }\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n}\n","import React, { Component } from \"react\";\nimport { GoogleLogin } from \"react-google-login\";\n//import {refreshTokenSetup} from \"./refresh-token-setup\";\n\nconst ClientId =\n  \"526937451548-d0q03t1ass9qgbipavmqms3ttrhpgma6.apps.googleusercontent.com\";\n\nclass GoogleLoginComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isDisable: false,\n    };\n  }\n\n  onSuccess = (res) => {\n    console.log(\"login successs - user : \", res.profileObj);\n    //todo: storage implemantasyon tamamlanacak.\n    // refreshTokenSetup(res);\n  };\n\n  onFailure = (res) => {\n    console.log(\"failure user : \", res);\n  };\n\n  render() {\n    return (\n      <div\n        className={\"google-login-div\"}\n        style={{ justifyContent: \"center\", justifyItems: \"center\" }}\n      >\n        <GoogleLogin\n          clientId={ClientId}\n          buttonText={\"Google ile giriş yap\"}\n          onSuccess={this.onSuccess}\n          onFailure={this.onFailure}\n          cookiePolicy={\"single_host_origin\"}\n          style={{ marginTop: \"100px\", width: \"100%\" }}\n          isSignedIn={true}\n          disabled={this.state.isDisable}\n        />\n      </div>\n    );\n  }\n}\n\nexport default GoogleLoginComponent;\n","import React, { Component } from \"react\";\nimport {\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n  FormFeedback,\n} from \"reactstrap\";\nimport User from \"../../Models/User\";\nimport Messages from \"../../Types/Messages\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as cityActions from \"../../redux/actions/city-county-actions\";\nimport * as loginActions from \"../../redux/actions/login-actions\";\nimport GoogleLoginComponent from \"./google/google-login\";\nimport {\n  IsNullOrEmpty,\n  ShowStatusError,\n  ShowStatusSuccess,\n} from \"../../Core/Helper\";\nimport { Checkbox, FormControlLabel, Grid } from \"@material-ui/core\";\nimport { ForgotPassword } from \"../../Services/UserService\";\n\n/*\n * Login component (giriş yap)\n * */\nclass Login extends Component {\n  loginUserContract = new User();\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataContract: {\n        Email: \"\",\n        Password: \"\",\n      },\n      validate: {\n        emailState: \"\",\n      },\n      isForgotPassword: false,\n    };\n  }\n\n  componentDidMount() {\n    // this.props.actions.changeLoginStatus({\n    //   token: \"\",\n    //   expiration: new Date(),\n    //   isSuccess: false,\n    // });\n    //dev ortamı için otomatik login\n    this.props.actions.loginUser({\n      firstName: \"Fatih\",\n      lastName: \"Gümüs\",\n      userName: \"\",\n      email: \"fatihgumus33@gmail.com\",\n      password: \"password\",\n      memberId: 0,\n    });\n  }\n\n  validateEmail(e) {\n    const emailRex =\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const { validate } = this.state;\n    if (emailRex.test(e.target.value)) {\n      validate.emailState = \"has-success\";\n    } else {\n      validate.emailState = \"has-danger\";\n    }\n    this.setState({ validate });\n  }\n\n  onForgotPassword = async () => {\n    let user = this.state.dataContract;\n    if (IsNullOrEmpty(user.Email)) {\n      ShowStatusError(\"mail adresinizi giriniz.\");\n      return;\n    }\n\n    await ForgotPassword(user)\n      .then((res) => {\n        if (res.success) {\n          ShowStatusSuccess(\n            \"Parola değiştirebilmeniz için doğrulama kodu mail adresinize gönderilmiştir.\"\n          );\n          this.setState({\n            ...this.state,\n            dataContract: {},\n            isForgotPassword: false,\n            validate: { emailState: \"\" },\n          });\n        } else {\n          ShowStatusError(res.getResultsStringFormat);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <Grid container spacing={3} alignItems=\"stretch\" justify=\"center\">\n          <Grid item style={{ marginTop: \"20px\" }} xs={4}>\n            <Grid item>\n              <Grid container direction=\"column\" spacing={3}>\n                <Grid item>\n                  <Form className=\"form\">\n                    <Col>\n                      <FormGroup>\n                        <Label>{Messages.LabelNames.email}</Label>\n                        <Input\n                          valid={\n                            this.state.validate.emailState === \"has-success\"\n                          }\n                          invalid={\n                            this.state.validate.emailState === \"has-danger\"\n                          }\n                          type=\"email\"\n                          name=\"email\"\n                          id=\"userEmail\"\n                          autoComplete=\"username\"\n                          placeholder=\"\"\n                          onChange={(e) => {\n                            this.loginUserContract.email = e.target.value;\n                            var datac = this.state.dataContract;\n                            datac.Email = e.target.value;\n                            this.setState({ dataContract: datac });\n                          }}\n                          onBlur={(e) => this.validateEmail(e)}\n                        />\n                        <FormFeedback valid={true}>\n                          {\" \"}\n                          {Messages.EMailValid}\n                        </FormFeedback>\n                        <FormFeedback invalid=\"true\">\n                          {Messages.EMailInvalid}\n                        </FormFeedback>\n                      </FormGroup>\n                    </Col>\n                    <Col>\n                      <FormGroup>\n                        <Label for=\"userLoginPassword\">\n                          {Messages.LabelNames.password}\n                        </Label>\n                        <Input\n                          type=\"password\"\n                          name=\"password\"\n                          id=\"userLoginPassword\"\n                          autoComplete=\"current-password\"\n                          onChange={(e) => {\n                            this.loginUserContract.password = e.target.value;\n                          }}\n                          disabled={this.state.isForgotPassword}\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col>\n                      <FormGroup>\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              onChange={(e) => {\n                                this.setState({\n                                  isForgotPassword: e.target.checked,\n                                });\n                              }}\n                              checked={this.state.isForgotPassword}\n                              name=\"forgot\"\n                            />\n                          }\n                          label=\"Parolamı Unuttum\"\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col>\n                      <FormGroup>\n                        <Button\n                          color={\"primary\"}\n                          onClick={(e) => {\n                            if (this.state.isForgotPassword)\n                              this.onForgotPassword();\n                            else {\n                              if (\n                                IsNullOrEmpty(this.loginUserContract.email) ||\n                                IsNullOrEmpty(this.loginUserContract.password)\n                              ) {\n                                ShowStatusError(\n                                  \"Email ve parola alanlarını doldurunuz.\"\n                                );\n                                return;\n                              }\n                              this.props.actions.loginUser(\n                                this.loginUserContract\n                              );\n                            }\n                          }}\n                        >\n                          {this.state.isForgotPassword\n                            ? \"Doğrulama Kodu Al\"\n                            : Messages.ActionNames.enter}\n                        </Button>\n                      </FormGroup>\n                    </Col>\n                  </Form>\n                </Grid>\n                <Grid item>\n                  <hr />\n                </Grid>\n                <Grid item>\n                  <GoogleLoginComponent />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item xs={6}>\n            <img\n              src={require(\"../../resources/images/group-business.jpg\")}\n              alt=\"business\"\n            />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userContract: state.loginReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      getCityList: bindActionCreators(cityActions.getCityList, dispatch),\n      loginUser: bindActionCreators(loginActions.Login, dispatch),\n      changeLoginStatus: bindActionCreators(\n        loginActions.ChangeLoginStatus,\n        dispatch\n      ),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import * as actionTypes from \"./action-types\";\nimport { CommonTypes } from \"../../Types/Common\";\nimport {HttpClientServiceInstance} from \"../../Services/HttpClient\";\n\nexport function registerUserSuccess(registerUser) {\n  return {\n    type: actionTypes.REGISTER,\n    payload: registerUser,\n  };\n}\n\nexport function registerUser(user) {\n  return function (dispatch) {\n    let url = CommonTypes.GetUrlForAPI(\"user\", \"saveuser\");\n    return HttpClientServiceInstance.post(url, user)\n        .then((res) => {\n          if(res.status === 201){\n            let registerUser = {\n              name : user.firstName + user.lastName,\n              isRegistered: true\n            }\n            dispatch(registerUserSuccess(registerUser));\n          }else {\n            dispatch(registerUserSuccess({name:user.firstName+user.lastName,isRegistered:false}))\n          }\n    }).catch(e => console.log(e))\n  };\n}\n","import { CommonTypes } from \"../../Types/Common\";\nimport * as actionTypes from \"./action-types\";\n//import LogMessage from \"../../Services/Log\";\n//import Cache from \"../../Services/Cache\";\n\n//#region get actions\n\n/**\n * aksiyon listesi getirilir.\n * @param {string} resourceCode ekran kodu\n */\nexport function changeActiveResourceCode(resourceCode) {\n  let actionKeys = [];\n  // LogMessage(\"test message\");\n  switch (resourceCode) {\n    // masraf listele\n    case CommonTypes.Resources.home.resourceCode:\n      actionKeys.push.apply(actionKeys, CommonTypes.Resources.home.actionKeys);\n      break;\n    //apartman tanımlama\n    case CommonTypes.Resources.defineSiteApartment.resourceCode:\n      actionKeys.push.apply(actionKeys, [CommonTypes.ActionKeys.Save]);\n      break;\n    //üye ekle\n    case CommonTypes.Resources.defineMember.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.defineMember.actionKeys\n      );\n      break;\n    //üye listele\n    case CommonTypes.Resources.memberList.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.memberList.actionKeys\n      );\n      break;\n    // gelen kutusu\n    case CommonTypes.Resources.userInbox.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.userInbox.actionKeys\n      );\n      break;\n    // anket tanımlama\n    case CommonTypes.Resources.VoteDefine.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.VoteDefine.actionKeys\n      );\n      break;\n    // anket işlemler ve sonuçlar\n    case CommonTypes.Resources.VotingAndResult.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.VotingAndResult.actionKeys\n      );\n      break;\n    // masraf giriş\n    case CommonTypes.Resources.ExpenseEntry.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.ExpenseEntry.actionKeys\n      );\n      break;\n    // masraf listele\n    case CommonTypes.Resources.ExpenseList.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.ExpenseList.actionKeys\n      );\n      break;\n    // ihale kaydı\n    case CommonTypes.Resources.TenderDefining.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.TenderDefining.actionKeys\n      );\n      break;\n      // ihale listeleme\n    case CommonTypes.Resources.TenderListing.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.TenderListing.actionKeys\n      );\n      break;\n      // aidat ödeme\n    case CommonTypes.Resources.DuesPayment.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.DuesPayment.actionKeys\n      );\n      break;\n      // aidat listeleme\n    case CommonTypes.Resources.DuesListing.resourceCode:\n      actionKeys.push.apply(\n          actionKeys,\n          CommonTypes.Resources.DuesListing.actionKeys\n      );\n      break;\n    default:\n      break;\n  }\n\n  return function (dispatch) {\n    dispatch(GetActionListSuccess(actionKeys, resourceCode));\n  };\n}\n\nexport function GetActionListSuccess(actionKeyList, resourceCode) {\n  return {\n    type: actionTypes.CHANGE_ACTION_LIST,\n    payload: { actionKeyList, resourceCode },\n  };\n}\n\n//#endregion\n\n//#region execute action\n\n/**\n * on execute action\n * @param {func} onExecute (key)\n */\nexport function executeCommand(onExecute) {\n  return function (dispatch) {\n    dispatch(executeSuccess(onExecute));\n  };\n}\n\nexport function executeSuccess(onExecute) {\n  return {\n    type: actionTypes.EXECUTE_ACTION,\n    payload: {\n      onExecute,\n    },\n  };\n}\n\n//#endregion\n\n//#region backdrop\n\nexport function changeBackDropStatus(status) {\n  return function (dispatch) {\n    return dispatch(changeBackDropSuccess(status));\n  };\n}\n\nexport function changeBackDropSuccess(status) {\n  return {\n    type: actionTypes.BACKDROP_STATUS,\n    payload: status,\n  };\n}\n//#endregion\n","\n\nexport class AppmanCommon{\n    \n    static isBackDrop = false\n    \n}\n","import { CommonTypes } from \"../Types/Common\";\nimport Cache from \"./Cache\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\nimport { Response, Severity } from \"../Core/Response\";\n\n/**\n * the parameter services\n */\nexport class ParameterService {\n  /**\n   * parametre listesi döndürür.\n   * @param {String} paramType - parametre tipi\n   */\n  async GetParameter(paramType) {\n    let returnObject = new Response();\n\n    if (!paramType || paramType.length < 1) {\n      returnObject.addResult(\"Parametre tipi alınamadı.\", Severity.Low);\n      return returnObject;\n    }\n\n    let parameters = [];\n\n    await HttpClientServiceInstance.post(\n      CommonTypes.GetUrlForAPI(\"core\", \"getparameter\"),\n      {\n        ParamType: paramType,\n      }\n    )\n      .then((res) => {\n        let data = res.data;\n        if (data && data.length > 0) {\n          data.forEach((element) => {\n            parameters.push(element);\n          });\n          Cache.setParameter(paramType, parameters);\n        }\n\n        returnObject.valueList = parameters;\n      })\n      .catch((e) => {\n        console.log(e);\n        returnObject.addResult(\"parametre listesi getirilemedi.\", Severity.Low);\n      });\n\n    return returnObject;\n  }\n}\n\n/**\n * rol listesini döndürür\n */\nexport async function GetRoleList() {\n  let returnData = [];\n\n  if (Cache.lru.has(\"rolelist\")) {\n    let listfromcache = Cache.lru.get(\"managerapartmentlist\");\n    returnData = listfromcache;\n  }\n\n  await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForAPI(\"core\", \"getrolelist\")\n  )\n    .then((res) => {\n      let data = res.data;\n      if (data && data.length > 0) {\n        Cache.lru.set(\"rolelist\", data);\n      }\n      returnData = data ? data : [];\n    })\n    .catch((e) => {\n      console.log(e);\n      returnData = undefined;\n    });\n\n  return returnData;\n}\n","export class Company {\n  companyId;\n  companyName;\n  taxNumber;\n  phoneNumber;\n  faxNumber;\n  addressId;\n  email;\n  userId;\n  password;\n\n  //adres\n  zipCode;\n  cityId;\n  countyId;\n  addressText;\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as cityCountyActions from \"../../redux/actions/city-county-actions\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nclass CityComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n    };\n  }\n  componentDidMount() {\n    this.props.actions.getCityList();\n  }\n\n  render() {\n    return (\n      <div>\n        <Autocomplete\n          id=\"combo-box-demo-city\"\n          options={\n            this.props.cityList && this.props.cityList.length > 1\n              ? this.props.cityList\n              : [{ name: \"\" }]\n          }\n          getOptionLabel={(option) => option.name}\n          fullWidth={true}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"İl\"\n              variant=\"outlined\"\n              fullWidth={true}\n            />\n          )}\n          onChange={(e, value, reason) => {\n            //value : cityContract\n            if (value && value.cityId) {\n              this.props.actions.changeSelectedCityId(value.cityId);\n              if (this.props.onSelectedCity) {\n                this.props.onSelectedCity(value);\n              }\n            }\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nCityComponent.propTypes = {\n  onSelectedCity: PropTypes.func,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    cityList: state.cityReducer,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      getCityList: bindActionCreators(cityCountyActions.getCityList, dispatch),\n      changeSelectedCityId: bindActionCreators(\n        cityCountyActions.changeSelectedCityId,\n        dispatch\n      ),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CityComponent);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as cityCountyActions from \"../../redux/actions/city-county-actions\";\nimport Messages from \"../../Types/Messages\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nclass CountyComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.props.actions.getCountyList();\n  }\n\n  createContent(countyList, cityId) {\n    let filtered = countyList.filter((x) => x.cityId === parseInt(cityId));\n    if (!filtered || filtered.length < 1) {\n      return (\n        <React.Fragment>\n          <Autocomplete\n            fullWidth={true}\n            id=\"combo-box-demo-county\"\n            options={[{ name: \"test\", id: 1 }]}\n            getOptionLabel={(option) => option.name}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label={Messages.LabelNames.county}\n                variant=\"outlined\"\n              />\n            )}\n          />\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <React.Fragment>\n        <Autocomplete\n          id=\"combo-box-demo-county\"\n          options={filtered}\n          getOptionLabel={(option) => option.name}\n          fullWidth={true}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label={Messages.LabelNames.county}\n              variant=\"outlined\"\n              fullWidth={true}\n            />\n          )}\n          onChange={(e, value, reason) => {\n            //value : countyContract\n            if (this.props && this.props.onSelectedCounty) {\n              if (value && value.countyId) {\n                this.props.onSelectedCounty(value);\n              }\n            }\n          }}\n        />\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.countyList && this.props.countyList.length > 1\n          ? this.createContent(this.props.countyList, this.props.currentCityId)\n          : this.createContent([], -1)}\n      </div>\n    );\n  }\n}\n\nCountyComponent.propTypes = {\n  onSelectedCounty: PropTypes.func,\n};\n\n//#region redux\n\nfunction mapStateToProps(state) {\n  return {\n    countyList: state.countyReducer,\n    currentCityId: state.changeSelectedCityReducer,\n  };\n}\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      getCountyList: bindActionCreators(\n        cityCountyActions.getCountyListAll,\n        dispatch\n      ),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CountyComponent);\n//#endregion\n","import React, { Component } from \"react\";\nimport {\n  Container,\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n  FormFeedback,\n  FormText,\n  Row,\n} from \"reactstrap\";\nimport User from \"../../Models/User\";\nimport Messages from \"../../Types/Messages\";\nimport { CommonTypes } from \"../../Types/Common\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as registerActions from \"../../redux/actions/register-actions\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport { AppmanCommon } from \"../Common/Constants\";\nimport {\n  Card,\n  Grid,\n  Paper,\n  CardActionArea,\n  CardContent,\n  Typography,\n  CardActions,\n  Switch,\n} from \"@material-ui/core\";\nimport {\n  GetIntValue,\n  IsNullOrEmpty,\n  ShowStatusError,\n  ShowStatusSuccess,\n} from \"../../Core/Helper\";\nimport { ParameterService } from \"../../Services/CoreService\";\nimport { Company } from \"../../Models/Company\";\nimport { RegisterCompany } from \"../../Services/UserService\";\nimport CityComponent from \"../Common/city-component\";\nimport CountyComponent from \"../Common/county-component\";\n\nclass SignIn extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      emailState: \"\",\n      dataContract: new User(),\n      validate: {\n        emailState: \"\",\n      },\n      hasAlert: false,\n      messageType: CommonTypes.MessageTypes.info,\n      alertMessage: \"\",\n      selectedPackage: {},\n      packageList: [],\n      isCompany: false,\n      companyContract: new Company(),\n      selectedCityId: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.getSubscriptionPackages();\n  }\n\n  //#region metods\n\n  getSubscriptionPackages = async () => {\n    let param = new ParameterService();\n    param\n      .GetParameter(\"Subscription\")\n      .then((response) => {\n        if (!response.success) {\n          ShowStatusError(response.getResultsStringFormat());\n          return;\n        }\n        if (response.valueList && response.valueList.length > 0) {\n          //paramValue=paket adı\n          //paramValue2=geçerliik sresi(ay)\n          //paramValue3=apartman limit\n          //paramValue4=üye limit\n          let packageList = [];\n          for (const item of response.valueList) {\n            var pac = {};\n            pac.packageName = item.paramValue;\n            pac.period = GetIntValue(item.paramValue2);\n            pac.apartmentLimit = GetIntValue(item.paramValue3);\n            pac.memberLimit = GetIntValue(item.paramValue4);\n            packageList.push(pac);\n          }\n          this.setState({ packageList: packageList });\n        }\n      })\n      .catch((err) => {\n        ShowStatusError(err.toOString());\n      });\n  };\n\n  submitForm() {\n    if (!this.validateContract) {\n      ShowStatusError(\"Zorunlu alanları doldurunuz.\");\n      return false;\n    }\n    if (this.state.isCompany) {\n      RegisterCompany(this.state.companyContract)\n        .then((res) => {\n          if (res.success) {\n            ShowStatusSuccess(\"Kullanıcı oluşturuldu.\");\n          } else {\n            ShowStatusError(res.getResultsStringFormat());\n          }\n        })\n        .catch((err) => {\n          ShowStatusError(\"İşlem yapılamadı.\");\n        });\n    } else {\n      if (\n        this.validateContract(this.state.dataContract) &&\n        this.props.actions.register\n      ) {\n        this.props.actions.changeBackdropStatus(true);\n        this.props.actions.register(this.state.dataContract);\n      }\n    }\n  }\n\n  //#region validating\n  validateEmail(e) {\n    const emailRex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const { validate } = this.state;\n    if (emailRex.test(e.target.value)) {\n      validate.emailState = \"has-success\";\n    } else {\n      validate.emailState = \"has-danger\";\n    }\n    this.setState({ validate });\n  }\n\n  /**\n   * validating user values\n   * @param {User} contract\n   */\n  validateContract(contract) {\n    let company = this.state.companyContract;\n    if (this.state.isCompany) {\n      if (IsNullOrEmpty(company.companyName)) return false;\n      if (IsNullOrEmpty(company.taxNumber)) return false;\n      if (IsNullOrEmpty(company.email)) return false;\n      if (IsNullOrEmpty(company.password)) return false;\n      return true;\n    }\n    if (contract.FirstName && contract.FirstName.length < 1) {\n      return false;\n    }\n    if (contract.LastName && contract.LastName.length < 1) {\n      return false;\n    }\n    if (contract.Email && contract.Email.length < 1) {\n      return false;\n    }\n    if (contract.Password && contract.Password.length < 1) {\n      return false;\n    }\n    return true;\n  }\n\n  //#endregion\n\n  //#endregion\n\n  /**\n   *\n   * @param {CityContract} city\n   */\n  onSelectedCity = (city) => {\n    if (city) {\n      var cmp = this.state.companyContract;\n      cmp.cityId = city.cityId;\n      this.setState({ selectedCityId: city.cityId, companyContract: cmp });\n    }\n  };\n  onSelectedCounty = (county) => {\n    if (county) {\n      var cmp = this.state.companyContract;\n      cmp.countyId = county.countyId;\n      this.setState({ companyContract: cmp });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <Grid container spacing={4}>\n          <Grid item xs={5}>\n            <Grid container spacing={3} style={{ margin: \"30px\" }}>\n              <Grid item xs={12}>\n                <Grid\n                  container\n                  justify={\"flex-start\"}\n                  aria-orientation={\"horizontal\"}\n                  spacing={3}\n                >\n                  {this.state.packageList.length > 0 ? (\n                    this.state.packageList.map((val, ind) => {\n                      return (\n                        <Grid item key={\"sgngrid\" + ind.toString()}>\n                          <Paper elevation={1}>\n                            <Card>\n                              <CardActionArea>\n                                <CardContent>\n                                  <Typography\n                                    gutterBottom\n                                    variant=\"h5\"\n                                    component=\"h5\"\n                                  >\n                                    {val.packageName}\n                                  </Typography>\n                                  <Typography\n                                    variant=\"body2\"\n                                    color=\"textSecondary\"\n                                    component=\"p\"\n                                  >\n                                    {val.period} ay geçerli\n                                  </Typography>\n                                  <Typography\n                                    variant=\"body2\"\n                                    color=\"textSecondary\"\n                                    component=\"p\"\n                                  >\n                                    {val.apartmentLimit} adet apartman kaydı\n                                  </Typography>\n                                  <Typography\n                                    variant=\"body2\"\n                                    color=\"textSecondary\"\n                                    component=\"p\"\n                                  >\n                                    {val.memberLimit} adet üye kaydı\n                                  </Typography>\n                                </CardContent>\n                              </CardActionArea>\n                              <CardActions>\n                                <Button\n                                  size=\"small\"\n                                  color={\n                                    this.state.selectedPackage.packageName ===\n                                    val.packageName\n                                      ? \"success\"\n                                      : \"primary\"\n                                  }\n                                  onClick={(e) => {\n                                    ShowStatusSuccess(\n                                      \"Seçilen paket : \" + val.packageName\n                                    );\n                                    this.setState({ selectedPackage: val });\n                                  }}\n                                  disabled={false}\n                                >\n                                  {this.state.selectedPackage.packageName ===\n                                  val.packageName\n                                    ? \"Paket Seçildi\"\n                                    : \"Paketi Seç\"}\n                                </Button>\n                              </CardActions>\n                            </Card>\n                          </Paper>\n                        </Grid>\n                      );\n                    })\n                  ) : (\n                    <p />\n                  )}\n                </Grid>\n              </Grid>\n            </Grid>\n            <Container className=\"App\">\n              <Form className=\"form\">\n                <Row>\n                  <Col>\n                    <FormGroup>\n                      <Label>\n                        {this.state.isCompany ? \"Kurumsal\" : \"Bireysel\"}\n                      </Label>\n                      <Switch\n                        checked={this.state.isCompany}\n                        onChange={(e) =>\n                          this.setState({ isCompany: e.target.checked })\n                        }\n                        color=\"primary\"\n                        name=\"Kurumsal\"\n                        inputProps={{ \"aria-label\": \"primary checkbox\" }}\n                      />\n                    </FormGroup>\n                  </Col>\n                </Row>\n                {this.state.isCompany ? (\n                  <React.Fragment>\n                    <Row>\n                      <Col>\n                        <FormGroup>\n                          <Label>Kurum Adı</Label>\n                          <Input\n                            type=\"text\"\n                            name=\"companyName\"\n                            id=\"companyName\"\n                            onChange={(e) => {\n                              var cmp = { ...this.state.companyContract };\n                              cmp.companyName = e.target.value;\n                              this.setState({ companyContract: cmp });\n                            }}\n                          />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col>\n                        <FormGroup>\n                          <Label>Vergi Numarası</Label>\n                          <Input\n                            type=\"text\"\n                            name=\"taxNumber\"\n                            id=\"taxNumber\"\n                            onChange={(e) => {\n                              var cmp = { ...this.state.companyContract };\n                              cmp.taxNumber = e.target.value;\n                              this.setState({ companyContract: cmp });\n                            }}\n                          />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col>\n                        <FormGroup>\n                          <Label>İl</Label>\n                          <CityComponent onSelectedCity={this.onSelectedCity} />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col>\n                        <FormGroup>\n                          <Label>İlçe</Label>\n                          <CountyComponent\n                            onSelectedCounty={this.onSelectedCounty}\n                          />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col>\n                        <FormGroup>\n                          <Label>Adres</Label>\n                          <Input\n                            type=\"textarea\"\n                            name=\"address\"\n                            id=\"address\"\n                            onChange={(e) => {\n                              var cmp = { ...this.state.companyContract };\n                              cmp.addressText = e.target.value;\n                              this.setState({ companyContract: cmp });\n                            }}\n                          />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                  </React.Fragment>\n                ) : (\n                  <Row>\n                    <Col>\n                      <FormGroup>\n                        <Label>{Messages.LabelNames.name}</Label>\n                        <Input\n                          type=\"text\"\n                          name=\"firstname\"\n                          id=\"userFirstName\"\n                          onChange={(e) => {\n                            // eslint-disable-next-line\n                            this.state.dataContract.firstName = e.target.value;\n                          }}\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col>\n                      <FormGroup>\n                        <Label>{Messages.LabelNames.surname}</Label>\n                        <Input\n                          type=\"text\"\n                          name=\"lastName\"\n                          id=\"userLastName\"\n                          onChange={(e) => {\n                            var contract = this.state.dataContract;\n                            contract.lastName = e.target.value;\n                            this.setState({ dataContract: contract });\n                          }}\n                        />\n                      </FormGroup>\n                    </Col>\n                  </Row>\n                )}\n\n                <Row>\n                  <Col>\n                    <FormGroup>\n                      <Label for=\"userSignEmail\">\n                        {Messages.LabelNames.email}\n                      </Label>\n                      <Input\n                        valid={this.state.validate.emailState === \"has-success\"}\n                        invalid={\n                          this.state.validate.emailState === \"has-danger\"\n                        }\n                        type=\"email\"\n                        name=\"email\"\n                        id=\"userSignEmail\"\n                        placeholder=\"\"\n                        onChange={(e) => {\n                          var contract = this.state.dataContract;\n                          var cmp = this.state.companyContract;\n                          contract.email = e.target.value;\n                          cmp.email = e.target.value;\n                          this.setState({\n                            dataContract: contract,\n                            companyContract: cmp,\n                          });\n                        }}\n                        onBlur={(e) => this.validateEmail(e)}\n                      />\n                      <FormFeedback valid={true}>\n                        {\" \"}\n                        {Messages.EMailValid}\n                      </FormFeedback>\n                      <FormFeedback invalid={\"true\"}>\n                        {Messages.EMailInvalid}\n                      </FormFeedback>\n                      <FormText> {Messages.EMailInputFormText}</FormText>\n                    </FormGroup>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col>\n                    <FormGroup>\n                      <Label for=\"userPassword\">\n                        {Messages.LabelNames.password}\n                      </Label>\n                      <Input\n                        type=\"password\"\n                        name=\"password\"\n                        id=\"userPassword\"\n                        placeholder=\"\"\n                        onChange={(e) => {\n                          var cmp = { ...this.state.companyContract };\n                          var dtc = this.state.dataContract;\n                          dtc.password = e.target.value;\n                          cmp.password = e.target.value;\n                          this.setState({\n                            companyContract: cmp,\n                            dataContract: dtc,\n                          });\n                        }}\n                      />\n                    </FormGroup>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col>\n                    <FormGroup>\n                      <Label>{\"Telefon Numarası\"}</Label>\n                      <Input\n                        type=\"tel\"\n                        name=\"Phone\"\n                        id=\"phone\"\n                        pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                        onChange={(e) => {\n                          var cmp = { ...this.state.companyContract };\n                          var dtc = this.state.dataContract;\n                          dtc.phoneNumber = e.target.value;\n                          cmp.phoneNumber = e.target.value;\n                          this.setState({\n                            companyContract: cmp,\n                            dataContract: dtc,\n                          });\n                        }}\n                      />\n                    </FormGroup>\n                  </Col>\n                </Row>\n                <Button\n                  color={\"primary\"}\n                  onClick={(e) => {\n                    AppmanCommon.isBackDrop = !AppmanCommon.isBackDrop;\n                    this.submitForm();\n                  }}\n                >\n                  {\"Kayıt Ol\"}\n                </Button>\n              </Form>\n            </Container>\n          </Grid>\n          <Grid item xs={7}>\n            {this.state.isCompany ? (\n              <Grid container direction=\"column\" spacing={3}>\n                <Grid item>\n                  <Typography variant=\"h3\">Kurumsal Hesap Açılışı</Typography>\n                </Grid>\n                <Grid>\n                  <img\n                    src={require(\"../../resources/images/company-concept-illustration_114360-2581.jpg\")}\n                    alt=\"company\"\n                  ></img>\n                </Grid>\n                <Grid>\n                  <Typography>\n                    Kurumsal hesap ile ihalelere teklif verebilirsiniz.\n                  </Typography>\n                </Grid>\n              </Grid>\n            ) : (\n              <div>\n                <Grid container direction=\"column\">\n                  <Grid item>\n                    <Typography variant=\"h3\">Bireysel Hesap Açılışı</Typography>\n                  </Grid>\n                  <Grid>\n                    <img\n                      src={require(\"../../resources/images/individual.jpg\")}\n                      alt=\"company\"\n                    ></img>\n                  </Grid>\n                  <Grid item>\n                    <Typography variant=\"body1\" paragraph>\n                      Bireysel hesap açarak apartman yönetimini hızlı, kolay ve\n                      verimli bir şekilde yapabilirsiniz.\n                    </Typography>\n                    <Typography paragraph>\n                      APMAN uygulaması ile apartman yönetimi bambaşka bir hale\n                      gelir. İstediğiniz yerden, istediğiniz zaman apartman\n                      sakinleri ile anketler düzenleyebilir, herhangi bir iş\n                      için firmalardan teklif alabilir, ve apartman gelir -\n                      gider takibini yapabilirsiniz.\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </div>\n            )}\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\n//#region redux\n\nfunction mapStateToProps(state) {\n  return {\n    // registeredUser: state.registerReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeBackdropStatus: bindActionCreators(\n        pageActions.changeBackDropStatus,\n        dispatch\n      ),\n      register: bindActionCreators(registerActions.registerUser, dispatch),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);\n\n//#endregion\n","import React, { useState } from \"react\";\nimport { TabContent, TabPane, Nav, NavItem, NavLink } from \"reactstrap\";\nimport classnames from \"classnames\";\nimport Login from \"./Login\";\nimport SignIn from \"./SignIn\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport { ShowStatusSuccess } from \"../../Core/Helper\";\n\nconst TabIn = (props) => {\n  const [activeTab, setActiveTab] = useState(\"1\");\n\n  const toggle = (tab) => {\n    if (props.registeredUser && props.registeredUser.isRegistered === true) {\n      props.actions.changeBackdropStatus(false);\n      ShowStatusSuccess(\"Kayıt işleminiz gerçekleşti.. giriş yapabilirsiniz.\");\n    }\n    if (activeTab !== tab) setActiveTab(tab);\n  };\n\n  return (\n    <div>\n      {props.registeredUser && props.registeredUser.isRegistered === true\n        ? toggle(\"1\")\n        : toggle(activeTab)}\n      <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === \"1\" })}\n            onClick={() => {\n              toggle(\"1\");\n            }}\n          >\n            Giriş Yap\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: activeTab === \"2\" })}\n            onClick={() => {\n              toggle(\"2\");\n            }}\n          >\n            Kayıt Ol\n          </NavLink>\n        </NavItem>\n      </Nav>\n      <TabContent activeTab={activeTab}>\n        <TabPane tabId=\"1\">\n          <Login />\n        </TabPane>\n        <TabPane tabId=\"2\">\n          <SignIn />\n        </TabPane>\n      </TabContent>\n    </div>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    registeredUser: state.registerReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeBackdropStatus: bindActionCreators(\n        pageActions.changeBackDropStatus,\n        dispatch\n      ),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TabIn);\n","import InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport ViewListRoundedIcon from \"@material-ui/icons/ViewListRounded\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport HowToVoteRoundedIcon from \"@material-ui/icons/HowToVoteRounded\";\nimport HomeIcon from \"@material-ui/icons/HomeRounded\";\nimport AddBox from \"@material-ui/icons/AddBoxRounded\";\nimport ListAltRoundedIcon from \"@material-ui/icons/ListAltRounded\"; // ihale listele\n//import ReceiptRoundedIcon from \"@material-ui/icons/ReceiptRounded\"; //aidat ödeme\nimport ThumbsUpDownRoundedIcon from \"@material-ui/icons/ThumbsUpDownRounded\";\nimport ProfileIcon from \"@material-ui/icons/AccountBoxRounded\";\nimport ApartmentRoundedIcon from \"@material-ui/icons/ApartmentRounded\";\nimport PaymentIcon from \"@material-ui/icons/Payment\";\n\nimport { CommonTypes } from \"../../Types/Common\";\nimport React from \"react\";\n\nexport default function GetIcon(iconKey) {\n  switch (iconKey) {\n    case CommonTypes.Iconkeys.inbox:\n      return <InboxIcon />;\n    case CommonTypes.Iconkeys.viewlist:\n      return <ViewListRoundedIcon />;\n    case CommonTypes.Iconkeys.personadd:\n      return <PersonAddIcon />;\n    case CommonTypes.Iconkeys.howtovote:\n      return <HowToVoteRoundedIcon />;\n    case CommonTypes.Iconkeys.home:\n      return <HomeIcon />;\n    case CommonTypes.Iconkeys.addChart:\n      return <AddBox />;\n    case CommonTypes.Iconkeys.listChart:\n      return <ListAltRoundedIcon />;\n    case CommonTypes.Iconkeys.paydue:\n      return <PaymentIcon />;\n    case CommonTypes.Iconkeys.updown:\n      return <ThumbsUpDownRoundedIcon />;\n    case CommonTypes.Iconkeys.profile:\n      return <ProfileIcon />;\n    case CommonTypes.Iconkeys.apartment:\n      return <ApartmentRoundedIcon />;\n    default:\n      return <InboxIcon />;\n  }\n}\n","//#region imports\nimport React, { useState } from \"react\";\n//import { Route } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport { fade, makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Badge from \"@material-ui/core/Badge\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport MoreIcon from \"@material-ui/icons/MoreVert\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport { GetActiveLocalUser } from \"../../Core/Helper\";\nimport Cache from \"../../Services/Cache\";\nimport GetIcon from \"../Utils/iconHelper\";\n\n//#endregion\nlet drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\",\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\",\n    },\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(3),\n      width: \"auto\",\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: \"20ch\",\n    },\n  },\n  sectionDesktop: {\n    display: \"none\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"flex\",\n    },\n  },\n  sectionMobile: {\n    display: \"flex\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"none\",\n    },\n  },\n}));\n\n/**\n * uygulama çerçevesini oluşturur.\n * @param props\n * @returns {*}\n * @constructor\n */\nfunction AppBarMenu(props) {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = useState(null);\n\n  //initial user\n\n  let tmpusr = GetActiveLocalUser();\n  console.log(\"app-bar kullanıcı = \", tmpusr);\n\n  let cacheResources = Cache.getItem(\"resources\");\n  console.log(\"kaynak listesi (cache) = \", cacheResources);\n\n  //drawer\n  const theme = useTheme();\n  const [openMenu, setOpenMenu] = useState(false);\n  // eslint-disable-next-line\n  const [inboxNotifCount, setInboxNotifCount] = useState(0);\n  // eslint-disable-next-line\n  const [generalNotifCount, setGeneralNotifCount] = useState(0);\n\n  const handleDrawerOpen = () => {\n    setOpenMenu(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpenMenu(false);\n  };\n  const isMenuOpen = Boolean(anchorEl);\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n  //#region handles\n\n  const handleProfileMenuOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMobileMenuClose = () => {\n    setMobileMoreAnchorEl(null);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    handleMobileMenuClose();\n  };\n\n  const handleMobileMenuOpen = (event) => {\n    setMobileMoreAnchorEl(event.currentTarget);\n  };\n\n  //#endregion\n\n  //#region renders\n\n  const menuId = \"primary-search-account-menu\";\n  const renderMenu = (\n    <Menu\n      anchorEl={anchorEl}\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n    >\n      <MenuItem component={Link} to=\"/user/profile\">\n        {\" \"}\n        Profil{\" \"}\n      </MenuItem>\n    </Menu>\n  );\n\n  const mobileMenuId = \"primary-search-account-menu-mobile\";\n  const renderMobileMenu = (\n    <Menu\n      anchorEl={mobileMoreAnchorEl}\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      id={mobileMenuId}\n      keepMounted\n      transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      open={isMobileMenuOpen}\n      onClose={handleMobileMenuClose}\n    >\n      <MenuItem component={Link} to=\"/user/inbox\">\n        <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n          <Badge badgeContent={4} color=\"secondary\">\n            <MailIcon />\n          </Badge>\n        </IconButton>\n        <p>Messages</p>\n      </MenuItem>\n      <MenuItem>\n        <IconButton aria-label=\"show 11 new notifications\" color=\"inherit\">\n          <Badge badgeContent={11} color=\"secondary\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n        <p>Notifications</p>\n      </MenuItem>\n      <MenuItem onClick={handleProfileMenuOpen}>\n        <IconButton\n          aria-label=\"account of current user\"\n          aria-controls=\"primary-search-account-menu\"\n          aria-haspopup=\"true\"\n          color=\"inherit\"\n        >\n          <AccountCircle />\n        </IconButton>\n        <p>Profile</p>\n      </MenuItem>\n    </Menu>\n  );\n\n  //#endregion\n\n  //bildirim kontrolü -- loop hatasından dolayı commentlendi geri açılacak (sınavlardan sonra :) )\n  // if(props.userContract && props.userContract.token && props.userContract.token.length>1){\n  //     if(props.userContract.inboxNotificationCount > 0)\n  //         setInboxNotifCount(props.userContract.inboxNotificationCount);\n  //     if(props.userContract.generalNotificationCount > 0)\n  //         setGeneralNotifCount(props.userContract.generalNotificationCount);\n  //\n  // }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: openMenu,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={clsx(classes.menuButton, openMenu && classes.hide)}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            APMAN\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Search…\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ \"aria-label\": \"search\" }}\n            />\n          </div>\n          <div className={classes.grow} />\n          <div className={classes.sectionDesktop}>\n            <IconButton\n              aria-label=\"show 4 new mails\"\n              color=\"inherit\"\n              component={Link}\n              to=\"/user/inbox\"\n            >\n              <Badge\n                showZero={false}\n                badgeContent={inboxNotifCount}\n                color=\"secondary\"\n              >\n                <MailIcon />\n              </Badge>\n            </IconButton>\n            <IconButton aria-label=\"show 17 new notifications\" color=\"inherit\">\n              <Badge\n                showZero={false}\n                badgeContent={generalNotifCount}\n                color=\"secondary\"\n              >\n                <NotificationsIcon />\n              </Badge>\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"account of current user\"\n              aria-controls={menuId}\n              aria-haspopup=\"true\"\n              onClick={handleProfileMenuOpen}\n              color=\"inherit\"\n            >\n              <AccountCircle />\n            </IconButton>\n          </div>\n          <div className={classes.sectionMobile}>\n            <IconButton\n              aria-label=\"show more\"\n              aria-controls={mobileMenuId}\n              aria-haspopup=\"true\"\n              onClick={handleMobileMenuOpen}\n              color=\"inherit\"\n            >\n              <MoreIcon />\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n      {renderMobileMenu}\n      {renderMenu}\n\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={openMenu}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"ltr\" ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <Accordion>\n          <AccordionDetails>\n            <List>\n              <ListItem button component={Link} to={\"/\"}>\n                <ListItemIcon>{GetIcon(\"home\")}</ListItemIcon>\n                <ListItemText primary={\"Ana Sayfa\"} />\n              </ListItem>\n            </List>\n          </AccordionDetails>\n        </Accordion>\n        {cacheResources && cacheResources.length > 0 ? (\n          cacheResources.map((val, ind) => {\n            return (\n              <Accordion key={\"accordion\" + ind}>\n                <AccordionSummary\n                  expandIcon={<ExpandMoreIcon />}\n                  aria-controls=\"panel1a-content\"\n                  id=\"panel1a-header\"\n                >\n                  <Typography style={{ fontSize: 15, fontWeight: \"bold\" }}>\n                    {val.parentName}\n                  </Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                  <List>\n                    {val.resources.map((sval, sind) => {\n                      return (\n                        <ListItem\n                          button\n                          key={sval.resourceCode}\n                          component={Link}\n                          to={sval.path}\n                        >\n                          <ListItemIcon>{GetIcon(sval.iconKey)}</ListItemIcon>\n                          <ListItemText primary={sval.name} />\n                        </ListItem>\n                      );\n                    })}\n                  </List>\n                </AccordionDetails>\n              </Accordion>\n            );\n          })\n        ) : (\n          <p />\n        )}\n      </Drawer>\n\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: openMenu,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        {props.children}\n      </main>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userContract: state.loginReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeBackdropStatus: bindActionCreators(\n        pageActions.changeBackDropStatus,\n        dispatch\n      ),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppBarMenu);\n","import { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport { CommonTypes, getActionLabel } from \"../../Types/Common\";\n\n/**\n * action bar için aksiyon döndürür.\n * executeCommand() aksiyon tetikler.\n * @param {props} props (key,icon,text)\n */\nconst Action = (props) => {\n  let key = props.ActionKey;\n\n  console.log(\"key: \", key);\n  return (\n    <div style={{ display: \"inline-block\", marginLeft: \"15px\" }}>\n      {key ? (\n        <Button\n          variant=\"contained\"\n          color={key === CommonTypes.ActionKeys.Close ? \"secondary\" : \"primary\"}\n          size=\"small\"\n          startIcon={props.Icon ? props.Icon : <InfoIcon />}\n          onClick={(e) => {\n            if (props.onExecuteCommand && props.onExecuteCommand.onExecute)\n              props.onExecuteCommand.onExecute(key);\n          }}\n        >\n          {getActionLabel(key)}\n        </Button>\n      ) : (\n        <div />\n      )}\n    </div>\n  );\n};\n\nAction.propType = {\n  ResourceCode: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  onExecuteCommand: state.actionExecuteReducer,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    actions: {\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Action);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Action from \"../ToolBox/action\";\nimport { CommonTypes } from \"../../Types/Common\";\n\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport CreateIcon from \"@material-ui/icons/Create\"; //düzenle\nimport PowerSettingsNewIcon from \"@material-ui/icons/PowerSettingsNew\"; //kapat\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\"; // temizle\nimport ImportContactsRoundedIcon from \"@material-ui/icons/ImportContactsRounded\"; // oku\nimport FindInPageOutlinedIcon from \"@material-ui/icons/FindInPageOutlined\"; // incele\nimport PostAddRoundedIcon from \"@material-ui/icons/PostAddRounded\"; // sözleşme ekle\nimport AttachFileRoundedIcon from \"@material-ui/icons/AttachFileRounded\"; // döküman\n\nclass ActionBar extends Component {\n  getIcon = (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.Save:\n        return <SaveIcon />;\n      case CommonTypes.ActionKeys.GetList:\n        return <ListIcon />;\n      case CommonTypes.ActionKeys.Clean:\n        return <InsertDriveFileIcon />;\n      case CommonTypes.ActionKeys.Edit:\n        return <CreateIcon />;\n      case CommonTypes.ActionKeys.Close:\n        return <PowerSettingsNewIcon />;\n      case CommonTypes.ActionKeys.Read:\n        return <ImportContactsRoundedIcon />;\n      case CommonTypes.ActionKeys.Examine:\n        return <FindInPageOutlinedIcon />;\n      case CommonTypes.ActionKeys.AddAgreement:\n        return <PostAddRoundedIcon />;\n      case CommonTypes.ActionKeys.Divit:\n        return <AttachFileRoundedIcon />;\n\n      default:\n        break;\n    }\n  };\n\n  static executeCommand(key) {\n    alert(\"no event. key:\" + key);\n    return;\n  }\n\n  generateActions = () => {\n    if (\n      this.props.actionListInfo &&\n      this.props.actionListInfo.actionKeyList &&\n      this.props.actionListInfo.actionKeyList.length > 0\n    ) {\n      let rtnObj = this.props.actionListInfo.actionKeyList.map(\n        (value, index) => {\n          return (\n            <Action\n              key={index + \"apbar\"}\n              ActionKey={value}\n              Icon={this.getIcon(value)}\n              ResourceCode={this.props.actionListInfo.resourceCode}\n              executeCommand\n              onExecuteCommand={ActionBar.executeCommand}\n            />\n          );\n        }\n      );\n\n      return rtnObj;\n    }\n  };\n\n  render() {\n    return <div>{this.generateActions()}</div>;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    actionListInfo: state.actionListReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {},\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionBar);\n","import React, {Component} from 'react';\nimport {Backdrop, CircularProgress} from \"@material-ui/core\";\nimport {connect} from 'react-redux';\n\nfunction mapStateToProps(state) {\n    return {\n        backdropStatus: state.backdropStatusReducer,\n    };\n}\n\nclass BackdropComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false\n        }\n    }\n\n\n    render() {\n        return (\n            <React.Fragment>\n                <Backdrop\n                    open={!!(this.props.backdropStatus && this.props.backdropStatus === true)}\n                    \n                    style={{\n                        zIndex:100\n                    }}\n                >\n                    <CircularProgress color={\"primary\"}/>\n                </Backdrop>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n)(BackdropComponent);\n","import { Button, Grid, TextField, Typography } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport {\n  IsNullOrEmpty,\n  ShowStatusError,\n  ShowStatusSuccess,\n} from \"../../Core/Helper\";\nimport { connect } from \"react-redux\";\nimport * as loginActions from \"../../redux/actions/login-actions\";\nimport { bindActionCreators } from \"redux\";\nimport { SetNewPassword } from \"../../Services/UserService\";\nimport Cache from \"../../Services/Cache\";\n\n/**\n * password change component\n */\nclass PasswordChange extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: Cache.getItem(\"lastloginrequestuser\"),\n      newPassword: \"\",\n      newPassword2: \"\",\n    };\n  }\n\n  onSubmitForm = async () => {\n    if (IsNullOrEmpty(this.state.user.email)) {\n      ShowStatusError(\"mail adresi alınamadı.\");\n      return;\n    }\n    if (this.state.newPassword.length < 8) {\n      ShowStatusError(\"şifreniz en az 8 karakter olmalıdır.\");\n      return;\n    }\n    if (IsNullOrEmpty(this.state.newPassword)) {\n      ShowStatusError(\"yeni şifrenizi giriniz.\");\n      return;\n    }\n    if (this.state.newPassword.trim() !== this.state.newPassword2.trim()) {\n      ShowStatusError(\n        \"girdiğiniz parola ve tekrarı bir biri ile eşleşmemektedir.\"\n      );\n      return;\n    }\n\n    /**yeni parola kaydı */\n    await SetNewPassword(this.state.newPassword, this.state.user.email)\n      .then((response) => {\n        if (response && !response.success) {\n          ShowStatusError(response.getResultsStringFormat());\n        } else {\n          ShowStatusSuccess(\n            \"şifreniz kaydedildi. yeniden giriş yapabilirsiniz.\"\n          );\n          this.changeStatus();\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  changeStatus = () => {\n    this.props.actions.changeLoginStatus({\n      token: \"\",\n      expiration: new Date(),\n      isSuccess: false,\n    });\n  };\n  render() {\n    return (\n      <Grid container spacing={3} direction={\"row\"}>\n        <Grid item>\n          <Typography>{this.state.user.email}</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            label={\"Yeni şifre\"}\n            required\n            value={this.state.newPassword}\n            onChange={(e) => {\n              this.setState({ ...this.state, newPassword: e.target.value });\n            }}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            label={\"Yeni şifre tekrar\"}\n            required\n            value={this.state.newPassword2}\n            onChange={(e) => {\n              this.setState({ ...this.state, newPassword2: e.target.value });\n            }}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<SaveIcon />}\n            onClick={(e) => {\n              this.onSubmitForm();\n            }}\n          >\n            Kaydet\n          </Button>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeLoginStatus: bindActionCreators(\n        loginActions.ChangeLoginStatus,\n        dispatch\n      ),\n    },\n  };\n}\nfunction mapStateToProps(state) {\n  return {\n    loginJwtObject: state.changeLoginStatusReducer,\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordChange);\n","import React from \"react\";\nimport TabIn from \"./Begin/TabIn\";\nimport Messages from \"../Types/Messages\";\nimport {connect} from \"react-redux\";\nimport AppBarMenu from \"./Navigation/app-bar\";\nimport {Card, Container} from \"@material-ui/core\";\nimport ActionBar from \"./Navigation/action-bar\";\n\nimport BackdropComponent from \"./ToolBox/backdrop\";\nimport {bindActionCreators} from \"redux\";\nimport * as pageActions from \"../redux/actions/page-actions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport PasswordChange from \"./Begin/password-change\";\n\nfunction Layout(props) {\n    let loginControl = () => {\n        //  let usr = window.localStorage.getItem(\"user\");\n        // window.localStorage.removeItem(\"user\");\n        // let userc = new User();\n        // userc.userId = 1007;\n        // userc.firstName = \"api\";\n        // userc.lastName = \"api\";\n        // userc.email = \"api@gmail.com\";\n        // userc.token = \"asdasffasdf\";\n        // userc.userName = \"api\";\n        // userc.inboxNotificationCount = 0;\n\n        // window.localStorage.setItem(\"user\", JSON.stringify(userc));\n        // console.log(\"user active :\", userc);\n\n        //return props.children;\n        //todo: test e çıkmadan önce log-in geri aktifleştirilecek.\n        // eslint-disable-next-line no-unreachable\n        if (\n            props.loginJwtObject &&\n            props.loginJwtObject.isSuccess &&\n            props.loginJwtObject.isNewPassword === false\n        ) {\n            return props.children;\n        } else if (\n            props.loginJwtObject &&\n            !props.loginJwtObject.isSuccess &&\n            props.loginJwtObject.isNewPassword\n        ) {\n            return <PasswordChange/>;\n        } else {\n            return (\n                <div>\n                    <p className={\"lead\"}>{Messages.PlsLogIn}</p>\n                    <TabIn/>\n                </div>\n            );\n        }\n    };\n\n    return (\n        <AppBarMenu>\n            <Container maxWidth=\"xl\">\n                <Card>\n                    <CardActions>\n                        <ActionBar/>\n                    </CardActions>\n                    <CardContent>\n                        {props.loginJwtObject ? loginControl() : <p/>}\n                    </CardContent>\n                </Card>\n            </Container>\n            <BackdropComponent/>\n        </AppBarMenu>\n    );\n}\n\n//#region redux\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            changeBackdropStatus: bindActionCreators(\n                pageActions.changeBackDropStatus,\n                dispatch\n            ),\n        },\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        loginJwtObject: state.changeLoginStatusReducer,\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\n\n//#endregion\n","import React, { Component } from \"react\";\nimport { Container, Jumbotron } from \"reactstrap\";\nimport { CommonTypes } from \"../Types/Common\";\nimport * as pageActions from \"../redux/actions/page-actions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n\nclass Home extends Component {\n  static displayName = Home.name;\n\n  componentDidMount() {\n    if (this.props.actions.changeActiveResourceCode) {\n      this.props.actions.changeActiveResourceCode(\n        CommonTypes.Resources.home.resourceCode\n      );\n    }\n  }\n  render() {\n    return (\n      <div>\n        <Jumbotron fluid>\n          <Container fluid>\n            <h1 className=\"display-3\">Merhaba</h1>\n            <p className=\"lead\">Site yönetim uygulamasına hoş geldin...</p>\n          </Container>\n        </Jumbotron>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeActiveResourceCode: bindActionCreators(\n        pageActions.changeActiveResourceCode,\n        dispatch\n      ),\n    },\n  };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","export default class ApartmentContract {\n  siteId;\n  apartmentId;\n  blockList;\n  name;\n  addressText;\n  cityId;\n  cityName;\n  countyId;\n  countyName;\n  zipCode;\n  apartmentManagerId;\n  managerUserName;\n  managerUserId;\n  apartmentType;\n}\n","import { TextField } from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport React, { Component } from \"react\";\nimport { ParameterService } from \"../../Services/CoreService\";\n\nexport default class ParameterComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: [\n        {\n          paramType: \"default\",\n          paramDescription: \"loading...\",\n        },\n      ],\n      paramType: this.props.paramType,\n      labelName: this.props.labelName ? this.props.labelName : \"parameter name\",\n      isAllOption: this.props.isAllOption,\n      selectedParamCode: -1,\n    };\n  }\n\n  service = new ParameterService();\n\n  onChange = this.props.onSelectParameter;\n\n  componentDidMount() {\n    this.service.GetParameter(this.state.paramType).then((value) => {\n      this.setState(Object.assign({}, this.state, { data: value.valueList }));\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Autocomplete\n          id=\"combo-box-demo-prm\"\n          options={this.state.data}\n          getOptionLabel={(option) => option.paramDescription}\n          style={{ width: 300 }}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label={this.state.labelName}\n              variant=\"outlined\"\n            />\n          )}\n          onChange={(e, value, reason) => {\n            if (value && this.props.onSelectParameter) {\n              this.props.onSelectParameter(value.paramCode);\n            }\n          }}\n        />\n      </div>\n    );\n  }\n}\n","import { CommonTypes } from \"../Types/Common\";\nimport { Response, Severity } from \"../Core/Response\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\n//import Cache from \"./Cache\";\n\n/**\n * site/apartman kaydı yapılır.\n * return {Response}\n * @param {object} siteApartmentContract\n */\nexport async function DefineSiteApartmentService(siteApartmentContract) {\n  const returnObject = new Response();\n  let user = JSON.parse(localStorage.getItem(\"user\" || {}));\n\n  if (!user || user.userName.length < 1) {\n    returnObject.addResult(\"Yeniden giriş yapınız.\", Severity.Low);\n  }\n\n  if (!siteApartmentContract) {\n    returnObject.addResult(\"apartman bilgisi boş olamaz.\", Severity.Low);\n    return returnObject;\n  }\n  siteApartmentContract.managerUserName = user.userName;\n  siteApartmentContract.managerUserId = user.userId;\n\n  await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForAPI(\"apartment\", \"saveapartment\"),\n    siteApartmentContract\n  ).then((res) => {\n    if (res.status === CommonTypes.ResponseStatusCode.successful.created) {\n      //todo: will set.\n      console.log(\"defined new apartment.\", siteApartmentContract.name);\n      returnObject.value = 1;\n    }\n  });\n\n  return returnObject;\n}\n","import * as actionTypes from \"./action-types\";\n\nexport function addBlockSuccess(blockList) {\n  return {\n    type: actionTypes.SAVE_NEW_BLOCK,\n    payload: blockList,\n  };\n}\n\nexport function saveBlock(blockList) {\n  return function (dispatch) {\n    dispatch(addBlockSuccess(blockList));\n  };\n}\n","import React from \"react\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { CommonTypes } from \"../../Types/Common\";\nimport { IconButton } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\n\n/**\n * the button with icon\n * @param {actionType:string,onClick:func} props icon button\n */\nexport default function ButtonWithIcon(props) {\n  const setIconToButton = () => {\n    if (props.actionType) {\n      switch (props.actionType) {\n        case CommonTypes.ActionTypes.add:\n          return <AddIcon color=\"primary\"></AddIcon>;\n        case CommonTypes.ActionTypes.save:\n          return <SaveIcon color=\"primary\"></SaveIcon>;\n        case CommonTypes.ActionTypes.delete:\n          return <DeleteIcon color=\"action\"></DeleteIcon>;\n        case CommonTypes.ActionTypes.close:\n          return <CancelIcon color=\"error\"></CancelIcon>;\n        default:\n          return <InfoIcon></InfoIcon>;\n      }\n    }\n  };\n\n  return <IconButton onClick={props.onClick}>{setIconToButton()}</IconButton>;\n}\n\nButtonWithIcon.prototype = {\n  actionType: PropTypes.string.isRequired,\n};\n","export default class BlockContract {\n  constructor(code) {\n    this.Code = code;\n  }\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport ButtonWithIcon from \"./icon-buttons\";\nimport { CommonTypes } from \"../../Types/Common\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\n/**\n * list with checkbox\n * @param {list:array,isCheckBoxVisible:boolean,onDelete:func} props list\n */\nexport default function CheckboxList(props) {\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([0]);\n  const isCheckBoxVisible = props.isCheckBoxVisible ? true : false;\n\n  const handleToggle = (value) => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  const list = props.list;\n\n  return (\n    <List className={classes.root}>\n      {list.map((value, index) => {\n        const labelId = `checkbox-list-label-${index}`;\n\n        return (\n          <ListItem\n            key={index}\n            role={undefined}\n            dense\n            button\n            onClick={handleToggle(value)}\n          >\n            <ListItemIcon>\n              <Checkbox\n                edge=\"start\"\n                checked={checked.indexOf(value) !== -1}\n                tabIndex={-1}\n                disableRipple\n                inputProps={{ \"aria-labelledby\": labelId }}\n                hidden={!isCheckBoxVisible}\n              />\n            </ListItemIcon>\n            <ListItemText id={labelId} primary={value.label} />\n            <ListItemSecondaryAction>\n              <ButtonWithIcon\n                actionType={CommonTypes.ActionTypes.delete}\n                onClick={(e) => {\n                  if (props.onDelete) {\n                    props.onDelete(value.label);\n                  }\n                }}\n              ></ButtonWithIcon>\n            </ListItemSecondaryAction>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as apartmentActions from \"../../redux/actions/apertment-actions\";\nimport ButtonWithIcon from \"./icon-buttons\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Modal,\n  TextField,\n} from \"@material-ui/core\";\nimport { CommonTypes } from \"../../Types/Common\";\nimport BlockContract from \"../../Models/BlockContract\";\nimport CheckboxList from \"./list\";\nimport { ShowStatusWarning } from \"../../Core/Helper\";\n\nclass BlockDefinition extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: true,\n      blockList: [],\n    };\n  }\n\n  toggle = () => this.setState({ modal: !this.state.modal });\n  blockCode = \"\";\n  /**\n   * listeleme komponeni için düzenleme yapar\n   */\n  getBlockListForCheckBoxList = () => {\n    var templst = this.state.blockList.map((val, ind) => {\n      return {\n        label: val.Code,\n      };\n    });\n\n    return templst;\n  };\n\n  render() {\n    return (\n      <div>\n        <Modal\n          open={this.state.modal}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <Card>\n            <CardHeader title=\"Blok Tanımı\"></CardHeader>\n            <CardContent>\n              <TextField\n                type=\"string\"\n                label=\"Blok Kodu\"\n                onChange={(e) => {\n                  this.blockCode = e.target.value;\n                }}\n                onBlur={(e) => {\n                  e.target.value = \"\";\n                }}\n                onFocus={(e) => {\n                  e.target.value = \"\";\n                }}\n              ></TextField>\n              <CheckboxList\n                list={this.getBlockListForCheckBoxList()}\n                onDelete={(label) => {\n                  if (label && label.length > 0) {\n                    var lst = this.state.blockList.filter(\n                      (x) => x.Code !== label\n                    );\n                    this.setState({ blockList: lst });\n                  }\n                }}\n              ></CheckboxList>\n            </CardContent>\n            <CardActions>\n              <ButtonWithIcon\n                actionType={CommonTypes.ActionTypes.add}\n                onClick={(e) => {\n                  var lst = this.state.blockList;\n                  if (lst.find((r) => r.Code === this.blockCode)) {\n                    ShowStatusWarning(\n                      this.blockCode + \" isimli blok zaten ekli\"\n                    );\n                    return;\n                  }\n                  lst.push(new BlockContract(this.blockCode));\n                  this.setState({ blockList: lst });\n                }}\n              ></ButtonWithIcon>\n              <ButtonWithIcon\n                actionType={CommonTypes.ActionTypes.save}\n                onClick={(e) => {\n                  if (this.props.actions.addBlock) {\n                    this.props.actions.addBlock(this.state.blockList);\n                    this.toggle();\n                  }\n                }}\n              ></ButtonWithIcon>\n              <ButtonWithIcon\n                actionType={CommonTypes.ActionTypes.close}\n                onClick={(e) => {\n                  this.toggle();\n                }}\n              ></ButtonWithIcon>\n            </CardActions>\n          </Card>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    actions: {\n      addBlock: bindActionCreators(apartmentActions.saveBlock, dispatch),\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlockDefinition);\n","import React, { Component } from \"react\";\nimport { Collapse } from \"reactstrap\";\nimport Messages from \"../../../Types/Messages\";\nimport ApartmentContract from \"../../../Models/ApartmentContract\";\nimport ParameterComponent from \"../../Common/parameter-component\";\nimport { CommonTypes } from \"../../../Types/Common\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as cityCountyActions from \"../../../redux/actions/city-county-actions\";\nimport * as pageActions from \"../../../redux/actions/page-actions\";\nimport CityComponent from \"../../Common/city-component\";\nimport CountyComponent from \"../../Common/county-component\";\nimport {\n  TextField,\n  Grid,\n  Card,\n  List,\n  ListItem,\n  Paper,\n} from \"@material-ui/core\";\n\nimport { DefineSiteApartmentService } from \"../../../Services/DefineSiteApartment\";\nimport BlockDefinition from \"../../ToolBox/popup-block-definition\";\nimport {\n  IsNullOrEmpty,\n  ShowStatusError,\n  ShowStatusSuccess,\n  ShowStatusWarning,\n  StringBuilder,\n} from \"../../../Core/Helper\";\n\n/**\n * yeni apartman kaydı yapar\n */\nclass DefineSiteApartment extends Component {\n  dataContract = new ApartmentContract();\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      //site / apartman\n      dataContract: new ApartmentContract(),\n      selectedCityId: 1,\n      loading: true,\n      selectedParamCode: -1,\n      blocks: [],\n    };\n\n    this.renderForParameter = this.renderForParameter.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.actions.changeActiveResourceCode) {\n      this.props.actions.changeActiveResourceCode(\n        CommonTypes.Resources.defineSiteApartment.resourceCode\n      );\n    }\n    if (this.props.actions.executeCommand) {\n      this.props.actions.executeCommand(this.onExecute);\n    }\n  }\n\n  onExecute = (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.Save:\n        if (this.controlDataContract())\n          this.dataContract.apartmentType = this.state.selectedParamCode;\n\n        DefineSiteApartmentService(this.dataContract)\n          .then((res) => {\n            if (res.success) {\n              ShowStatusSuccess(\"Apartman kaydedildi.\");\n            } else {\n              let messagebuilder = new StringBuilder();\n              messagebuilder.append(\"Apartman kaydedilirken hata oluştu.\");\n              messagebuilder.appendLine(res.getResultsStringFormat());\n              ShowStatusError(messagebuilder.toString());\n            }\n          })\n          .catch((err) => {\n            console.log(err);\n          });\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * render for site or apartment parameter\n   */\n  renderForParameter = () => {\n    if (parseInt(this.state.selectedParamCode) > 0) {\n      if (this.state.selectedParamCode === \"1\") {\n        //site\n        return (\n          <Collapse isOpen={this.state.selectedParamCode === \"1\"}>\n            {this.siteDefinitionCard}\n          </Collapse>\n        );\n      } else {\n        //apartman\n        return (\n          <Collapse isOpen={this.state.selectedParamCode === \"2\"}>\n            {this.apartmentDefinitionCard}\n          </Collapse>\n        );\n      }\n    } else {\n      return <div />;\n    }\n  };\n\n  /**\n   * kaydedilen blokları forma ekler\n   */\n  getBlockList = () => {\n    if (this.props.addedBlocks && this.props.addedBlocks.length > 0) {\n      this.dataContract.blockList = this.props.addedBlocks;\n      let lst = this.props.addedBlocks.map((elm, ind) => {\n        return <ListItem key={ind}> {elm.Code}</ListItem>;\n      });\n      return lst;\n    }\n  };\n  /**\n   * apartman tanıtım kartı\n   */\n  apartmentDefinitionCard = (\n    <Card>\n      <Paper>\n        <TextField\n          fullWidth\n          type=\"string\"\n          label=\"Apartman Adı\"\n          onChange={(e) => {\n            this.dataContract.name = e.target.value;\n          }}\n        />\n      </Paper>\n    </Card>\n  );\n  /**\n   * site tanıtım kartı\n   */\n  siteDefinitionCard = (\n    <Card>\n      <Paper>\n        <TextField\n          fullWidth\n          type=\"string\"\n          label=\"Site Adı\"\n          onChange={(e) => {\n            this.dataContract.name = e.target.value;\n          }}\n        />\n        <BlockDefinition />\n      </Paper>\n    </Card>\n  );\n\n  /**\n   * control for data contract validation\n   */\n  controlDataContract() {\n    if (IsNullOrEmpty(this.dataContract.name)) {\n      ShowStatusWarning(\"Apartman veya Site ismini giriniz.\");\n      return false;\n    }\n    if (IsNullOrEmpty(this.dataContract.addressText)) {\n      ShowStatusWarning(\"Adres alanı boş olamamalıdır.\");\n      return false;\n    }\n    if (this.dataContract.cityId < 1) {\n      ShowStatusWarning(\"İl bilgisi giriniz.\");\n      return false;\n    }\n    if (this.dataContract.countyId < 1) {\n      ShowStatusWarning(\"İlçe bilgisi giriniz.\");\n      return false;\n    }\n    if (this.dataContract.zipCode < 1) {\n      ShowStatusWarning(\"Posta Kodu bilgisi giriniz.\");\n      return false;\n    }\n    if (this.state.selectedParamCode < 1) {\n      ShowStatusWarning(\"Apartman tipi seçiniz.\");\n      return false;\n    }\n    return true;\n  }\n\n  render() {\n    return (\n      <Grid container spacing={4}>\n        <Grid item xs={12} sm={12}>\n          <ParameterComponent\n            paramType=\"siteapt\"\n            labelName={Messages.LabelNames.recordType}\n            isAllOption={true}\n            onSelectParameter={(val) => {\n              if (val > 0) {\n                this.setState(\n                  Object.assign({}, this.state, {\n                    selectedParamCode: val,\n                  })\n                );\n              }\n            }}\n          />\n          {this.renderForParameter()}\n          <List>{this.getBlockList()}</List>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <CityComponent\n            onSelectedCity={(cityContract) => {\n              this.dataContract.cityId = cityContract.cityId;\n            }}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <CountyComponent\n            onSelectedCounty={(contract) => {\n              this.dataContract.countyId = contract.countyId;\n            }}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            fullWidth={true}\n            id=\"outlined-basic\"\n            label={Messages.LabelNames.zipcode}\n            variant=\"outlined\"\n            type=\"number\"\n            onChange={(e) => {\n              this.dataContract.zipCode = e.target.value;\n            }}\n          />\n        </Grid>\n        <Grid item xl={6}>\n          <TextField\n            fullWidth={true}\n            id=\"outlined-basic\"\n            label={Messages.LabelNames.address}\n            multiline\n            rows={5}\n            variant=\"outlined\"\n            onChange={(e) => {\n              this.dataContract.addressText = e.target.value;\n            }}\n          />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\n//#region  redux metods\n\nfunction mapStateToProps(state) {\n  return {\n    blockList: state.defineBlockReducer,\n    actionEvent: state.actionExecuteReducer,\n    addedBlocks: state.defineBlockReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      getCityList: bindActionCreators(cityCountyActions.getCityList, dispatch),\n      getCountyList: bindActionCreators(\n        cityCountyActions.getCountyListAll,\n        dispatch\n      ),\n      changeActiveResourceCode: bindActionCreators(\n        pageActions.changeActiveResourceCode,\n        dispatch\n      ),\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DefineSiteApartment);\n\n//#endregion\n","export class MemberUserContract {\n  memberId;\n  apartmentId;\n  firstName;\n  lastName;\n  email;\n  floorNumber;\n  doorNumber;\n  roleId;\n  userId;\n  apartmentName;\n  roleName;\n  addressId;\n}\n","import { CommonTypes } from \"../Types/Common\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\n//import Cache from \"./Cache\";\nimport { Response, Severity } from \"../Core/Response\";\nimport { MemberUserContract } from \"../Models/MemberUserContract\";\nimport { GetActiveLocalUser } from \"../Core/Helper\";\n\n/*\n * kullanıcının yönetiminde olan apartman listesini döndürür\n * @param {string} userName\n * */\nexport async function GetApartmentListByManagerUserName(userName = \"\") {\n  let user = GetActiveLocalUser();\n  let returnData = [];\n  //\n  // let listfromcache = [];\n  // if (Cache.lru.has(\"managerapartmentlist\")) {\n  //   listfromcache = Cache.lru.get(\"managerapartmentlist\");\n  //   console.log('cache list:', listfromcache)\n  //   returnData = listfromcache;\n  // } else\n  if (user.token && user.token.length > 1) {\n    await HttpClientServiceInstance.post(\n      CommonTypes.GetUrlForAPI(\"apartment\", \"getapartmentsbymanager\"),\n      user\n    )\n      .then((res) => {\n        returnData = res.data;\n      })\n      .catch((err) => {\n        console.log(\"apartman listesi getirilirken hata oluştu :\", err);\n      });\n  }\n  return returnData;\n}\n\n/**\n * yeni üye kaydı yapılır.\n * @param {MemberUserContract} memberContract\n */\nexport async function SaveNewMember(memberContract) {\n  if (!memberContract) {\n    return;\n  }\n\n  let url = CommonTypes.GetUrlForAPI(\"user\", \"addmember\");\n  let response = {};\n\n  await HttpClientServiceInstance.post(url, memberContract)\n    .then((res) => {\n      if (res.status === 201) {\n        console.log(\"saved new member:\", memberContract);\n      }\n      response = res;\n    })\n    .catch((e) => {\n      console.log(\"occurred error for add member: \", e);\n      response = e;\n    });\n\n  return response;\n}\n\n/**\n * yöneticinin kontrolündeki kullanıcıları getirir.\n * @param {MemberUserContract} memberContract\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function GetMemberListByUserId(memberContract) {\n  let response = new Response();\n  let member = new MemberUserContract();\n  member.apartmentName = memberContract.apartmentName;\n\n  let userlogin = JSON.parse(localStorage.getItem(\"user\"));\n  member.userId = userlogin.userId;\n\n  if (!member || member.userId < 1) {\n    response.addResult(\"Kullanıcı bilginiz alınamadı..\");\n    return response;\n  } else {\n    await HttpClientServiceInstance.post(\n      CommonTypes.GetUrlForAPI(\"user\", \"memberlistbyuserid\"),\n      member\n    )\n      .then((res) => {\n        console.log(\"getting list member..\", res.data);\n        response.value = res.data;\n      })\n      .catch((err) => {\n        console.log(\"üye listesi getirilirken hata oluştu :\", err);\n        response.addResult(\"üye listesi getirilemedi...\");\n      });\n\n    return response;\n  }\n}\n\n/**\n * üye detaylarını getirir.\n * @param {number} memberId üye id\n *\n */\nexport async function GetMemberDetailByMemberId(memberId) {\n  let response = new Response();\n  let memberContract = new MemberUserContract();\n  memberContract.memberId = memberId;\n\n  if (memberId > 0) {\n    await HttpClientServiceInstance.post(\n      CommonTypes.GetUrlForAPI(\"user\", \"getmemberdetailbyid\"),\n      memberContract\n    )\n      .then((res) => {\n        response.value = res.data;\n      })\n      .catch((err) => {\n        response.addResult(\n          \"üye detayları getirilemedi.\",\n          Severity.Low,\n          \"server\"\n        );\n        console.log(\"apartman listesi getirilirken hata oluştu :\", err);\n      });\n  } else {\n    response.addResult(\n      \"üye id bilgisi alınamadı\",\n      Severity.Low,\n      \"null parameter\"\n    );\n  }\n\n  return response;\n}\n\n/**\n * üye güncelleme işlemi yapılır.\n * @param {MemberUserContract} memberContract üye bilgisi\n */\nexport async function UpdateMemberUser(memberContract) {\n  let response = new Response();\n\n  if (!memberContract) {\n    response.addResult(\n      \"üye bilgileri alınamadı. tekrar deneyiniz.\",\n      Severity.Low\n    );\n    return response;\n  }\n\n  let url = CommonTypes.GetUrlForAPI(\"user\", \"updatemember\");\n\n  await HttpClientServiceInstance.post(url, memberContract)\n    .then((res) => {\n      if (res.status === 201) {\n        console.log(\"updated member :\", memberContract);\n      }\n      response.value = res.data;\n    })\n    .catch((e) => {\n      console.log(\"occurred error for add member: \", e);\n      response.addResult(e.message, Severity.High);\n    });\n\n  return response;\n}\n","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {TextField} from \"@material-ui/core\";\n\n/**\n * combobox component\n * @param {*} props props\n */\nclass ComboBox extends Component {\n\n    constructor(props) {\n        super(props);\n        let defaultVal = [{name: 'Seçiniz'}]\n        this.state = {\n            defaultValue: props.defaultValue ? props.defaultValue : undefined,\n            dataList: props.itemSource && props.itemSource.length > 0 ? props.itemSource:defaultVal,\n            selectedValue: {name: 'Seçiniz'},\n            isDisable: props.disabled,\n            label: props.label\n        }\n    }\n\n    componentDidMount() {\n        let tempList = [{name: 'Seçiniz'}];\n        if (this.props.itemSource.length > 0) {\n            tempList.push.apply(this.props.itemSource)\n        }\n        this.setState({dataList:tempList,selectedValue:tempList[0]})\n        if(this.props.defaultValue){\n            let dt = this.state.dataList.find((v) => v === this.props.defaultValue)\n            if(dt){\n                this.setState({selectedValue:dt})\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        \n        if(this.props.itemSource.length !== prevProps.itemSource.length){\n            let tempList = [];\n            if (this.props.itemSource.length > 0) {\n               tempList = this.props.itemSource;\n               tempList.splice(0,0,{name: 'Seçiniz'})\n            }\n            this.setState({dataList:tempList,selectedValue:tempList[0]})\n        }\n    }\n\n    render() {\n        \n        return (\n            <div>\n                <Autocomplete\n                    id=\"combo-box-demo\"\n                    options={this.state.dataList}\n                    value={this.state.selectedValue}\n                    getOptionLabel={(option) => option.name}\n                    renderInput={(params) => (\n                        <TextField {...params} label={this.state.label} variant=\"outlined\"/>\n                    )}\n                    onChange={(e, value, reason) => {\n                        this.setState({selectedValue: value})\n\n                        if (this.props.onSelectedItemChange && value) {\n                            this.props.onSelectedItemChange(value);\n                        }\n                    }}\n                    fullWidth\n                    disabled={this.state.isDisable}\n                />\n            </div>\n        );\n    }\n\n}\n\nComboBox.propTypes = {\n    label: PropTypes.string.isRequired,\n    onSelectedItemChange: PropTypes.func,\n    itemSource: PropTypes.array.isRequired,\n};\n\nexport default ComboBox;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CommonTypes } from \"../../../Types/Common\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../../redux/actions/page-actions\";\nimport { TextField, Grid, Paper } from \"@material-ui/core\";\nimport {\n  GetApartmentListByManagerUserName,\n  SaveNewMember,\n  GetMemberDetailByMemberId,\n  UpdateMemberUser,\n} from \"../../../Services/MemberDefineService\";\nimport ComboBox from \"../../ToolBox/combo-box\";\nimport { MemberUserContract } from \"../../../Models/MemberUserContract\";\nimport {\n  ShowStatusError,\n  ShowStatusSuccess,\n  StringBuilder,\n} from \"../../../Core/Helper\";\nimport { Response, Severity } from \"../../../Core/Response\";\n\nconst style = {\n  root: {\n    flexGrow: 1,\n    margin: 10,\n    backgroundColor: \"white\",\n  },\n};\n\n/**\n * üye tanımlama\n */\nclass MemberDefine extends Component {\n  static propTypes = {};\n\n  updateContract = {};\n  //   addressId: 0\n  // addressText: \"mersin erdemli asdf\"\n  // apartmentId: 5\n  // apartmentName: null\n  // doorNumber: 7\n  // email: \"qwe@qwe.com\"\n  // firstName: \"qwd\"\n  // floorNumber: 7\n  // lastName: \"ase\"\n  // memberId: 6\n  // postCode: \"12345\"\n  // roleId: 0\n  // roleName: null\n  // userId: 0\n  // userName: \"\"\n\n  constructor(props) {\n    super(props);\n    this.dataContract = new MemberUserContract();\n    this.dataContract = {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      floorNumber: 0,\n      doorNumber: 0,\n      apartmentId: 0,\n    };\n    this.state = {\n      apartmentList: [],\n      isMailValid: undefined,\n      dataContract: this.dataContract,\n      isUpdate: false,\n    };\n  }\n\n  //#region life cycle\n\n  componentDidMount() {\n    let isUpdate = false;\n    let dtContract = {};\n\n    if (this.props.location.state && this.props.location.state.isUpdate) {\n      dtContract = this.props.location.state.dataContract;\n      isUpdate = true;\n      this.setState({ isUpdate: true });\n      //this.setState({ updateContract: contract, isUpdate: true });\n    }\n\n    this.props.actions.changeBackdropStatus(true);\n\n    //#region yöneticisi olunan apartman listesi getirilir.\n\n    GetApartmentListByManagerUserName()\n      .then((res) => {\n        if (res && res.length > 0) {\n          this.setState({ apartmentList: res });\n        }\n      })\n      .catch((e) => console.log(e))\n      .finally(() => {\n        this.props.actions.changeBackdropStatus(false);\n      });\n\n    //#endregion\n\n    //#region update ise üye bilgisi alınır.\n\n    if (isUpdate && dtContract.memberId > 0) {\n      this.props.actions.changeBackdropStatus(true);\n\n      GetMemberDetailByMemberId(dtContract.memberId)\n        .then((res) => {\n          if (res.success) {\n            this.setState({ dataContract: res.value });\n          } else {\n            console.log(res.results);\n          }\n        })\n        .catch((e) => console.log(e))\n        .finally(() => {\n          this.props.actions.changeBackdropStatus(false);\n        });\n    }\n\n    //#endregion\n\n    //#region action\n    if (this.props.actions.changeActiveResourceCode) {\n      this.props.actions.changeActiveResourceCode(\n        CommonTypes.Resources.defineMember.resourceCode\n      );\n    }\n    if (this.props.actions.executeCommand) {\n      this.props.actions.executeCommand(this.onExecute);\n    }\n    //#endregion\n  }\n\n  //#endregion\n\n  onExecute = async (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.Save:\n        let validateResponse = this.isValidContract(this.state.dataContract);\n        if (validateResponse.success) {\n          this.props.actions.changeBackdropStatus(true);\n          if (this.state.isUpdate) {\n            //#region güncelleme yapılır\n\n            await UpdateMemberUser(this.state.dataContract)\n              .then((res) => {\n                if (res.success) {\n                  ShowStatusSuccess(\"Kayıt Güncellendi.\");\n                } else {\n                  ShowStatusError(res.getResultsStringFormat());\n                }\n              })\n              .catch((e) => console.log(e))\n              .finally(() => {\n                this.props.actions.changeBackdropStatus(false);\n              });\n            //#endregion\n          } else {\n            //#region yeni üye kaydı yapılır.\n\n            await SaveNewMember(this.state.dataContract)\n              .then((res) => {\n                if (res.status === 201) {\n                  ShowStatusSuccess(\"Yeni üye kaydı yapıldı.\");\n                  this.props.history.push({ pathname: \"/\" });\n                }\n              })\n              .catch((e) => console.log(e))\n              .finally(() => {\n                this.props.actions.changeBackdropStatus(false);\n              });\n            //#endregion\n          }\n        } else {\n          ShowStatusError(validateResponse.getResultsStringFormat());\n        }\n        break;\n\n      case CommonTypes.ActionKeys.Clean:\n        this.dataContract = new MemberUserContract();\n        this.setState({ dataContract: new MemberUserContract() });\n\n        break;\n      default:\n        break;\n    }\n  };\n\n  isValidContract(contract) {\n    let strbuilder = new StringBuilder();\n\n    if (!contract.firstName || contract.firstName.length < 1) {\n      strbuilder.appendLine(\"üye adı girilmesi zorunludur..\");\n    }\n    if (!contract.lastName || contract.lastName.length < 1) {\n      strbuilder.appendLine(\"üye soyadı girilmesi zorunludur.\");\n    }\n    if (!contract.email || contract.email.length < 1) {\n      strbuilder.appendLine(\"email girilmesi zorunludur.\");\n    }\n    if (\n      !contract.floorNumber ||\n      contract.floorNumber < 1 ||\n      !contract.doorNumber ||\n      contract.doorNumber < 1\n    ) {\n      strbuilder.appendLine(\"kat ve daire numarası girilmesi zorunludur.\");\n    }\n\n    let response = new Response();\n    if (strbuilder.toString().length > 1) {\n      response.addResult(strbuilder.toString(), Severity.Low);\n      return response;\n    } else {\n      response.value = 1;\n      return response;\n    }\n  }\n\n  validateEmail(e) {\n    const emailRex =\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    let isValid = this.state.isMailValid;\n    isValid = !emailRex.test(e.target.value);\n    this.setState({ isMailValid: isValid });\n  }\n\n  render() {\n    return (\n      <div style={style.root} className={\"apman-layout-root\"}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={12}>\n            <Paper elevation={0}>\n              <ComboBox\n                label={\"Apartman\"}\n                onSelectedItemChange={(item) => {\n                  console.log(\"selected apartmentId:\", item.apartmentId);\n                  let dt = this.state.dataContract;\n                  dt.apartmentId = item.apartmentId;\n                  dt.addressId = item.addressId;\n                  this.setState({ dataContract: dt });\n                }}\n                itemSource={this.state.apartmentList}\n                defaultValue={\n                  this.state.apartmentList.length > 1\n                    ? this.state.apartmentList.find(\n                        (r) =>\n                          r.apartmentId === this.state.dataContract.apartmentId\n                      )\n                    : undefined\n                }\n              />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Paper elevation={0}>\n              <TextField\n                label=\"Ad\"\n                fullWidth\n                onChange={(e) => {\n                  var dt = this.state.dataContract;\n                  dt.firstName = e.target.value;\n                  this.setState({ dataContract: dt });\n                }}\n                value={this.state.dataContract.firstName}\n              />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Paper elevation={0}>\n              <TextField\n                label=\"Soyad\"\n                fullWidth\n                onChange={(e) => {\n                  var dt = this.state.dataContract;\n                  dt.lastName = e.target.value;\n                  this.setState({ dataContract: dt });\n                }}\n                value={this.state.dataContract.lastName}\n              />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Paper elevation={0}>\n              <TextField\n                label=\"Mail\"\n                type={\"email\"}\n                fullWidth\n                error={this.state.isMailValid}\n                onChange={(e) => {\n                  var dt = this.state.dataContract;\n                  dt.email = e.target.value;\n                  this.setState({ dataContract: dt });\n                }}\n                onBlur={(e) => {\n                  this.validateEmail(e);\n                }}\n                autoComplete={\"username\"}\n                value={this.state.dataContract.email}\n              />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Paper elevation={0}>\n              <TextField\n                label=\"Kat\"\n                type=\"number\"\n                fullWidth\n                onChange={(e) => {\n                  let flrNumber = \"\";\n                  if (e.target.value) {\n                    flrNumber = parseInt(e.target.value);\n                  }\n                  let dt = this.state.dataContract;\n                  dt.floorNumber = flrNumber;\n                  this.setState({ dataContract: dt });\n                }}\n                value={this.state.dataContract.floorNumber}\n              />\n            </Paper>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <Paper elevation={0}>\n              <TextField\n                label=\"Daire\"\n                type=\"number\"\n                fullWidth\n                onChange={(e) => {\n                  let doorn = \"\";\n                  if (e.target.value) {\n                    doorn = parseInt(e.target.value);\n                  }\n                  let dt = this.state.dataContract;\n                  dt.doorNumber = doorn;\n                  this.setState({ dataContract: dt });\n                }}\n                //value={this.updateContract.doorNumber}\n                value={this.state.dataContract.doorNumber}\n              />\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeBackdropStatus: bindActionCreators(\n        pageActions.changeBackDropStatus,\n        dispatch\n      ),\n      changeActiveResourceCode: bindActionCreators(\n        pageActions.changeActiveResourceCode,\n        dispatch\n      ),\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemberDefine);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MUIDataTable from \"mui-datatables\";\n\n/**\n * listeleme tablosu\n * https://github.com/gregnb/mui-datatables#api\n */\nclass DataTable extends Component {\n  options = {\n    filterType: \"checkbox\",\n    onRowSelectionChange: this.props.onSelectedItemChange,\n    selectableRows: \"single\",\n    selectableRowsOnClick: true,\n    // onRowClick: (rowData, rowMeta) => {\n    //   debugger;\n    //   //todo : seçili satırla güncelleme yapılabilecek.\n    //   var a = rowData;\n    //   var g = rowMeta;\n    // },\n  };\n\n  render() {\n    return (\n      <div>\n        <MUIDataTable\n          title={this.props.title}\n          data={this.props.data}\n          columns={this.props.columns}\n          options={this.options}\n        />\n      </div>\n    );\n  }\n}\n\nDataTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  onSelectedItemChange: PropTypes.func,\n};\n\nexport default DataTable;\n","import React, { Component } from \"react\";\nimport { CommonTypes } from \"../../../Types/Common\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../../redux/actions/page-actions\";\nimport {\n  GetApartmentListByManagerUserName,\n  GetMemberListByUserId,\n} from \"../../../Services/MemberDefineService\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { MemberUserContract } from \"../../../Models/MemberUserContract\";\nimport ComboBox from \"../../ToolBox/combo-box\";\nimport DataTable from \"../../ToolBox/DataTable\";\nimport {\n  ShowStatusError,\n  ShowStatusInfo,\n  ShowStatusWarning,\n} from \"../../../Core/Helper\";\n\nconst style = {\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    textAlign: \"center\",\n  },\n};\n\nclass MemberList extends Component {\n  criteriaContract = { apartmentName: \"\" };\n\n  columns = [\n    { name: \"firstName\", label: \"Ad\", options: { filter: true, sort: true } },\n    { name: \"lastName\", label: \"Soyad\", options: { filter: true, sort: true } },\n    {\n      name: \"userName\",\n      label: \"Kullanıcı Adı\",\n      options: { filter: true, sort: true },\n    },\n    { name: \"email\", label: \"Mail\", options: { filter: false, sort: false } },\n    {\n      name: \"apartmentName\",\n      label: \"Apartman Adı\",\n      options: { filter: false, sort: true },\n    },\n    {\n      name: \"roleName\",\n      label: \"Kullanıcı Rolü\",\n      options: { filter: true, sort: false },\n    },\n  ];\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(props) {\n    super(props);\n    this.state = {\n      criteria: {\n        apartmentId: -1,\n      },\n      apartmentList: [],\n      memberList: [],\n      selectedMembers: [],\n    };\n  }\n\n  componentDidMount() {\n    this.props.actions.changeBackdropStatus(true);\n    //#region yöneticisi olunan apartman listesi getirilir.\n\n    GetApartmentListByManagerUserName()\n      .then((res) => {\n        if (res && res.length > 0) {\n          this.setState({ apartmentList: res });\n        }\n      })\n      .catch((e) => console.log(e))\n      .finally(() => {\n        this.props.actions.changeBackdropStatus(false);\n      });\n\n    //#endregion\n\n    //#region action\n    if (this.props.actions.changeActiveResourceCode) {\n      this.props.actions.changeActiveResourceCode(\n        CommonTypes.Resources.memberList.resourceCode\n      );\n    }\n    if (this.props.actions.executeCommand) {\n      this.props.actions.executeCommand(this.onExecute);\n    }\n    //#endregion\n  }\n\n  onExecute = (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.GetList:\n        let contract = new MemberUserContract();\n        contract.apartmentName = this.criteriaContract.apartmentName;\n        //#region üye listesi getiriliyor..\n\n        GetMemberListByUserId(contract)\n          .then((res) => {\n            if (res.success) {\n              if (res.value && res.value.length > 0)\n                ShowStatusInfo(\n                  res.value.length.toString() + \" adet kayıt getirildi.\"\n                );\n              else ShowStatusInfo(\"Hiç kayıt bulunamadı..\");\n\n              this.setState({ memberList: res.value });\n            }\n          })\n          .catch((err) => {\n            ShowStatusError(\"Üye listesi getirilemedi..\");\n          });\n        //#endregion\n        break;\n\n      case CommonTypes.ActionKeys.Edit:\n        if (this.state.selectedMembers.length !== 1) {\n          ShowStatusWarning(\"güncelleme yapmak için 1 tane kayıt seçiniz.\");\n          return;\n        }\n        let selectedContract = this.state.selectedMembers[0];\n\n        if (selectedContract) {\n          this.props.history.push({\n            pathname: \"/admin/definemember\",\n            state: {\n              dataContract: selectedContract,\n              isUpdate: true,\n            },\n          });\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  render() {\n    return (\n      <div style={style.root}>\n        <Grid container spacing={2}>\n          <Grid item xs={3}>\n            <Paper>\n              <ComboBox\n                label={\"Apartman\"}\n                onSelectedItemChange={(item) => {\n                  //                   addressId: 8\n                  // addressText: null\n                  // apartmentId: 5\n                  // apartmentManagerId: 1\n                  // blockList: null\n                  // cityId: 0\n                  // countyId: 0\n                  // managerUserName: null\n                  // name: \"postmanTest\"\n                  // zipCode: null\n                  // __proto__: Object\n\n                  this.criteriaContract.apartmentName = item ? item.name : \"\";\n                }}\n                itemSource={this.state.apartmentList}\n              />\n            </Paper>\n          </Grid>\n          <Grid item xs={9}>\n            <Paper>\n              <DataTable\n                columns={this.columns}\n                data={this.state.memberList}\n                onSelectedItemChange={(\n                  currentRowIndex,\n                  allRowsIndexes,\n                  rowsSelectedIndex\n                ) => {\n                  let lst = this.state.memberList;\n                  let tempList = allRowsIndexes.map((value) => {\n                    return value.dataIndex;\n                  });\n                  let selectedList = [];\n                  tempList.forEach((element) => {\n                    selectedList.push(lst[element]);\n                  });\n                  this.setState({ selectedMembers: selectedList });\n                }}\n              />\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nMemberList.propTypes = {};\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeBackdropStatus: bindActionCreators(\n        pageActions.changeBackDropStatus,\n        dispatch\n      ),\n      changeActiveResourceCode: bindActionCreators(\n        pageActions.changeActiveResourceCode,\n        dispatch\n      ),\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemberList);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {GetActiveLocalUser} from \"../../Core/Helper\";\n\nfunction mapStateToProps(state) {\n    return {};\n}\n\nclass UserProfile extends Component {\n    \n    \n    render() {\n        let user = GetActiveLocalUser();\n        \n        return (\n            <div>\n                <Card style={{width: \"100%\", alignContent: \"center\"}}>\n                    <CardHeader\n                        avatar={\n                            <Avatar aria-label=\"recipe\" style={{backgroundColor: \"red\"}}>\n                                {(user)? user.firstName.substr(0,1):\"S\"}\n                            </Avatar>\n                        }\n                        title= {user.firstName + \" \" +user.lastName}\n                        subheader=\"September 14, 2020\"\n                    />\n                    <CardContent>\n                        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\n                            {/*kişi hakkında bilgi, cümleler, alıntı, özdeyiş :D*/}\n                        </Typography>\n\n                        <Typography variant=\"body1\" color=\"textPrimary\" component=\"p\">\n                            <b>Ad:</b> {user.firstName} <br/>\n                            <b>Soyad:</b> {user.lastName} <br/>\n                            <b>Kullanıcı Adı:</b> {user.userName} <br/>\n                            <b>Email:</b> {user.email} <br/>\n                            <b>Apartman:</b> {user.apartment && user.apartment.name}\n                        </Typography>\n\n                    </CardContent>\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n)(UserProfile);","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\n/**\n * dialog form\n * @param props\n * @returns {*}\n * @constructor\n */\nexport default function DialogForm(props) {\n  const [open, setOpen] = React.useState(true);\n\n  // const handleClickOpen = () => {\n  //     setOpen(true);\n  // };\n\n  const handleClose = () => {\n    if (props.handleClose) props.handleClose();\n\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Dialog\n        onClose={handleClose}\n        fullWidth={true}\n        maxWidth={\"md\"}\n        aria-labelledby=\"customized-dialog-title\"\n        open={open}\n      >\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          {props.title}\n        </DialogTitle>\n        <DialogContent dividers>\n          {props.content ? props.content : <p>no content.</p>}\n        </DialogContent>\n        <DialogActions>\n          {props.actions ? (\n            props.actions\n          ) : (\n            <Button autoFocus onClick={handleClose} color=\"primary\">\n              Tamam\n            </Button>\n          )}\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { CommonTypes, getDateIsoDate } from \"../../Types/Common\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n  GetUserInboxList,\n  updateMessageStatusForReaded,\n} from \"../../Services/UserService\";\nimport { InboxmessageContract } from \"../../Models/InboxMessageContract\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DataTable from \"../ToolBox/DataTable\";\nimport DialogForm from \"../ToolBox/dialog-form\";\nimport { Card, CardHeader } from \"@material-ui/core\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { ShowStatusError, ShowStatusWarning } from \"../../Core/Helper\";\n\nconst style = {\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    textAlign: \"center\",\n  },\n};\n\n/**\n * gelen kutusu sayfası\n */\nclass InboxComponent extends Component {\n  columns = [\n    {\n      name: \"senderFullName\",\n      label: \"Gönderen\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"sendDate\",\n      label: \"Gönderim Tarihi\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"message\",\n      label: \"Mesaj\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"readStatusText\",\n      label: \"Durumu\",\n      options: { filter: true, sort: true },\n    },\n  ];\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(props) {\n    super(props);\n    this.state = {\n      receiverUserId: 0,\n      startDate: getDateIsoDate(),\n      endDate: getDateIsoDate(),\n      messageList: [],\n      isOpenDialogForm: false,\n      selectedMessageList: [],\n    };\n  }\n\n  componentDidMount() {\n    //#region action\n    if (this.props.actions.changeActiveResourceCode) {\n      this.props.actions.changeActiveResourceCode(\n        CommonTypes.Resources.userInbox.resourceCode\n      );\n    }\n    if (this.props.actions.executeCommand) {\n      this.props.actions.executeCommand(this.onExecute);\n    }\n    //#endregion\n  }\n\n  onExecute = async (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.GetList:\n        let inboxContract = new InboxmessageContract();\n\n        let userActive = JSON.parse(localStorage.getItem(\"user\"));\n        if (userActive && userActive.userId > 0) {\n          inboxContract.receiverUserId = userActive.userId;\n        } else {\n          console.log(\"aktif kullanıcı bilgisi alınamadı.\");\n          return;\n        }\n\n        inboxContract.startDate = this.state.startDate;\n        inboxContract.endDate = this.state.endDate;\n\n        //#region mesaj listesi getiriliyor..\n\n        await GetUserInboxList(inboxContract)\n          .then((res) => {\n            if (res.success) {\n              this.setState({ messageList: res.value });\n            } else {\n              console.log(res.getResultsStringFormat());\n            }\n          })\n          .catch((err) => {\n            ShowStatusError(\"mesajlar getirilemedi.\");\n            console.log(err);\n          });\n        //#endregion\n        break;\n\n      //incele / ayrıntılar\n      case CommonTypes.ActionKeys.Read:\n        let lst = this.state.selectedMessageList;\n        if (lst && lst.length === 1) {\n          let messageContract = new InboxmessageContract();\n          messageContract = lst[0];\n\n          this.dialogContent = (\n            <Card>\n              <CardHeader\n                avatar={\n                  <Avatar\n                    aria-label=\"recipe\"\n                    style={{ backgroundColor: \"#26bdba\" }}\n                  >\n                    {messageContract.senderFirstName\n                      ? messageContract.senderFirstName.substr(0, 1)\n                      : \"S\"}\n                  </Avatar>\n                }\n                title={messageContract.senderFullName}\n                subheader={messageContract.sendDate}\n              />\n              <CardContent>\n                <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\n                  Mesaj içeriği..\n                </Typography>\n\n                <Typography variant=\"body1\" color=\"textPrimary\" component=\"p\">\n                  {messageContract.message}\n                </Typography>\n              </CardContent>\n            </Card>\n          );\n\n          //mesaj state güncelleme işlemi\n          await updateMessageStatusForReaded(messageContract.inboxId);\n\n          this.setState({ isOpenDialogForm: true });\n        } else {\n          ShowStatusWarning(\"sadece 1 adet kayıt seçiniz.\");\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  dialogContent = (<p>no content..</p>);\n\n  handleCloseDialog = () => {\n    this.setState({ isOpenDialogForm: false });\n  };\n  handleOpenDialog = () => {\n    this.setState({ isOpenDialogForm: true });\n  };\n  render() {\n    return (\n      <div style={style.root}>\n        <Grid container spacing={2}>\n          {/*kriterler*/}\n          <Grid item xs={3}>\n            <Paper elevation={0}>\n              <TextField\n                type=\"date\"\n                label={\"Başlangıç Tarihi\"}\n                min={\"2020-01-01\"}\n                max={Date.now()}\n                value={this.state.startDate}\n                onChange={(e) => {\n                  this.setState({ startDate: e.target.value });\n                }}\n              />\n            </Paper>\n            <Paper elevation={0}>\n              <TextField\n                type=\"date\"\n                label={\"Bitiş Tarihi\"}\n                min={\"2020-01-01\"}\n                max={Date.now()}\n                value={this.state.endDate}\n                onChange={(e) => {\n                  this.setState({ endDate: e.target.value });\n                }}\n              />\n            </Paper>\n          </Grid>\n\n          {/*data table*/}\n          <Grid item xs={9}>\n            <Paper>\n              <DataTable\n                columns={this.columns}\n                data={this.state.messageList}\n                onSelectedItemChange={(\n                  currentRowIndex,\n                  allRowsIndexes,\n                  rowsSelectedIndex\n                ) => {\n                  if (this.state.messageList.length > 0) {\n                    let lst = this.state.messageList;\n                    let tempList = allRowsIndexes.map((value) => {\n                      return value.dataIndex;\n                    });\n                    let selectedList = [];\n                    tempList.forEach((element) => {\n                      selectedList.push(lst[element]);\n                    });\n                    this.setState({ selectedMessageList: selectedList });\n                  }\n                }}\n              />\n            </Paper>\n            {this.state.isOpenDialogForm ? (\n              <DialogForm\n                title={\"Mesaj\"}\n                content={this.dialogContent}\n                handleClose={this.handleCloseDialog}\n              />\n            ) : (\n              <p></p>\n            )}\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeBackdropStatus: bindActionCreators(\n        pageActions.changeBackDropStatus,\n        dispatch\n      ),\n      changeActiveResourceCode: bindActionCreators(\n        pageActions.changeActiveResourceCode,\n        dispatch\n      ),\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InboxComponent);\n","/**\n *Genel Anket kontratıdır.\n */\nimport {getDateIsoDate} from \"../Types/Common\";\n\nexport class VoteContract {\n    voteId;\n    voteCode;\n    name;\n    apartmentId;\n    userChoice;\n    description;\n    isActive;\n    startDate;\n    endDate;\n    /**\n     * oy pusulası\n     */\n    optionList;\n    userChoiceList;\n    constructor() {\n        this.userChoice = new VoteItem();\n        this.startDate = getDateIsoDate();\n        this.endDate = getDateIsoDate();\n        this.name = '';\n        this.apartmentId = 0;\n        this.optionList = [];\n        this.userChoiceList = [];\n    }\n}\n\n/**\n * kullanıcı seçimidir. \n */\nexport class VoteItem{\n    voteOption;\n    userHash;\n    userId;\n    constructor() {\n        this.voteOption = new VoteOption();\n        this.userHash = '';\n    }\n}\n/**\n * seçim pusulasındaki her bir seçenektir\n */\nexport class VoteOption{\n    code;\n    description;\n}\n\n/**\n * seçim sonuç kontratı\n */\nexport class VoteResultContract{\n    voteId;\n    name;\n    apartmentId;\n    optionCode;\n    optionDescription;\n    voteCount;\n}","import React, {Component} from 'react';\nimport {Card, CardHeader} from \"@material-ui/core\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport List from \"@material-ui/core/List\";\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {IsNullOrEmpty} from \"../../Core/Helper\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Grid from \"@material-ui/core/Grid\";\nimport PropTypes from \"prop-types\";\n\n/**\n * the dynamic lisit\n */\nclass DynamicList extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            title : props.title ? props.title:'dynamic list component',\n            list:[],\n            footer:props.footer ? props.footer:undefined,\n            tempValue:''\n        }\n    }\n    \n    addListItem = (value)=>{\n        let temp = this.state.list;\n        temp.push(value);\n        this.setState({list:temp,tempValue:''})\n        if(this.props.onChangeList){\n            this.props.onChangeList(this.state.list)  \n        } \n    }\n    \n    \n    render() {\n        return (\n            <Card>\n                <CardHeader\n                title={this.state.title}\n                >\n                    <Typography variant={\"h4\"} color={\"textSecondary\"} align={\"center\"}>\n                        {this.state.title}asdasd\n                    </Typography>\n                </CardHeader>\n                <CardContent>\n                    <Grid container spacing={1} alignItems=\"flex-end\">\n                        <Grid item>\n                            <AddCircleOutlineRoundedIcon\n                                color={\"action\"}\n                                onClick={e =>{\n                                    if(IsNullOrEmpty(this.state.tempValue))\n                                        return;\n                                    this.addListItem(this.state.tempValue)\n                                }}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                type={'text'}\n                                fullWidth\n                                required\n                                label={'Değer'}\n                                value={this.state.tempValue}\n                                onChange={e =>{\n                                    this.setState({tempValue:e.target.value})\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                    <List>\n                        {this.state.list.map( (value,index)=>{\n                            return (\n                                <ListItem key={index+'dynamiclstitem'}>\n                                    <Typography variant={\"body1\"} color={\"textPrimary\"} >\n                                        {value}\n                                    </Typography>\n                                </ListItem>\n                            )\n                        })\n                        }\n                    </List>\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\nDynamicList.propTypes = {\n    onChangeList: PropTypes.func,\n    title: PropTypes.string.isRequired\n}\nexport default DynamicList;","import { CommonTypes } from \"../Types/Common\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\n//import Cache from \"./Cache\";\nimport { Response, Severity } from \"../Core/Response\";\nimport { VoteContract, VoteItem } from \"../Models/VoteContract\";\nimport { GetActiveLocalUser, GetIntValue } from \"../Core/Helper\";\n\n/**\n * Anket kaydetme işlemi yapar\n * @param voteContract\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function AddVote(voteContract) {\n  let response = new Response();\n  let contract = new VoteContract();\n  contract = voteContract;\n\n  if (GetIntValue(contract.apartmentId) < 1) {\n    response.addResult(\"apartman bilgisi alınamadı.\");\n    return response;\n  }\n\n  await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForAPI(\"vote\", \"addvote\"),\n    contract\n  )\n    .then((res) => {\n      if (res.status === CommonTypes.ResponseStatusCode.successful.created) {\n        response.value = 1;\n      }\n      if (\n        res.status === CommonTypes.ResponseStatusCode.clientError.badRequest\n      ) {\n        response.addResult(\n          \"eksik veya hatalı giriş yapıldı.. lütfen tekrar deneyiniz.\"\n        );\n      }\n    })\n    .catch((e) => {\n      response.addResult(\"Anket kaydetme işlemi başarısız.\" + e.message);\n    });\n  return response;\n}\n\n/**\n * get vote result\n * @param voteContract\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function GetVoteResultlist(voteContract) {\n  var response = new Response();\n  if (!voteContract) {\n    response.addResult(\n      \"kriterleri kontrol ederek tekrar deneyiniz.\",\n      Severity.Low\n    );\n    return response;\n  }\n\n  await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForAPI(\"vote\", \"getvoteresultlist\"),\n    voteContract\n  )\n    .then((res) => {\n      if (res.status === CommonTypes.ResponseStatusCode.successful.success) {\n        response.value = res.value;\n      }\n      if (\n        res.status === CommonTypes.ResponseStatusCode.clientError.badRequest\n      ) {\n        response.addResult(\n          \"eksik veya hatalı giriş yapıldı.. lütfen tekrar deneyiniz.\"\n        );\n      }\n    })\n    .catch((e) => {\n      response.addResult(\n        \"Sonuç listesi alınamadı. Daha snra tekrar deneyiniz.\" + e.message\n      );\n    });\n\n  return response;\n}\n\n/**\n * oy kullanımını bekleyen anketleri getirir.\n * @param voteContract\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function GetUserVote() {\n  let response = new Response();\n  let userContract = JSON.parse(localStorage.getItem(\"user\" || {}));\n  if (!userContract) {\n    response.addResult(\"Kullanıcı bilgileriniz alınamadı.\", Severity.Low);\n    return response;\n  }\n\n  await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForAPI(\"vote\", \"getuservotes\"),\n    userContract\n  )\n    .then((res) => {\n      if (res.status === CommonTypes.ResponseStatusCode.successful.success) {\n        response.value = res.data.value;\n      }\n      if (\n        res.status === CommonTypes.ResponseStatusCode.clientError.badRequest\n      ) {\n        response.addResult(\n          \"eksik veya hatalı giriş yapıldı.. lütfen tekrar deneyiniz.\"\n        );\n      }\n    })\n    .catch((e) => {\n      response.addResult(\n        \"Sonuç listesi alınamadı. Daha snra tekrar deneyiniz.\" + e.message\n      );\n    });\n\n  return response;\n}\n\n/**\n * send user vote\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function UserToVote(option, contract) {\n  let response = new Response();\n\n  if (!contract) {\n    response.addResult(\"oy bilgileriniz alınamadı.\", Severity.Low);\n    return response;\n  }\n\n  let userContract = JSON.parse(localStorage.getItem(\"user\" || {}));\n  if (!contract) {\n    response.addResult(\"kullanıcı bilgileriniz alınamadı.\", Severity.Low);\n    return response;\n  }\n\n  let voteContract = contract;\n  voteContract.userChoice = new VoteItem();\n  voteContract.userChoice.voteOption = option;\n  voteContract.userChoice.userId = userContract.userId;\n\n  await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForAPI(\"vote\", \"usertovote\"),\n    voteContract\n  )\n    .then((res) => {\n      if (res.status === CommonTypes.ResponseStatusCode.successful.success) {\n        response.value = res.data.value;\n      }\n      if (\n        res.status === CommonTypes.ResponseStatusCode.clientError.badRequest\n      ) {\n        response.addResult(\n          \"eksik veya hatalı giriş yapıldı.. lütfen tekrar deneyiniz.\"\n        );\n      }\n    })\n    .catch((e) => {\n      response.addResult(\"Hata meydana geldi.\" + e.message);\n    });\n\n  return response;\n}\n\n/**\n * anket sonuçları getirilir.\n * kullnıcının oy kullandığı tek anket için.\n * @param voteContract\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function GetVoteResult(voteContract) {\n  let response = new Response();\n  let user = GetActiveLocalUser();\n  if (!user || GetIntValue(user.userId) < 1) {\n    response.addResult(\"Kullanıcı bilginiz alınamadı.\", Severity.Low);\n    return response;\n  }\n  if (!voteContract) {\n    response.addResult(\"Seçili anket bilgisi alınamadı.\", Severity.Low);\n    return response;\n  }\n  voteContract.userChoice = new VoteItem();\n  voteContract.userChoice.userId = user.userId;\n\n  await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForAPI(\"vote\", \"getvoteresult\"),\n    voteContract\n  )\n    .then((res) => {\n      if (res.status === CommonTypes.ResponseStatusCode.successful.success) {\n        if (res.data && res.data.success) response.value = res.data.value;\n        else if (res.data && res.data.success === false) {\n          for (let item of res.data.results) {\n            response.addResult(item.errorMessage);\n          }\n        }\n      }\n      if (\n        res.status === CommonTypes.ResponseStatusCode.clientError.badRequest\n      ) {\n        response.addResult(\n          \"eksik veya hatalı giriş yapıldı.. lütfen tekrar deneyiniz.\"\n        );\n      }\n    })\n    .catch((e) => {\n      console.log(e);\n      response.addResult(\n        \"Sonuç listesi alınamadı. Daha sonra tekrar deneyiniz.\" + e.message\n      );\n    });\n\n  return response;\n}\n\n/**\n * oy verilmiş olan anketler getirilir.\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function GetUsedUserVote() {\n  let response = new Response();\n  let userContract = JSON.parse(localStorage.getItem(\"user\" || {}));\n  if (!userContract) {\n    response.addResult(\"Kullanıcı bilgileriniz alınamadı.\", Severity.Low);\n    return response;\n  }\n\n  await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForAPI(\"vote\", \"getuserusedvotes\"),\n    userContract\n  )\n    .then((res) => {\n      if (res.status === CommonTypes.ResponseStatusCode.successful.success) {\n        response.value = res.data.value;\n      }\n      if (\n        res.status === CommonTypes.ResponseStatusCode.clientError.badRequest\n      ) {\n        response.addResult(\n          \"eksik veya hatalı giriş yapıldı.. lütfen tekrar deneyiniz.\"\n        );\n      }\n    })\n    .catch((e) => {\n      response.addResult(\n        \"Sonuç listesi alınamadı. Daha snra tekrar deneyiniz.\" + e.message\n      );\n    });\n\n  return response;\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ComboBox from \"../ToolBox/combo-box\";\nimport { VoteContract, VoteOption } from \"../../Models/VoteContract\";\nimport { CommonTypes } from \"../../Types/Common\";\nimport { GetApartmentListByManagerUserName } from \"../../Services/MemberDefineService\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport {\n  DateControlOlderToday,\n  GetIntValue,\n  IsBiggerDate,\n  IsNullOrEmpty,\n  ShowStatusError,\n  ShowStatusSuccess,\n  StringBuilder,\n} from \"../../Core/Helper\";\nimport { Response, Severity } from \"../../Core/Response\";\nimport DynamicList from \"../ToolBox/dynamic-list\";\nimport { AddVote } from \"../../Services/VoteService\";\n\n/**\n * Anket tanımlama komponenti\n */\nclass VoteDefining extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      apartmentList: [],\n      voteContract: new VoteContract(),\n    };\n  }\n\n  componentDidMount() {\n    //#region yöneticisi olunan apartman listesi getirilir.\n    this.props.actions.changeBackdropStatus(true);\n    GetApartmentListByManagerUserName()\n      .then((res) => {\n        if (res && res.length > 0) {\n          console.log(\"aparman list:\", res);\n          this.setState({ apartmentList: res });\n        }\n      })\n      .catch((e) => console.log(e))\n      .finally(() => {\n        this.props.actions.changeBackdropStatus(false);\n      });\n\n    //#endregion\n\n    //#region action\n    if (this.props.actions.changeActiveResourceCode) {\n      this.props.actions.changeActiveResourceCode(\n        CommonTypes.Resources.VoteDefine.resourceCode\n      );\n    }\n    if (this.props.actions.executeCommand) {\n      this.props.actions.executeCommand(this.onExecute);\n    }\n    //#endregion\n  }\n\n  onExecute = async (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.Save:\n        let validResponse = this.isValidContract(this.state.voteContract);\n        if (validResponse.success) {\n          this.props.actions.changeBackdropStatus(true);\n          await AddVote(this.state.voteContract)\n            .then((res) => {\n              if (res.success) {\n                ShowStatusSuccess(\"Anket gönderildi.\");\n              } else {\n                ShowStatusError(res.getResultsStringFormat());\n              }\n            })\n            .catch((e) => {\n              ShowStatusError(e.message);\n            })\n            .finally(() => {\n              this.props.actions.changeBackdropStatus(false);\n            });\n        } else {\n          ShowStatusError(validResponse.getResultsStringFormat());\n        }\n        break;\n\n      case CommonTypes.ActionKeys.Clean:\n        break;\n      default:\n        break;\n    }\n  };\n\n  //validation\n  isValidContract = (contract) => {\n    let strbuilder = new StringBuilder();\n\n    if (GetIntValue(contract.apartmentId) < 1) {\n      strbuilder.appendLine(\"Apartman seçiniz.\");\n    }\n    if (IsNullOrEmpty(contract.name)) {\n      strbuilder.appendLine(\"Anket adı girilmesi zorunludur..\");\n    }\n    if (DateControlOlderToday(contract.startDate)) {\n      strbuilder.appendLine(\"Bugünden küçük tarih girilemez.\");\n    }\n    if (DateControlOlderToday(contract.endDate)) {\n      strbuilder.appendLine(\"Bugünden küçük tarih girilemez.\");\n    }\n    if (IsBiggerDate(contract.startDate, contract.endDate)) {\n      strbuilder.appendLine(\n        \"Bitiş tarihi başlangıç tarihinden küçük olmamalıdır.\"\n      );\n    }\n\n    let response = new Response();\n    if (strbuilder.toString().length > 1) {\n      response.addResult(strbuilder.toString(), Severity.Low);\n      return response;\n    } else {\n      response.value = true;\n      return response;\n    }\n  };\n\n  render() {\n    return (\n      <Grid\n        container\n        spacing={2}\n        justify={\"center\"}\n        style={{ maxWidth: \"700px\" }}\n      >\n        <Grid item xs={12} sm={12}>\n          <Paper elevation={0}>\n            <ComboBox\n              label={\"Apartman\"}\n              onSelectedItemChange={(item) => {\n                // addressId: 8\n                // addressText: null\n                // apartmentId: 5\n                // apartmentManagerId: 1\n                // blockList: null\n                // cityId: 0\n                // countyId: 0\n                // managerUserName: null\n                // name: \"postmanTest\"\n                // zipCode: null\n                // __proto__: Object\n                console.log(\"selected apartmentId:\", item.apartmentId);\n                let dt = this.state.voteContract;\n                dt.apartmentId = item.apartmentId;\n                this.setState({ voteContract: dt });\n              }}\n              itemSource={this.state.apartmentList}\n            />\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={12}>\n          <Paper elevation={0}>\n            <TextField\n              fullWidth\n              type=\"text\"\n              label={\"Anket Adı\"}\n              onChange={(e) => {\n                let dt = this.state.voteContract;\n                dt.name = e.target.value;\n\n                this.setState({ voteContract: dt });\n              }}\n            />\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={12}>\n          <Paper elevation={0}>\n            <TextField\n              fullWidth\n              type=\"text\"\n              label={\"Açıklama\"}\n              onChange={(e) => {\n                let dt = this.state.voteContract;\n                dt.description = e.target.value;\n                this.setState({ voteContract: dt });\n              }}\n            />\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={12}>\n          <Paper elevation={0}>\n            <TextField\n              fullWidth\n              type=\"date\"\n              label={\"Başlangıç Tarihi\"}\n              value={this.state.voteContract.startDate}\n              onChange={(e) => {\n                let contract = this.state.voteContract;\n                contract.startDate = e.target.value;\n                this.setState({ voteContract: contract });\n              }}\n            />\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={12}>\n          <Paper elevation={0}>\n            <TextField\n              fullWidth\n              type=\"date\"\n              label={\"Bitiş Tarihi\"}\n              value={this.state.voteContract.endDate}\n              onChange={(e) => {\n                let contract = this.state.voteContract;\n                contract.endDate = e.target.value;\n                this.setState({ voteContract: contract });\n              }}\n            />\n          </Paper>\n        </Grid>\n\n        {/*oy pusulası*/}\n        <Grid item xs={12} sm={12}>\n          <Paper elevation={0}>\n            <DynamicList\n              title={\"Anket Seçenekleri\"}\n              onChangeList={(list) => {\n                if (list && list.length > 0) {\n                  let data = this.state.voteContract;\n                  let tempList = [];\n\n                  let ind = 0;\n                  for (let tempListElement of list) {\n                    let opt = new VoteOption();\n                    opt.code = ++ind;\n                    opt.description = tempListElement;\n                    tempList.push(opt);\n                  }\n                  data.optionList = tempList;\n                  this.setState({ voteContract: data });\n                }\n              }}\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeBackdropStatus: bindActionCreators(\n        pageActions.changeBackDropStatus,\n        dispatch\n      ),\n      changeActiveResourceCode: bindActionCreators(\n        pageActions.changeActiveResourceCode,\n        dispatch\n      ),\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VoteDefining);\n","import React, { PureComponent } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport { IsNullOrEmpty } from \"../../Core/Helper\";\n\nconst { generateColor } = require(\"random-color-generator2\");\n\nconst colorPointer = generateColor(false);\nconst data = [\n  {\n    name: \"Page A\",\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n];\n\n/**\n *\n */\nexport default class ChartComponent extends PureComponent {\n  // static jsfiddleUrl = 'https://jsfiddle.net/alidingling/30763kr7/';\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataList: data,\n      dataKeyList: [\"pv\", \"uv\", \"amt\"],\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {}\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <BarChart\n        width={500}\n        height={300}\n        data={this.props.dataSource ? this.props.dataSource : []}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {this.props.keyList && this.props.keyList.length > 0 ? (\n          this.props.keyList.map(\n            // eslint-disable-next-line\n            (val, ind) => {\n              if (!IsNullOrEmpty(val)) {\n                return (\n                  <Bar\n                    key={ind + \"charbar\"}\n                    dataKey={val}\n                    fill={colorPointer.next().value}\n                  />\n                );\n              }\n            }\n          )\n        ) : (\n          <Bar />\n        )}\n        {/*<Bar dataKey=\"pv\" fill=\"#8884d8\" />*/}\n        {/*<Bar dataKey=\"uv\" fill=\"#82ca9d\" />*/}\n      </BarChart>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Button from \"@material-ui/core/Button\";\nimport {CommonTypes} from \"../../Types/Common\";\nimport {GetUserVote, GetVoteResult, UserToVote, GetUsedUserVote} from \"../../Services/VoteService\";\nimport {bindActionCreators} from \"redux\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport {CardHeader} from \"@material-ui/core\";\nimport ChartComponent from \"../ToolBox/chart\";\nimport DialogForm from \"../ToolBox/dialog-form\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport Radio from \"@material-ui/core/Radio\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport {GetIntValue} from \"../../Core/Helper\";\nimport Alertify from \"alertifyjs\";\nimport {VoteResultContract} from \"../../Models/VoteContract\";\n\n\n/**\n * Anket oy kullanımı ve sonuçları getirilir..\n */\nclass VotingAndResult extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            voteList: [],\n            usedVoteList: [],\n            selectedVote: {},\n            userChoice: {\n                voteOption: {\n                    code: 0,\n                    description: ''\n                }\n            },\n            openVoteDialog: false,\n            voteResultList: [],\n            voteResultKeyList: [],\n            chartData: [{\n                name: \"\",\n                keyList: []\n            }]\n        }\n    }\n\n\n    componentDidMount() {\n\n        //beklemede olan anketler getirilecek..\n\n        this.getUserVotes();\n        this.getUsedVotes();\n\n        //#region action\n        if (this.props.actions.changeActiveResourceCode) {\n            this.props.actions.changeActiveResourceCode(\n                CommonTypes.Resources.VotingAndResult.resourceCode\n            );\n        }\n        if (this.props.actions.executeCommand) {\n            this.props.actions.executeCommand(this.onExecute);\n        }\n        //#endregion\n    }\n\n    async getUserVotes() {\n        await GetUserVote().then(\n            res => {\n                if (res.success) {\n                    this.setState({voteList: res.value})\n                } else {\n                    Alertify.notify(res.getResultsStringFormat());\n                }\n            }\n        ).catch(\n            err => {\n                console.log(err);\n            }\n        )\n    }\n\n    onExecute = async (key) => {\n        switch (key) {\n            case CommonTypes.ActionKeys.GetList:\n\n                break;\n\n            case CommonTypes.ActionKeys.Clean:\n\n                break;\n            default:\n                break;\n        }\n    };\n\n    handleCloseDialog = () => {\n\n        let option = this.state.userChoice.voteOption;\n\n        if (GetIntValue(option.code) > 0) {\n            UserToVote(option, this.state.selectedVote)\n                .then(\n                    res => {\n                        if (res.success) {\n                            Alertify.success('Seçiminiz kaydedildi.')\n                        } else {\n                            Alertify.error(res.getResultsStringFormat());\n                        }\n                    }\n                ).catch(\n                err => {\n                    Alertify.error('Bir sorun oluştu..');\n                    console.log(err);\n                }\n            )\n        }\n\n        this.setState({openVoteDialog: false})\n    }\n\n    getVoteResult = async (voteContract) => {\n\n        await GetVoteResult(voteContract)\n            .then(\n                res => {\n                    if (res.success) {\n                        let list = res.value;\n                        let tmplist = [];\n                        let dataKeys = [];\n                        if (list && list.length > 0) {\n                            //VoteResultContract\n                            for (let item of list) {\n                                // if(!IsInvalidIndex(keylist.findIndex(x => x === item))){\n                                //     keylist.push(item.description);\n                                // }\n                                if (!tmplist[item.optionDescription]) {\n                                    tmplist[item.optionDescription] = item.voteCount;\n                                    dataKeys.push(item.optionDescription);\n                                }\n                            }\n\n                        }\n                        //data manupulation\n                        let tempKeyObject = Object.assign({}, tmplist);\n                        let dataList = [];\n                        let data = new VoteResultContract();\n                        data.name = list[0].name;\n                        data = {...data, ...tempKeyObject, keyList: dataKeys};\n                        dataList.push(data);\n                        this.setState({voteResultList: list, voteResultKeyList: dataKeys, chartData: dataList})\n\n                    } else {\n                        Alertify.warning(res.getResultsStringFormat());\n                    }\n                }\n            )\n            .catch(\n                err => {\n                    console.log(err);\n                    Alertify.error('Şu anda işlem yapılamıyor.');\n                }\n            )\n    }\n\n    getUsedVotes = async () => {\n        await GetUsedUserVote()\n            .then(\n                res => {\n                    if (res.success) {\n                        this.setState({usedVoteList: res.value})\n                    } else {\n                        Alertify.notify(res.getResultsStringFormat());\n                    }\n                }\n            ).catch(\n                err => {\n                    Alertify.error(err.toString());\n                    console.log(err);\n                }\n            )\n    }\n\n    selectedValueChanged = (e) => {\n        let option = this.state.userChoice;\n        option.voteOption.code = GetIntValue(e.target.value);\n        this.setState({userChoice: option});\n    }\n\n    dialogContent = (<p>no content..</p>);\n    setVoteDialogContent = (value) => {\n        this.dialogContent = (\n            <Card>\n                <CardHeader\n                    title={value.name}\n                    subheader={value.description}\n                />\n                <CardContent>\n                    <FormControl component=\"fieldset\">\n                        <FormLabel component=\"legend\">Seçim</FormLabel>\n                        <RadioGroup aria-label=\"Vote\" name=\"vote\"\n                                    onChange={(e) => {\n                                        this.selectedValueChanged(e)\n                                    }}>\n                            {\n                                (value.optionList && value.optionList.length > 0) ?\n                                    value.optionList.map(\n                                        (val, ind) => {\n                                            return (\n                                                <FormControlLabel\n                                                    key={ind + 'votOpt'}\n                                                    value={val.code.toString()} control={<Radio/>}\n                                                    label={val.description}\n                                                />\n                                            )\n                                        }\n                                    ) : <p></p>\n                            }\n                        </RadioGroup>\n                    </FormControl>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    render() {\n        return (\n            <Grid container spacing={3}>\n                <Grid item xs={12} spacing={3}>\n                    <Grid item xs={12}>\n                        <Paper elevation={0}>\n                            <Typography color={\"textPrimary\"} variant={\"h6\"}>\n                                Bekleyen anketler.\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                    <Grid container justify={\"flex-start\"} aria-orientation={\"horizontal\"} spacing={3}>\n                        {\n                            (this.state.voteList && this.state.voteList.length > 0) ?\n                                this.state.voteList.map(\n                                    (val, ind) => {\n                                        return (\n                                            <Grid item key={ind + 'vtgrid'}>\n                                                <Paper elevation={1}>\n                                                    <Card>\n                                                        <CardActionArea>\n                                                            <CardContent>\n                                                                <Typography gutterBottom variant=\"h5\" component=\"h5\">\n                                                                    {val.name}\n                                                                </Typography>\n                                                                <Typography variant=\"body2\" color=\"textSecondary\"\n                                                                            component=\"p\">\n                                                                    {val.description}\n                                                                </Typography>\n                                                            </CardContent>\n                                                        </CardActionArea>\n                                                        <CardActions>\n                                                            <Button size=\"small\" color=\"primary\" onClick={\n                                                                (e) => {\n                                                                    this.setVoteDialogContent(val)\n                                                                    this.setState({\n                                                                        selectedVote: val,\n                                                                        openVoteDialog: true\n                                                                    })\n                                                                }\n                                                            }\n                                                                    disabled={false}>\n                                                                Oy kullan\n                                                            </Button>\n                                                        </CardActions>\n                                                    </Card>\n                                                </Paper>\n                                            </Grid>\n                                        )\n                                    }\n                                ) :\n                                <Grid item>\n                                    <Typography color={\"textSecondary\"} variant={\"caption\"}>\n                                        Bekleyen anket bulunmamaktadır.\n                                    </Typography>\n                                </Grid>\n                        }\n                    </Grid>\n                    {\n                        (this.state.openVoteDialog) ?\n                            (<DialogForm\n                                title={'Oy Kullanım'}\n                                content={this.dialogContent}\n                                handleClose={this.handleCloseDialog}\n                            />) : <p></p>\n\n                    }\n                </Grid>\n                <Grid item xs={12} spacing={3}>\n                    <Grid item xs={12}>\n                        <Paper elevation={0}>\n                            <Typography color={\"textPrimary\"} variant={\"h6\"}>\n                                Seçim yapılan anketler\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                    <Grid container justify={\"flex-start\"} aria-orientation={\"horizontal\"} spacing={3}>\n                        {\n                            (this.state.usedVoteList && this.state.usedVoteList.length > 0) ?\n                                this.state.usedVoteList.map(\n                                    (val, ind) => {\n                                        return (\n                                            <Grid item key={ind + 'vtgrid'}>\n                                                <Paper elevation={1}>\n                                                    <Card>\n                                                        <CardActionArea>\n                                                            <CardContent>\n                                                                <Typography gutterBottom variant=\"h5\" component=\"h5\">\n                                                                    {val.name}\n                                                                </Typography>\n                                                                <Typography variant=\"body2\" color=\"textSecondary\"\n                                                                            component=\"p\">\n                                                                    {val.description}\n                                                                </Typography>\n                                                            </CardContent>\n                                                        </CardActionArea>\n                                                        <CardActions>\n                                                            <Button size=\"small\" color=\"secondary\"\n                                                                    onClick={(e) => {\n                                                                        this.getVoteResult(val);\n                                                                    }}>\n                                                                Sonuçları Gör\n                                                            </Button>\n                                                        </CardActions>\n                                                    </Card>\n                                                </Paper>\n                                            </Grid>\n                                        )\n                                    }\n                                ) :\n                                <Grid item>\n                                    <Typography color={\"textSecondary\"} variant={\"caption\"}>\n                                        Seçim yapılmış aktif anket bulunmamaktadır.\n                                    </Typography>\n                                </Grid>\n                        }\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container justify={\"center\"} aria-orientation={\"horizontal\"} spacing={3}>\n                        <Grid item>\n                            <Paper elevation={1}>\n                                <Card>\n                                    <CardHeader\n                                        title={this.state.chartData[0].name}\n                                        subheader={'Anket Sonuçları'}\n                                    />\n                                    <CardActionArea>\n                                        <CardContent>\n                                            <ChartComponent\n                                                dataSource={this.state.chartData}\n                                                keyList={this.state.voteResultKeyList}\n                                            />\n                                        </CardContent>\n                                    </CardActionArea>\n                                </Card>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            changeBackdropStatus: bindActionCreators(\n                pageActions.changeBackDropStatus,\n                dispatch\n            ),\n            changeActiveResourceCode: bindActionCreators(\n                pageActions.changeActiveResourceCode,\n                dispatch\n            ),\n            executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n        },\n    };\n}\n\nexport default connect(\n    mapStateToProps, mapDispatchToProps\n)(VotingAndResult);\n","import \"date-fns\";\nimport React from \"react\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport { getDateIsoDate } from \"../../Types/Common\";\n\n/**\n *\n * @param {object} props\n */\nexport default function DateTimeComponent(props) {\n  // The first commit of Material-UI\n  const [selectedDate, setSelectedDate] = React.useState(props.defaultDate ? props.defaultDate:getDateIsoDate());\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n    if (props.onChangeDate) {\n      props.onChangeDate(date);\n    }\n  };\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <KeyboardDatePicker\n        disableToolbar\n        variant=\"inline\"\n        format=\"dd/MM/yyyy\"\n        margin={\"none\"}\n        fullWidth\n        id=\"date-picker-inline\"\n        label={props.label ? props.label : \"date picker\"}\n        value={selectedDate}\n        onChange={handleDateChange}\n        KeyboardButtonProps={{\n          \"aria-label\": \"change date\",\n        }}\n      />\n    </MuiPickersUtilsProvider>\n  );\n}\n","import { TextField } from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport React, { Component } from \"react\";\nimport { GetApartmentListByManagerUserName } from \"../../Services/MemberDefineService\";\n\nexport default class ApartmentComponent extends Component {\n  defaultApartment = {\n    apartmentId: -1,\n    name: \"Seçiniz\",\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      apartmentList: [this.defaultApartment],\n    };\n  }\n\n  componentDidMount() {\n    this.getAPartmentList();\n  }\n\n  getAPartmentList = async () => {\n    GetApartmentListByManagerUserName()\n      .then((res) => {\n        if (res && res.length > 0) {\n          this.setState({ apartmentList: res });\n        }\n      })\n      .catch((e) => console.log(e));\n  };\n  render() {\n    return (\n      <Autocomplete\n        id=\"combo-box-demo-prm\"\n        options={this.state.apartmentList}\n        getOptionLabel={(option) => option.name}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label={this.props.label ? this.props.label : \"Apartman\"}\n          />\n        )}\n        onChange={(e, value, reason) => {\n          // addressId: 8\n          // addressText: null\n          // apartmentId: 5\n          // apartmentManagerId: 1\n          // blockList: null\n          // cityId: 0\n          // countyId: 0\n          // managerUserName: null\n          // name: \"postmanTest\"\n          // zipCode: null\n          // __proto__: Object\n          if (value && this.props.onChange) {\n            this.props.onChange(value);\n          }\n        }}\n      />\n    );\n  }\n}\n","/**\n * fatura\n */\nexport class InvoiceContract {\n  invoiceId;\n  invoiceNumber;\n  taxNumber;\n  accountNumber;\n  userId;\n  invoiceDate;\n  totalAmount;\n  apartmentId;\n  description;\n  invoiceLineList;\n  companyName;\n  constructor() {\n    this.invoiceLineList = [];\n  }\n}\n/**\n * fatura satırı\n */\nexport class InvoiceLineContract {\n  invoiceLineId;\n  invoiceId;\n  quantity;\n  amount;\n  unitPrice;\n  description;\n}\n","import { CommonTypes } from \"../Types/Common\";\nimport { Response, Severity } from \"../Core/Response\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\nimport { GetActiveLocalUser } from \"../Core/Helper\";\nimport { InvoiceContract } from \"../Models/Invoice\";\n\n/**\n * Masraf giriş kaydı yapılır.\n * @param expenseContract\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function SaveExpense(expenseContract) {\n  const returnObject = new Response();\n  let user = GetActiveLocalUser();\n\n  if (!user || user.userId < 1) {\n    returnObject.addResult(\"Yeniden giriş yapınız.\", Severity.Low);\n    return returnObject;\n  }\n\n  if (!expenseContract) {\n    returnObject.addResult(\"masraf/fatura bilgileri boş olamaz.\", Severity.Low);\n    return returnObject;\n  }\n  expenseContract.userId = user.userId;\n\n  await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForAccount(\"expense\", \"savenewexpense\"),\n    expenseContract\n  )\n    .then((res) => {\n      if (res.status === CommonTypes.ResponseStatusCode.successful.created) {\n        returnObject.value = 1;\n      } else if (res.data) {\n        if (!res.data.success) {\n          returnObject.addCoreResults(res.data.results);\n        }\n      }\n    })\n    .catch((err) => {\n      returnObject.addResult(err.message);\n    });\n\n  return returnObject;\n}\n\n/**\n * masraf listesi getirilir\n * @param {InvoiceContract} invoiceFilterContract\n */\nexport async function GetExpenceList(invoiceFilterContract) {\n  let ro = new Response();\n  let filterContract = { ...invoiceFilterContract };\n  let url = CommonTypes.GetUrlForAccount(\"expense\", \"getexpenselist\");\n  // eslint-disable-next-line\n  let asd = await HttpClientServiceInstance.post(url, filterContract)\n    .then((response) => {\n      if (!response.data) {\n        ro.addResult(\"Masraf listesi getirilirken hata oluştu.\");\n      }\n      if (response.data.success) {\n        ro.value = response.data.value;\n      } else {\n        ro.addCoreResults(response.data.results);\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n      ro.addResult(err.message);\n    })\n    .finally(() => {});\n  return ro;\n}\n\n/**\n * masraf detayı getirir.\n * @param {number} invoiceId\n */\nexport async function GetExpenseDetail(invoiceId) {\n  let ro = new Response();\n  let contract = new InvoiceContract();\n  contract.invoiceId = invoiceId;\n\n  let url = CommonTypes.GetUrlForAccount(\"expense\", \"getexpensedetail\");\n  // eslint-disable-next-line\n  let asd = await HttpClientServiceInstance.post(url, contract)\n    .then((response) => {\n      if (!response.data) {\n        ro.addResult(\"Masraf detayı getirilirken hata oluştu.\");\n      }\n      if (response.data.success) {\n        ro.value = response.data.value;\n      } else {\n        ro.addCoreResults(response.data.results);\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n      ro.addResult(err.message);\n    })\n    .finally(() => {});\n  return ro;\n}\n\n/**\n * aidat ödeme işlemi yapılır.\n * @param {DuesContract} duesContract\n * @returns {Promise<T|Response>}\n * @constructor\n */\nexport async function SendDuesPayment(duesContract) {\n let ro = new Response();\n let user = GetActiveLocalUser();\n duesContract.userId = user.userId;\n\n return await HttpClientServiceInstance.post(\n     CommonTypes.GetUrlForAccount(\"dues\",\"paydues\"),\n     duesContract\n ).then(\n     res => {\n         let data = res && res.data;\n         if(data){\n             if(data.success){\n                 ro.value = data.value;\n             }else{\n                 ro.addCoreResults(data.results);\n             }\n         }else{\n             ro.addResult(\"İşlem gerçekleştirilemedi.\",Severity.Low);\n         }\n         return ro;\n     }\n ).catch(\n     err => {\n         console.error(err);\n         return ro;\n     }\n )\n}\n\n/**\n * aidat listesi getirir.\n * @param {DuesContract} filterContract\n * @returns {Promise<T|Response>}\n * @constructor\n */\nexport async function GetDuesList(filterContract) {\n let ro = new Response();\n \n return await HttpClientServiceInstance.post(\n     CommonTypes.GetUrlForAccount(\"dues\",\"getdueslist\"),\n     filterContract\n ).then(\n     res => {\n         let data = res.data;\n         if(data){\n             if(data.success){\n                 ro.value = data.value;\n                 return ro;\n             }else{\n                 ro.addCoreResults(data.results);\n                 return ro;\n             }\n         }else{\n             ro.addResult(\"Liste alınamadı.\");\n             return ro;\n         }\n     }\n ).catch(\n     e => {\n         console.log(e);\n         ro.addResult(\"liste alınamadı\");\n         return ro;\n     }\n )\n}","import { Grid, Paper, TextField, Typography } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\n//import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { DataSheetGrid, textColumn, floatColumn } from \"react-datasheet-grid\";\nimport { CommonTypes, getDateIsoDate } from \"../../Types/Common\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport DateTimeComponent from \"../ToolBox/datetime-component\";\nimport ApartmentComponent from \"../Common/apartment-component\";\nimport {\n  GetIntValue,\n  IsNullOrEmpty,\n  ShowStatusError,\n  ShowStatusSuccess,\n} from \"../../Core/Helper\";\nimport { SaveExpense } from \"../../Services/Accounting\";\nimport { InvoiceContract, InvoiceLineContract } from \"../../Models/Invoice\";\n\nconst columns = [\n  textColumn({ key: \"name\", title: \"Ürün/Hizmet Adı\" }),\n  floatColumn({ key: \"quantity\", title: \"Adet\" }),\n  floatColumn({ key: \"unitprice\", title: \"Birim Fiyatı (₺)\" }),\n  floatColumn({ key: \"amount\", title: \"Tutar\" }),\n];\n\n/**\n * masraf giriş ekranı\n * ResourceCode: EXPENT\n */\nclass ExpenseEntry extends Component {\n  static propTypes = {};\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [{ name: \"\", quantity: 0, amount: 0, unitprice: 0 }],\n      invoiceDate: getDateIsoDate(),\n      companyName: undefined,\n      taxNumber: undefined,\n      invoiceNumber: undefined,\n      totalAmount: 0,\n      selectedApartmentId: -1,\n    };\n  }\n  componentDidMount() {\n    //#region action\n    if (this.props.actions.changeActiveResourceCode) {\n      this.props.actions.changeActiveResourceCode(\n        CommonTypes.Resources.defineMember.resourceCode\n      );\n    }\n    if (this.props.actions.executeCommand) {\n      this.props.actions.executeCommand(this.onExecute);\n    }\n    //#endregion\n  }\n\n  onExecute = async (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.Save:\n        //#region control\n        //boş satırlar varsa fatura kaleminden çıkarılır.\n\n        let invoiceLineList = this.state.data.filter(\n          (x) =>\n            (x.name && x.name !== null) ||\n            (x.amount && x.amount !== null) ||\n            (x.quantity && x.quantity !== null) ||\n            (x.unitprice && x.unitprice !== null)\n        );\n\n        if (IsNullOrEmpty(this.state.invoiceNumber)) {\n          ShowStatusError(\"Fatura numarası doldurulması zorunludur.\");\n          return;\n        }\n        if (IsNullOrEmpty(this.state.taxNumber)) {\n          ShowStatusError(\"vergi numarası doldurulması zorunludur.\");\n          return;\n        }\n        if (IsNullOrEmpty(this.state.companyName)) {\n          ShowStatusError(\"Firma adını giriniz.\");\n          return;\n        }\n        if (GetIntValue(this.state.totalAmount) < 1) {\n          ShowStatusError(\n            \"1 ₺'den daha küçük tutarda fatura girişi yapılamaz.\"\n          );\n          return;\n        }\n        if (GetIntValue(this.state.selectedApartmentId) < 1) {\n          ShowStatusError(\"Apartman seçimi yapınız.\");\n          return;\n        }\n\n        if (invoiceLineList.length < 1) {\n          ShowStatusError(\"Fatura kalemlerini giriniz.\");\n          return;\n        } else {\n          for (const item of invoiceLineList) {\n            if (IsNullOrEmpty(item.name)) {\n              ShowStatusError(\n                \"tüm kalemler için masraf (hizmet/iş) adı doldurulmalıdır.\"\n              );\n              return;\n            }\n            if (GetIntValue(item.quantity) < 1) {\n              ShowStatusError(\n                \"Fatura kalemleri için miktar 1'den küçük olamaz\"\n              );\n              return;\n            }\n          }\n        }\n        //#endregion\n\n        var expenseContract = new InvoiceContract();\n        expenseContract.invoiceNumber = this.state.invoiceNumber;\n        expenseContract.invoiceDate = this.state.invoiceDate;\n        expenseContract.taxNumber = this.state.taxNumber;\n        expenseContract.totalAmount = this.state.totalAmount;\n        expenseContract.companyName = this.state.companyName;\n        expenseContract.apartmentId = this.state.selectedApartmentId;\n        expenseContract.invoiceLineList = invoiceLineList.map((v, i) => {\n          let invLine = new InvoiceLineContract();\n          invLine.amount = v.amount;\n          invLine.quantity = v.quantity;\n          invLine.description = v.name;\n          invLine.unitPrice = v.unitprice;\n          return invLine;\n        });\n\n        await SaveExpense(expenseContract)\n          .then((res) => {\n            if (res.success) {\n              ShowStatusSuccess(\"Masraf girişi yapıldı.\");\n              this.props.history.push({\n                pathname: \"/\",\n              });\n            } else {\n              ShowStatusError(res.getResultsStringFormat());\n            }\n          })\n          .catch((err) => {\n            console.log(err);\n          });\n        break;\n      default:\n        break;\n    }\n  };\n\n  onChangeDate = (date) => {\n    this.setState({ invoiceDate: date });\n  };\n  onChangeApartment = (apartment) => {\n    if (apartment && apartment.apartmentId > 0) {\n      this.setState({ selectedApartmentId: apartment.apartmentId });\n    }\n  };\n  render() {\n    return (\n      <Grid container spacing={3}>\n        <Grid item xs={6}>\n          <ApartmentComponent onChange={this.onChangeApartment} />\n        </Grid>\n        <Grid item xs={12}>\n          <Grid\n            container\n            alignItems={\"flex-start\"}\n            spacing={3}\n            direction={\"row\"}\n          >\n            <Grid item xs={6}>\n              <TextField\n                label=\"Firma Adı\"\n                type=\"text\"\n                fullWidth\n                onChange={(e) => this.setState({ companyName: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                label=\"Fatura Numarası\"\n                type=\"text\"\n                fullWidth\n                onChange={(e) =>\n                  this.setState({ invoiceNumber: e.target.value })\n                }\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                label=\"Vergi Numarası\"\n                type=\"text\"\n                fullWidth\n                onChange={(e) => this.setState({ taxNumber: e.target.value })}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <DateTimeComponent\n                label={\"Fatura Tarihi\"}\n                onChangeDate={this.onChangeDate}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Paper elevation={1}>\n            <Typography variant={\"subtitle1\"}>Fatura Kalemleri</Typography>\n            <Typography\n              variant={\"inherit\"}\n              color={\"textSecondary\"}\n              component=\"p\"\n            >\n              Fatura satırlarını ekleyiniz.\n            </Typography>\n            <DataSheetGrid\n              data={this.state.data}\n              onChange={(data) => {\n                let total = 0;\n                if (data.length > 0) {\n                  data.forEach((element, i, self) => {\n                    if (element.amount) total += element.amount;\n                  });\n                }\n                this.setState({ data: data, totalAmount: total });\n              }}\n              columns={columns}\n            />\n          </Paper>\n        </Grid>\n        <Grid container spacing={3} justify={\"flex-end\"}>\n          <Grid item xs={3}>\n            <TextField\n              label=\"Toplam\"\n              type=\"text\"\n              disabled\n              value={this.state.totalAmount}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeBackdropStatus: bindActionCreators(\n        pageActions.changeBackDropStatus,\n        dispatch\n      ),\n      changeActiveResourceCode: bindActionCreators(\n        pageActions.changeActiveResourceCode,\n        dispatch\n      ),\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpenseEntry);\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  Grid,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n  TableHead,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { ShowStatusError, ShowStatusSuccess } from \"../../Core/Helper\";\nimport { InvoiceContract } from \"../../Models/Invoice\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport { GetExpenceList, GetExpenseDetail } from \"../../Services/Accounting\";\nimport { CommonTypes } from \"../../Types/Common\";\nimport ApartmentComponent from \"../Common/apartment-component\";\nimport DataTable from \"../ToolBox/DataTable\";\nimport DialogForm from \"../ToolBox/dialog-form\";\n\nclass ExpenseList extends Component {\n  columns = [\n    {\n      name: \"userFullName\",\n      label: \"Kullanıcı\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"apartmentName\",\n      label: \"Apartman Adı\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"companyName\",\n      label: \"Şirket İsmi\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"totalAmount\",\n      label: \"Toplam Tutar\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"invoiceDate\",\n      label: \"Fatura Tarihi\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"invoiceNumber\",\n      label: \"Fatura Numarası\",\n      options: { filter: true, sort: true },\n    },\n  ];\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: null,\n      apartmentId: null,\n      invoiceNumber: \"\",\n      taxNumber: \"\",\n      dataList: [],\n      invoiceDetail: null,\n      selectedInvoice: {},\n      isOpenDialogForm: false,\n    };\n  }\n\n  componentDidMount() {\n    //#region action\n    if (this.props.actions.changeActiveResourceCode) {\n      this.props.actions.changeActiveResourceCode(\n        CommonTypes.Resources.ExpenseList.resourceCode\n      );\n    }\n    if (this.props.actions.executeCommand) {\n      this.props.actions.executeCommand(this.onExecute);\n    }\n    //#endregion\n  }\n\n  onExecute = async (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.GetList:\n        let filter = new InvoiceContract();\n        filter.apartmentId = this.state.apartmentId;\n        filter.userId = this.state.userId;\n        filter.invoiceNumber = this.state.invoiceNumber;\n        filter.taxNumber = this.state.taxNumber;\n\n        await GetExpenceList({ ...filter })\n          .then((res) => {\n            if (res && res.success) {\n              if (res.value && res.value.length > 0)\n                this.setState({ dataList: res.value });\n              ShowStatusSuccess(res.value.length + \": adet kayıt getirildi. \");\n            } else if (res && !res.success) {\n              ShowStatusError(res.getResultsStringFormat());\n            }\n          })\n          .catch((err) => {\n            console.log(err);\n            ShowStatusError(\"liste getirilemedi.\");\n          });\n        break;\n      case CommonTypes.ActionKeys.Examine:\n        let inv = { ...this.state.selectedInvoice };\n        if (inv && inv.invoiceId > 0) {\n          await GetExpenseDetail(inv.invoiceId)\n            .then((res) => {\n              if (res && res.success && res.value) {\n                this.setExpenseDialogContent(res.value);\n                this.setState({\n                  invoiceDetail: res.value,\n                  isOpenDialogForm: true,\n                });\n              } else {\n                ShowStatusError(\"Masraf detayı getirilemedi.\");\n              }\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  dialogContent = (<p>no content..</p>);\n  setExpenseDialogContent = (value) => {\n    this.dialogContent = (\n      <Card>\n        <CardHeader\n          title={value.apartmentName}\n          subheader={value.userFullName}\n        />\n        <CardContent>\n          <Grid container spacing={3} direction={\"column\"}>\n            <Grid container direction={\"column\"} style={{ marginLeft: \"30px\" }}>\n              <Grid item>\n                <Typography variant={\"overline\"}>\n                  Firma:{value.companyName}\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant={\"overline\"}>\n                  Vergi No:{value.taxNumber}\n                </Typography>\n              </Grid>\n              <Grid>\n                <Typography variant={\"overline\"}>\n                  Fatura No:{value.invoiceNumber}\n                </Typography>\n              </Grid>\n              <Grid>\n                <Typography variant={\"button\"}>\n                  Toplam Tutar: {value.totalAmount}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <TableContainer component={Paper}>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Açıklama</TableCell>\n                      <TableCell>Adet</TableCell>\n                      <TableCell>Birim Fiyatı</TableCell>\n                      <TableCell>Tutar</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {value.invoiceLineList &&\n                    value.invoiceLineList.length > 0 ? (\n                      value.invoiceLineList.map((line, index) => {\n                        return (\n                          <TableRow key={\"tbl-inv\" + index}>\n                            <TableCell> {line.description}</TableCell>\n                            <TableCell> {line.quantity}</TableCell>\n                            <TableCell> {line.unitPrice}</TableCell>\n                            <TableCell> {line.amount}</TableCell>\n                          </TableRow>\n                        );\n                      })\n                    ) : (\n                      <p></p>\n                    )}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    );\n  };\n  handleCloseDialog = () => {\n    this.setState({ isOpenDialogForm: false });\n  };\n  handleOpenDialog = () => {\n    this.setState({ isOpenDialogForm: true });\n  };\n\n  render() {\n    return (\n      <Grid container spacing={5}>\n        <Grid item xs={2}>\n          <Grid item>\n            <Typography variant={\"h6\"}>Kriterler</Typography>\n          </Grid>\n          <Grid item>\n            <ApartmentComponent />\n          </Grid>\n          <Grid item>\n            <TextField\n              label={\"Vergi No\"}\n              fullWidth\n              onChange={(e) => {\n                this.state({ taxNumber: e.target.value });\n              }}\n              value={this.state.taxNumber}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              label={\"Fatura No\"}\n              fullWidth\n              onChange={(e) => {\n                this.state({ invoiceNumber: e.target.value });\n              }}\n              value={this.state.invoiceNumber}\n            />\n          </Grid>\n        </Grid>\n        {/*data table*/}\n        <Grid item xs={9}>\n          <Paper>\n            <DataTable\n              columns={this.columns}\n              data={this.state.dataList}\n              onSelectedItemChange={(\n                currentRowIndex,\n                allRowsIndexes,\n                rowsSelectedIndex\n              ) => {\n                let selected = this.state.dataList[rowsSelectedIndex[0]];\n                if (selected && selected.apartmentId > 0) {\n                  this.setState({ selectedInvoice: selected });\n                }\n                //   if (this.state.messageList.length > 0) {\n                //     let lst = this.state.messageList;\n                //     let tempList = allRowsIndexes.map((value) => {\n                //       return value.dataIndex;\n                //     });\n                //     let selectedList = [];\n                //     tempList.forEach((element) => {\n                //       selectedList.push(lst[element]);\n                //     });\n                //     this.setState({ selectedMessageList: selectedList });\n                //   }\n              }}\n            />\n          </Paper>\n          {this.state.isOpenDialogForm ? (\n            <DialogForm\n              title={\"Masraf Detayı\"}\n              content={this.dialogContent}\n              handleClose={this.handleCloseDialog}\n            />\n          ) : (\n            <p></p>\n          )}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeBackdropStatus: bindActionCreators(\n        pageActions.changeBackDropStatus,\n        dispatch\n      ),\n      changeActiveResourceCode: bindActionCreators(\n        pageActions.changeActiveResourceCode,\n        dispatch\n      ),\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpenseList);\n","export class TenderContract {\n  tenderId;\n  name;\n  apartmentId;\n  agreementId;\n  description;\n  userId;\n  beginDate;\n  endDate;\n  systemDate;\n  updateDate;\n  agreement;\n  userFullName;\n  apartmentName;\n  addressText;\n  cityName;\n  countyName;\n  minOffer;\n  firstAmount;\n\n  cityId;\n  countyId;\n}\n\nexport class AgreementContract {\n  agreementId;\n  subject;\n  description;\n  title;\n  content;\n  hash;\n}\n\nexport class OfferContract {\n  offerId;\n  companyId;\n  tenderId;\n  offeredAmount;\n  systemDate;\n}\n","import { CommonTypes } from \"../Types/Common\";\nimport { Response, Severity } from \"../Core/Response\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\nimport { GetActiveLocalUser } from \"../Core/Helper\";\n\n/**\n * bütün ihale listesi getirilir.\n */\nexport async function GetAllTenderList() {\n  let returnObject = new Response();\n  let url = CommonTypes.GetUrlForTender(\"tender\", \"gettenderall\");\n\n  // eslint-disable-next-line\n  var _ = await HttpClientServiceInstance.post(url, {})\n    .then((res) => {\n      let response = res.data;\n      if (response && response.success) {\n        returnObject.value = response.value;\n      } else {\n        returnObject.addResult(\"İhale listesi alınamadı.\", Severity.High);\n      }\n    })\n    .catch((err) => {\n      returnObject.addResult(err.message);\n    });\n\n  return returnObject;\n}\n\n/**\n * ihale detayı getirilir.\n * @param {TenderContract} contract\n */\nexport async function GetTenderDetail(contract) {\n  let returnObject = new Response();\n  let url = CommonTypes.GetUrlForPurchasing(\"tender\", \"gettenderdetail\");\n\n  if (!contract.tenderId) {\n    returnObject.addCoreResults(\"ihale bilgisi alınamadı.\");\n    return returnObject;\n  }\n\n  // eslint-disable-next-line\n  var _ = await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      let response = res.data;\n      if (response && response.success) {\n        returnObject.value = response.value;\n      } else {\n        returnObject.addResult(\"İhale bilgisi alınamadı.\", Severity.Low);\n      }\n    })\n    .catch((err) => {\n      returnObject.addResult(err.message);\n    });\n\n  return returnObject;\n}\n\n/**\n * yeni ihale kaydı yapar.\n * @param {TenderContract} contract\n */\nexport async function SaveTender(contract) {\n  let returnObject = new Response();\n  let url = CommonTypes.GetUrlForPurchasing(\"tender\", \"savetender\");\n  var user = GetActiveLocalUser();\n  contract.userId = user.userId;\n\n  // eslint-disable-next-line\n  var _ = await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      let response = res.data;\n      if (response && response.success) {\n        returnObject.value = response.value;\n      } else {\n        returnObject.addResult(\"İhale oluşturulamadı.\", Severity.Low);\n      }\n    })\n    .catch((err) => {\n      returnObject.addResult(err.message);\n    });\n\n  return returnObject;\n}\n\n/**\n * apartmana ait ihale bilgileri getirilir.\n * @param {TenderContract} contract\n */\nexport async function GetTenderByApartment(contract) {\n  let returnObject = new Response();\n  let url = CommonTypes.GetUrlForPurchasing(\"tender\", \"gettenderbyapartment\");\n\n  // eslint-disable-next-line\n  var _ = await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      let response = res.data;\n      if (response && response.success) {\n        returnObject.value = response.value;\n      } else {\n        returnObject.addResult(\"ihale bilgisi getirilemedi.\", Severity.Low);\n      }\n    })\n    .catch((err) => {\n      returnObject.addResult(err.message);\n    });\n\n  return returnObject;\n}\n\n/**\n * ihale listesi getirir.\n * @param {{cityId,countyId}} filterContract\n */\nexport async function GetTenderListAll(filterContract) {\n  let ro = new Response();\n\n  return await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForPurchasing(\"tender\", \"gettenderall\"),\n    { ...filterContract }\n  )\n    .then((res) => {\n      if (res && res.data) {\n        var responseData = res.data;\n\n        if (responseData.success) {\n          ro.value = responseData.value;\n          return ro;\n        } else {\n          ro.addCoreResults(responseData.results);\n          return ro;\n        }\n      } else {\n        return ro;\n      }\n    })\n    .catch((err) => {\n      return ro;\n    });\n}\n\n/**\n * yeni teklif kaydı yapılır.\n * @param {OfferContract} offerContract\n */\nexport async function SaveNewOffer(offerContract) {\n  let ro = new Response();\n  if (!offerContract) {\n    ro.addResult(\"Teklif bilgisi alınamadı.\");\n  }\n  return await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForPurchasing(\"tender\", \"saveoffer\"),\n    offerContract\n  )\n    .then((res) => {\n      if (!res || !res.data) ro.addResult(\"İşlem yapılamadı.\");\n\n      if (res.data && res.data.success) {\n        ro.value = res.data.value;\n      } else {\n        ro.addCoreResults(res.data.results);\n      }\n      Promise.resolve(ro);\n    })\n    .catch((err) => {\n      Promise.reject(err);\n    });\n}\n","import React, { Component } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { CommonTypes, getDateIsoDate } from \"../../Types/Common\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport { connect } from \"react-redux\";\nimport {\n  Grid,\n  TextareaAutosize,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport ApartmentComponent from \"../Common/apartment-component\";\nimport DateTimeComponent from \"../ToolBox/datetime-component\";\nimport {\n  GetIntValue,\n  IsNullOrEmptyAll,\n  ShowStatusError,\n  ShowStatusSuccess,\n} from \"../../Core/Helper\";\nimport { TenderContract } from \"../../Models/TenderContract\";\nimport { SaveTender } from \"../../Services/TenderService\";\n\n/**\n * ihale tanımıı\n */\nclass TenderDefining extends Component {\n  state = {\n    datacontract: new TenderContract(),\n    isOpenDialogForm: false,\n    agreementContract: {\n      subject: \"\",\n      description: \"\",\n      title: \"\",\n      content: \"\",\n    },\n  };\n\n  componentDidMount() {\n    //#region action\n    if (this.props.actions.changeActiveResourceCode) {\n      this.props.actions.changeActiveResourceCode(\n        CommonTypes.Resources.TenderDefining.resourceCode\n      );\n    }\n    if (this.props.actions.executeCommand) {\n      this.props.actions.executeCommand(this.onExecute);\n    }\n    //#endregion\n  }\n\n  onExecute = async (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.Save:\n        //#region control\n        let emptyControl = IsNullOrEmptyAll([\n          this.state.datacontract.name,\n          this.state.datacontract.description,\n          this.state.agreementContract.subject,\n          this.state.agreementContract.title,\n          this.state.agreementContract.content,\n        ]);\n        if (!emptyControl) {\n          ShowStatusError(\"zorunlu alanları doldurunuz.\");\n          return;\n        }\n        if (GetIntValue(this.state.datacontract.apartmentId) < 1) {\n          ShowStatusError(\"Apartman seçiniz.\");\n          return;\n        }\n        if (\n          !this.state.datacontract.beginDate ||\n          !this.state.datacontract.endDate\n        ) {\n          ShowStatusError(\"ihale başlangıç ve bitiş tarihi zorunludur.\");\n          return;\n        }\n        if (this.state.datacontract.endDate < getDateIsoDate()) {\n          ShowStatusError(\"ihale bitiş tarihi bugünden önce olmamalıdır.\");\n          return;\n        }\n        if (this.state.datacontract.beginDate < getDateIsoDate()) {\n          ShowStatusError(\"ihale başlangıç tarihi bugünden önce olmamalıdır.\");\n          return;\n        }\n        if (this.state.datacontract.firstAmount < 1) {\n          ShowStatusError(\"Açılış tutarı giriniz.\");\n          return;\n        }\n\n        //#endregion\n        let contract = new TenderContract();\n        contract = { ...this.state.datacontract };\n        contract.agreement = { ...this.state.agreementContract };\n\n        await SaveTender(contract)\n          .then((response) => {\n            if (response && response.success) {\n              ShowStatusSuccess(\"İhale işlemi başarılı.\");\n            } else {\n              ShowStatusError(\"Kayıt işlemi başarısız.\");\n            }\n          })\n          .catch((err) => {\n            ShowStatusError(\"Kayıt işlemi başarısız.\");\n          });\n\n        break;\n      default:\n        break;\n    }\n  };\n\n  handleCloseDialog = () => {\n    this.setState({ isOpenDialogForm: false });\n  };\n\n  render() {\n    return (\n      <div>\n        <Grid container direction=\"column\" spacing={5}>\n          <Grid item xs={6}>\n            <Grid container direction=\"column\" spacing={3}>\n              <Grid item>\n                <ApartmentComponent\n                  onChange={(value) => {\n                    let cont = this.state.datacontract;\n                    cont.apartmentId = value.apartmentId;\n                    this.setState({ datacontract: cont });\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  fullWidth\n                  label=\"İhale Adı\"\n                  value={this.state.datacontract.name}\n                  onChange={(e) => {\n                    var cont = { ...this.state.datacontract };\n                    cont.name = e.target.value;\n                    this.setState({ datacontract: cont });\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  fullWidth\n                  label=\"Açıklama\"\n                  value={this.state.datacontract.description}\n                  onChange={(e) => {\n                    var cont = { ...this.state.datacontract };\n                    cont.description = e.target.value;\n                    this.setState({ datacontract: cont });\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <DateTimeComponent\n                  label=\"Başlangıç Tarihi\"\n                  onChangeDate={(date) => {\n                    var cont = { ...this.state.datacontract };\n                    cont.beginDate = date;\n                    this.setState({ datacontract: cont });\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <DateTimeComponent\n                  label=\"Bitiş Tarihi\"\n                  onChangeDate={(date) => {\n                    var cont = { ...this.state.datacontract };\n                    cont.endDate = date;\n                    this.setState({ datacontract: cont });\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  label=\"Açılış Değeri\"\n                  type=\"number\"\n                  step=\"0.25\"\n                  onChange={(e) => {\n                    var cont = { ...this.state.datacontract };\n                    cont.firstAmount = parseFloat(e.target.value);\n                    this.setState({ datacontract: cont });\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item xs={6}>\n            <Grid container spacing={3} direction={\"column\"}>\n              <Grid item>\n                <Typography variant={\"h4\"}>Sözleşme Bilgileri</Typography>\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Sözleşme Konusu\"\n                  value={this.state.agreementContract.subject}\n                  onChange={(e) => {\n                    let cont = this.state.agreementContract;\n                    cont.subject = e.target.value;\n                    this.setState({ agreementContract: cont });\n                  }}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Açıklama\"\n                  value={this.state.agreementContract.description}\n                  onChange={(e) => {\n                    let cont = this.state.agreementContract;\n                    cont.description = e.target.value;\n                    this.setState({ agreementContract: cont });\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  fullWidth\n                  label=\"Sözleşme Başlığı\"\n                  value={this.state.agreementContract.title}\n                  onChange={(e) => {\n                    let cont = this.state.agreementContract;\n                    cont.title = e.target.value;\n                    this.setState({ agreementContract: cont });\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <TextareaAutosize\n                  aria-label=\"minimum height\"\n                  rowsMin={5}\n                  style={{ width: \"500px\" }}\n                  placeholder=\"Sözleşme metni\"\n                  value={this.state.agreementContract.content}\n                  onChange={(e) => {\n                    let cont = this.state.agreementContract;\n                    cont.content = e.target.value;\n                    this.setState({ agreementContract: cont });\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\n//#region redux\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeBackdropStatus: bindActionCreators(\n        pageActions.changeBackDropStatus,\n        dispatch\n      ),\n      changeActiveResourceCode: bindActionCreators(\n        pageActions.changeActiveResourceCode,\n        dispatch\n      ),\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(TenderDefining);\n\n//#endregion\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\";\n\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst daySeconds = 86400;\n\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6,\n};\n\nconst renderTime = (dimension, time) => {\n  return (\n    <div className=\"time-wrapper\">\n      <div className=\"time\">{time}</div>\n      <div>{dimension}</div>\n    </div>\n  );\n};\n\nconst getTimeSeconds = (time) => (minuteSeconds - time / 1000) | 0;\nconst getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0;\nconst getTimeHours = (time) => ((time % daySeconds) / hourSeconds) | 0;\nconst getTimeDays = (time) => (time / daySeconds) | 0;\n\nexport default function CountDownComponent(props) {\n  const startTime = props.startTime ? props.startTime : Date.now() / 1000;\n  const endTime = props.endTime\n    ? props.endTime\n    : Date.now() / 1000 + 24 * 60 * 60;\n\n  const remainingTime = endTime - startTime;\n  const days = Math.ceil(remainingTime / daySeconds);\n  const daysDuration = days * daySeconds;\n  debugger;\n  return (\n    <div className=\"App\">\n      <Grid container spacing={2} direction=\"row\">\n        <Grid item>\n          <CountdownCircleTimer\n            {...timerProps}\n            colors={[[\"#7E2E84\"]]}\n            duration={daysDuration}\n            initialRemainingTime={remainingTime}\n          >\n            {({ elapsedTime }) =>\n              renderTime(\"gün\", getTimeDays(daysDuration - elapsedTime / 1000))\n            }\n          </CountdownCircleTimer>\n        </Grid>\n        <Grid item>\n          <CountdownCircleTimer\n            {...timerProps}\n            colors={[[\"#D14081\"]]}\n            duration={daySeconds}\n            initialRemainingTime={remainingTime % daySeconds}\n            onComplete={(totalElapsedTime) => [\n              remainingTime - totalElapsedTime > hourSeconds,\n            ]}\n          >\n            {({ elapsedTime }) =>\n              renderTime(\"saat\", getTimeHours(daySeconds - elapsedTime / 1000))\n            }\n          </CountdownCircleTimer>\n        </Grid>\n        <Grid item>\n          <CountdownCircleTimer\n            {...timerProps}\n            colors={[[\"#EF798A\"]]}\n            duration={hourSeconds}\n            initialRemainingTime={remainingTime % hourSeconds}\n            onComplete={(totalElapsedTime) => [\n              remainingTime - totalElapsedTime > minuteSeconds,\n            ]}\n          >\n            {({ elapsedTime }) =>\n              renderTime(\n                \"dakika\",\n                getTimeMinutes(hourSeconds - elapsedTime / 1000)\n              )\n            }\n          </CountdownCircleTimer>\n        </Grid>\n        <Grid item>\n          <CountdownCircleTimer\n            {...timerProps}\n            colors={[[\"#218380\"]]}\n            duration={minuteSeconds}\n            initialRemainingTime={remainingTime % minuteSeconds}\n            onComplete={(totalElapsedTime) => [\n              remainingTime - totalElapsedTime > 0,\n            ]}\n          >\n            {({ elapsedTime }) =>\n              renderTime(\"saniye\", getTimeSeconds(elapsedTime))\n            }\n          </CountdownCircleTimer>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Grid,\n  Paper,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport {\n  GetActiveLocalUser,\n  GetIntValue,\n  ShowStatusError,\n  ShowStatusSuccess,\n} from \"../../Core/Helper\";\nimport { OfferContract, TenderContract } from \"../../Models/TenderContract\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport {\n  GetTenderByApartment,\n  GetTenderDetail,\n  GetTenderListAll,\n  SaveNewOffer,\n} from \"../../Services/TenderService\";\nimport { CommonTypes } from \"../../Types/Common\";\nimport ApartmentComponent from \"../Common/apartment-component\";\nimport CountDownComponent from \"../ToolBox/countdown\";\nimport DataTable from \"../ToolBox/DataTable\";\nimport DialogForm from \"../ToolBox/dialog-form\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CityComponent from \"../Common/city-component\";\nimport CountyComponent from \"../Common/county-component\";\n\nclass TenderList extends Component {\n  columns = [\n    {\n      name: \"name\",\n      label: \"İhale Adı\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"apartmentName\",\n      label: \"Apartman Adı\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"beginDate\",\n      label: \"Başlangıç Tarihi\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"endDate\",\n      label: \"Bitiş Tarihi\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"description\",\n      label: \"Açıklama\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"cityName\",\n      label: \"Şehir\",\n      options: { filter: true, sort: true },\n    },\n  ];\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: null,\n      apartmentId: null,\n      dataList: [],\n      tenderDetail: null,\n      selectedTender: {},\n      isOpenDialogForm: false,\n      isOpenOfferDialog: false,\n      offerContract: new OfferContract(),\n      isCorporateUser: false,\n      selectedCityId: 0,\n      selectedCountyId: 0,\n    };\n  }\n\n  componentDidMount() {\n    //#region action\n    if (this.props.actions.changeActiveResourceCode) {\n      this.props.actions.changeActiveResourceCode(\n        CommonTypes.Resources.TenderListing.resourceCode\n      );\n    }\n    if (this.props.actions.executeCommand) {\n      this.props.actions.executeCommand(this.onExecute);\n    }\n    //#endregion\n    debugger;\n    let activeUser = GetActiveLocalUser();\n    if (activeUser && activeUser.isCorporateUser) {\n      this.setState({ isCorporateUser: true });\n    }\n  }\n\n  onExecute = async (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.GetList:\n        debugger;\n        if (this.state.isCorporateUser) {\n          var filterContract = new TenderContract();\n          filterContract.cityId = this.state.selectedCityId;\n          filterContract.countyId = this.state.selectedCountyId;\n          GetTenderListAll(filterContract)\n            .then((res) => {\n              if (res.success) {\n                ShowStatusSuccess(\n                  res.value &&\n                    res.value.length.toString() + \" adet kayıt getirildi.\"\n                );\n                this.setState({ dataList: res.value });\n              } else {\n                ShowStatusError(res.getResultsStringFormat());\n              }\n            })\n            .catch((err) => {\n              ShowStatusError(\"İşlem başarısız.\");\n            });\n\n          return;\n        } else {\n          if (GetIntValue(this.state.apartmentId) < 1) {\n            ShowStatusError(\"Apartman seçimi yapınız\");\n            return;\n          }\n          let tenderContract = new TenderContract();\n          tenderContract.apartmentId = this.state.apartmentId;\n\n          GetTenderByApartment(tenderContract)\n            .then((res) => {\n              if (res && res.success) {\n                if (res.value && res.value.length > 0) {\n                  this.setState({ dataList: res.value });\n                }\n              } else {\n                ShowStatusError(\"İhale listesi getirilemedi.\");\n                return;\n              }\n            })\n            .catch((err) => {\n              ShowStatusError(\"İşlem başarısız oldu..\");\n              return;\n            });\n        }\n        break;\n      case CommonTypes.ActionKeys.Examine:\n        var tender = this.state.selectedTender;\n        if (!tender) {\n          ShowStatusError(\"Kayıt seçiniz.\");\n          return;\n        }\n\n        GetTenderDetail(tender)\n          .then((res) => {\n            if (res && res.success) {\n              if (res.value) {\n                this.setDialogContent(res.value);\n                this.setState({\n                  tenderDetail: res.value,\n                  isOpenDialogForm: true,\n                });\n              }\n            }\n          })\n          .catch((err) => {\n            ShowStatusError(\"İşlem gerçekleştirilemedi.\");\n            return;\n          });\n        break;\n      case CommonTypes.ActionKeys.GiveOffer:\n        var tenderc = this.state.selectedTender;\n        if (!tenderc) {\n          ShowStatusError(\"Kayıt seçiniz.\");\n          return;\n        }\n\n        GetTenderDetail(tenderc)\n          .then((res) => {\n            if (res && res.success) {\n              if (res.value) {\n                this.setOfferDialogContent(res.value);\n                this.handleOpenOfferDialog();\n              }\n            }\n          })\n          .catch((err) => {\n            ShowStatusError(\"İşlem gerçekleştirilemedi.\");\n            return;\n          });\n        break;\n      default:\n        break;\n    }\n  };\n  onSaveOffer = () => {\n    ShowStatusError(\"metot oluşturulmadı.\");\n    SaveNewOffer(this.state.offerContract)\n      .then((res) => {\n        if (res.success) {\n          ShowStatusSuccess(\"Teklif gönderildi.\");\n        } else {\n          ShowStatusError(res.getResultsStringFormat());\n        }\n      })\n      .catch((err) => {\n        ShowStatusError(\"İşlem Başarısız.\");\n      });\n  };\n\n  dialogContent = (<p>no content..</p>);\n  offerDialogContent = (<p>no content..</p>);\n\n  setOfferDialogContent = (value) => {\n    this.offerDialogContent = (\n      <Card>\n        <CardHeader title={value.name} subheader={value.apartmentName} />\n        <CardContent>\n          <Grid container spacing={3} direction=\"column\">\n            <Grid item>\n              <Paper elevation={2}>\n                <Typography>Kalan Zaman</Typography>\n                <CountDownComponent\n                  startTime={new Date(value.beginDate).getTime() / 1000}\n                  endTime={new Date(value.endDate).getTime() / 1000}\n                />\n              </Paper>\n            </Grid>\n            <Grid item>\n              <Typography>\n                Şimdiye kadar verilmiş en düşük teklif {value.minOffer} ₺'dir.\n              </Typography>\n            </Grid>\n            <Grid item>\n              <TextField\n                fullWidth\n                label=\"Teklif Tutarını Giriniz\"\n                type=\"number\"\n                step=\"0.10\"\n                required\n                onChange={(e) => {\n                  var contract = { ...this.state.offerContract };\n                  contract.offeredAmount = parseFloat(e.target.value);\n                  this.setState({ offerContract: contract });\n                }}\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <CardActions>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<SaveIcon />}\n            onClick={(e) => {\n              this.onSaveOffer();\n              this.handleCloseOfferDialog();\n            }}\n          >\n            Kaydet\n          </Button>\n        </CardActions>\n      </Card>\n    );\n  };\n\n  setDialogContent = (value) => {\n    this.dialogContent = (\n      <Card>\n        <CardHeader title={value.name} subheader={value.apartmentName} />\n        <CardContent>\n          <Grid container spacing={3} direction={\"column\"}>\n            <Grid\n              container\n              direction={\"column\"}\n              style={{ marginLeft: \"30px\" }}\n              spacing={2}\n            >\n              <Grid item>\n                <Typography variant={\"overline\"}>\n                  Başlangıç Tarihi = {value.beginDate}\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant={\"overline\"}>\n                  Bitiş Tarihi = {value.endDate}\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant={\"overline\"}>\n                  Açıklama = {value.description}\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant={\"overline\"}>\n                  Şehir = {value.cityName}\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant={\"overline\"}>\n                  İlçe = {value.countyName}\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant={\"overline\"}>\n                  En İyi Teklif = {value.minOffer} ₺\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Paper elevation={2}>\n                <Grid container direction=\"column\" spacing={2}>\n                  <Grid item>\n                    <Typography variant={\"h6\"}>Sözleşme Bilgileri</Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography variant={\"body1\"}>\n                      Konu: {value.agreement.subject}\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography variant={\"body1\"}>\n                      Başlık: {value.agreement.title}\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography variant={\"body1\"}>\n                      Açıklama: {value.agreement.description}\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography variant={\"body2\"}>\n                      İçerik: {value.agreement.content}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    );\n  };\n  handleCloseDialog = () => {\n    this.setState({ isOpenDialogForm: false });\n  };\n  handleOpenDialog = () => {\n    this.setState({ isOpenDialogForm: true });\n  };\n\n  handleCloseOfferDialog = () => {\n    this.setState({ isOpenOfferDialog: false });\n  };\n  handleOpenOfferDialog = () => {\n    this.setState({ isOpenOfferDialog: true });\n  };\n\n  onSelectedCity = (city) => {\n    if (city) {\n      this.setState({ selectedCityId: city.cityId });\n    }\n  };\n  onSelectedCounty = (county) => {\n    if (county) {\n      this.setState({ selectedCountyId: county.countyId });\n    }\n  };\n\n  render() {\n    return (\n      <Grid container spacing={3}>\n        <Grid item xs={2}>\n          <Grid item>\n            <Typography variant={\"h6\"}>Kriterler</Typography>\n          </Grid>\n          {!this.state.isCorporateUser ? (\n            <Grid item>\n              <ApartmentComponent\n                onChange={(val) => {\n                  this.setState({ apartmentId: val.apartmentId });\n                }}\n              />\n            </Grid>\n          ) : (\n            <React.Fragment>\n              <Grid item>\n                <CityComponent />\n              </Grid>\n              <Grid item>\n                <CountyComponent />\n              </Grid>\n            </React.Fragment>\n          )}\n        </Grid>\n        {/*data table*/}\n        <Grid item xs={9}>\n          <Paper>\n            <DataTable\n              columns={this.columns}\n              data={this.state.dataList}\n              onSelectedItemChange={(\n                currentRowIndex,\n                allRowsIndexes,\n                rowsSelectedIndex\n              ) => {\n                let selected = this.state.dataList[rowsSelectedIndex[0]];\n                if (selected && selected.tenderId > 0) {\n                  this.setState({ selectedTender: selected });\n                }\n              }}\n            />\n          </Paper>\n          {this.state.isOpenDialogForm ? (\n            <DialogForm\n              title={\"Masraf Detayı\"}\n              content={this.dialogContent}\n              handleClose={this.handleCloseDialog}\n            />\n          ) : (\n            <p></p>\n          )}\n          {this.state.isOpenOfferDialog ? (\n            <DialogForm\n              title={\"Teklif Ekranı\"}\n              content={this.offerDialogContent}\n              handleClose={this.handleCloseOfferDialog}\n            />\n          ) : (\n            <p></p>\n          )}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeBackdropStatus: bindActionCreators(\n        pageActions.changeBackDropStatus,\n        dispatch\n      ),\n      changeActiveResourceCode: bindActionCreators(\n        pageActions.changeActiveResourceCode,\n        dispatch\n      ),\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TenderList);\n","export class DuesContract {\n  duesId;\n  apartmentDuesId;\n  userId;\n  email;\n  divitInstanceId;\n  systemDate;\n  divitContract;\n\n  apartmentId;\n  amount;\n\n  //for list\n  beginDate;\n  endDate;\n  apartmentName;\n  firstName;\n  lastName;\n}\n","export default class DivitContract {\n  divitInstanceId;\n  title;\n  description;\n  uploadDate;\n  name;\n  path;\n  size;\n  type;\n  content;\n}\n","import React, { Component } from \"react\";\nimport { DropzoneDialog } from \"material-ui-dropzone\";\nimport DivitContract from \"../../Models/DivitContract\";\nimport { getDateIsoDate } from \"../../Types/Common\";\n\n/**\n * döküman ekleme komponenti.\n * props= onLoadFile({divitContract})\n */\nexport default class DivitComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: true,\n      files: [],\n    };\n  }\n\n  handleClose() {\n    this.setState({\n      open: false,\n    });\n  }\n\n  handleSave(files) {\n    //Saving files to state for further use and closing Modal.\n    if (!files || files.length < 1) return;\n\n    let reader = new FileReader();\n    let file = files[0];\n    reader.readAsDataURL(file);\n\n    reader.onload = (e) => {\n      console.log(\"data\", e.target.result);\n      let divit = new DivitContract();\n      divit.name = file.name;\n      divit.path = file.path;\n      divit.size = file.size;\n      divit.type = file.type;\n      divit.uploadDate = getDateIsoDate();\n      divit.content = e.target.result;\n\n      if (this.props.onLoadFile) {\n        this.props.onLoadFile(divit);\n      }\n      this.setState({\n        files: files,\n        open: false,\n      });\n    };\n  }\n\n  handleOpen() {\n    this.setState({\n      open: true,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {/* <Button onClick={this.handleOpen.bind(this)}>Dosya Ekle</Button> */}\n        <DropzoneDialog\n          open={this.state.open}\n          onSave={this.handleSave.bind(this)}\n          acceptedFiles={[\"image/jpeg\", \"image/png\"]}\n          showPreviews={true}\n          maxFileSize={1000000}\n          onClose={this.handleClose.bind(this)}\n          submitButtonText=\"Ekle\"\n          cancelButtonText=\"Vazgeç\"\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Grid, TextField, Typography } from \"@material-ui/core\";\nimport { DuesContract } from \"../../Models/DuesContract\";\nimport {\n  GetActiveLocalUser,\n  ShowStatusError,\n  ShowStatusSuccess,\n} from \"../../Core/Helper\";\nimport DivitComponent from \"../Common/divit-component\";\nimport { CommonTypes } from \"../../Types/Common\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport { SendDuesPayment } from \"../../Services/Accounting\";\n\n/**\n * aidat ödeme ekranı\n */\nexport class DuesPayment extends Component {\n  static propTypes = {\n    prop: PropTypes.any,\n  };\n\n  constructor(props) {\n    super(props);\n    let initialContract = new DuesContract();\n    initialContract.apartmentName = \"\";\n\n    this.state = {\n      selectedFile: \"\",\n      dataContract: initialContract,\n      apartmentDues: 0,\n      divitContract: {},\n      isOpenDivit: false,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.actions.changeActiveResourceCode) {\n      this.props.actions.changeActiveResourceCode(\n        CommonTypes.Resources.DuesPayment.resourceCode\n      );\n    }\n    if (this.props.actions.executeCommand) {\n      this.props.actions.executeCommand(this.onExecute);\n    }\n\n    let user = GetActiveLocalUser();\n\n    if (user.apartment) {\n      let contract = { ...this.state.dataContract };\n      contract.apartmentId = user.apartment.apartmentId;\n      contract.apartmentName = user.apartment.name;\n      this.setState({\n        dataContract: contract,\n        apartmentDues: user.apartment.duesAmount,\n      });\n    }\n  }\n\n  onExecute = async (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.Divit:\n        this.setState({ isOpenDivit: true });\n        break;\n\n      case CommonTypes.ActionKeys.Save:\n        if (\n          !this.state.divitContract.size ||\n          this.state.divitContract.size < 1\n        ) {\n          ShowStatusError(\"Döküman ekleyiniz.\");\n          return;\n        }\n\n        let duesContract = new DuesContract();\n        duesContract = { ...this.state.dataContract };\n        duesContract.divitContract = { ...this.state.divitContract };\n\n        SendDuesPayment(duesContract)\n          .then((res) => {\n            if (res.success) {\n              ShowStatusSuccess(\"Aidat ödemeniz onaya gönderilmiştir.\");\n              return;\n            } else {\n              ShowStatusError(res.getResultsStringFormat());\n            }\n          })\n          .catch((err) => {\n            ShowStatusError(\"İşlem gerçekleştirilemedi.\");\n          });\n\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * divit on load\n   * @param {DivitContract} contract\n   */\n  onLoadFile = (contract) => {\n    if (!contract) {\n      this.setState({ divitContract: {} });\n      return;\n    }\n\n    this.setState({ divitContract: contract });\n  };\n\n  render() {\n    return (\n      <Grid container spacing={3} direction=\"column\">\n        <Grid item>\n          <TextField\n            label=\"Apartman adı\"\n            value={\n              this.state.dataContract && this.state.dataContract.apartmentName\n            }\n            onChange={(e) => {\n              this.setState({\n                dataContract: {\n                  ...this.state.dataContract,\n                  apartmentName: e.target.value,\n                },\n              });\n            }}\n            disabled\n            fullWidth\n          />\n        </Grid>\n        <Grid item>\n          <TextField\n            label=\"Aidat Tutarı\"\n            type=\"number\"\n            value={this.state.apartmentDues}\n            onChange={(e) => {\n              this.setState({\n                apartmentDues: e.target.value,\n              });\n            }}\n            disabled\n            fullWidth\n          />\n        </Grid>\n        <Grid item>\n          {this.state.isOpenDivit && (\n            <DivitComponent onLoadFile={this.onLoadFile} />\n          )}\n        </Grid>\n        <Grid item>\n          {this.state.divitContract.name && (\n            <React.Fragment>\n              <Typography>Dosya:</Typography>\n              <Typography>\n                Ad:{this.state.divitContract.name} <br />\n                Boyut:{this.state.divitContract.size} <br />\n                Path:{this.state.divitContract.path}\n              </Typography>\n            </React.Fragment>\n          )}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeActiveResourceCode: bindActionCreators(\n        pageActions.changeActiveResourceCode,\n        dispatch\n      ),\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DuesPayment);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DuesContract } from \"../../Models/DuesContract\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport { CommonTypes, getDateIsoDate } from \"../../Types/Common\";\nimport {\n  GetOneMonthAgo,\n  ShowStatusError,\n  ShowStatusInfo,\n} from \"../../Core/Helper\";\nimport { GetDuesList } from \"../../Services/Accounting\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ApartmentComponent from \"../Common/apartment-component\";\nimport DataTable from \"../ToolBox/DataTable\";\nimport { Paper } from \"@material-ui/core\";\nimport DateTimeComponent from \"../ToolBox/datetime-component\";\n\nclass DuesListing extends Component {\n  columns = [\n    {\n      name: \"apartmentName\",\n      label: \"Apartman\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"fullName\",\n      label: \"Kullanıcı\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"amount\",\n      label: \"Aidat tutarı\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"approveStatusText\",\n      label: \"Onay Durumu\",\n      options: { filter: true, sort: true },\n    },\n  ];\n\n  constructor(props) {\n    super(props);\n    let initialContract = new DuesContract();\n    initialContract.beginDate = GetOneMonthAgo(new Date());\n    initialContract.endDate = getDateIsoDate();\n    this.state = {\n      dataContract: initialContract,\n      dataList: [],\n      selectedDues: {},\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.actions.changeActiveResourceCode) {\n      this.props.actions.changeActiveResourceCode(\n        CommonTypes.Resources.DuesListing.resourceCode\n      );\n    }\n\n    if (this.props.actions.executeCommand) {\n      this.props.actions.executeCommand(this.onExecute);\n    }\n  }\n\n  onExecute = async (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.GetList:\n        ShowStatusError(\"Metod not generated.\");\n        let filterContract = new DuesContract();\n        filterContract.userId = 1002; //geçici\n        let beginDate = new Date();\n        filterContract.endDate = new Date();\n        if (beginDate.getMonth() === 0) {\n          var year = beginDate.getFullYear() - 1;\n          beginDate.setFullYear(year);\n          beginDate.setMonth(11);\n        } else {\n          var month = beginDate.getMonth() - 1;\n          beginDate.setMonth(month);\n        }\n\n        filterContract.beginDate = beginDate;\n        filterContract.endDate = new Date();\n\n        GetDuesList(filterContract)\n          .then((res) => {\n            if (res.success) {\n              if (res.value && res.value.length > 0) {\n                this.setState({ dataList: res.value });\n                ShowStatusInfo(res.value.length + \" adet kayıt getirildi.\");\n              } else {\n                this.setState({ dataList: [] });\n                ShowStatusInfo(\"Kayıt bulunamadı.\");\n              }\n            } else {\n              ShowStatusError(res.getResultsStringFormat());\n            }\n          })\n          .catch((err) => {\n            ShowStatusError(\"İşlem yapılırken hata meydana geldi.\");\n            console.error(err);\n          });\n        break;\n\n      case CommonTypes.ActionKeys.Examine:\n        break;\n      default:\n        ShowStatusError(\"Metod not generated.\");\n        break;\n    }\n  };\n\n  render() {\n    return (\n      <Grid container spacing={3}>\n        <Grid item xs={3}>\n          <Grid container direction={\"column\"}>\n            <Grid item>\n              <ApartmentComponent\n                onChange={(apartment) => {\n                  let contract = { ...this.state.dataContract };\n                  contract.apartmentId = apartment.apartmentId;\n                  contract.apartmentName = apartment.name;\n                  this.setState({ dataContract: contract });\n                }}\n              />\n            </Grid>\n            <Grid item>\n              <DateTimeComponent\n                label={\"Başlangıç Tarihi\"}\n                defaultDate={this.state.dataContract.beginDate}\n                onChangeDate={(date) => {\n                  let contract = { ...this.state.dataContract };\n                  contract.beginDate = date;\n                  this.setState({ dataContract: contract });\n                }}\n              />\n            </Grid>\n            <Grid item>\n              <DateTimeComponent\n                label={\"Bitiş Tarihi\"}\n                onChangeDate={(date) => {\n                  console.log(\"Bitiş tarihi:\", date);\n                  let contract = { ...this.state.dataContract };\n                  contract.endDate = date;\n                  this.setState({ dataContract: contract });\n                }}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={9}>\n          <Paper>\n            <DataTable\n              columns={this.columns}\n              data={this.state.dataList}\n              onSelectedItemChange={(\n                currentRowIndex,\n                allRowsIndexes,\n                rowsSelectedIndex\n              ) => {\n                let selected = this.state.dataList[rowsSelectedIndex[0]];\n                if (selected && selected.duesId > 0) {\n                  this.setState({ selectedDues: selected });\n                }\n              }}\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeActiveResourceCode: bindActionCreators(\n        pageActions.changeActiveResourceCode,\n        dispatch\n      ),\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DuesListing);\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport Layout from \"./components/Layout\";\nimport Home from \"./components/Home\";\nimport DefineSiteApartment from \"./components/Admin/SiteApartment/DefineSiteApartment\";\nimport MemberDefine from \"./components/Admin/Member/member-define\";\nimport MemberList from \"./components/Admin/Member/member-list\";\nimport UserProfile from \"./components/User/user-profile\";\nimport InboxComponent from \"./components/User/Inbox\";\nimport VoteDefining from \"./components/Vote/VoteDefining\";\nimport VotingAndResult from \"./components/Vote/VotingAndResult\";\nimport ExpenseEntry from \"./components/Accounting/expense-entry\";\nimport ExpenseList from \"./components/Accounting/expense-list\";\nimport TenderDefining from \"./components/Tender/tender-defining-component\";\nimport TenderList from \"./components/Tender/tender-list-component\";\nimport DuesPayment from \"./components/Accounting/dues-payment\";\nimport DuesListing from \"./components/Accounting/dues-listing\";\n\nexport default class App extends Component {\n  static displayName = App.name;\n\n  render() {\n    return (\n      <Layout>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route\n            path=\"/admin/definesiteapartment\"\n            component={DefineSiteApartment}\n          />\n          <Route path=\"/admin/definemember\" component={MemberDefine} />\n          <Route path=\"/admin/votedefining\" component={VoteDefining} />\n          <Route path=\"/admin/memberlist\" component={MemberList} />\n          <Route path=\"/user/profile\" component={UserProfile} />\n          <Route path=\"/user/inbox\" component={InboxComponent} />\n          <Route path=\"/vote/votingandresult\" component={VotingAndResult} />\n          <Route path=\"/accounting/expense-entry\" component={ExpenseEntry} />\n          <Route path=\"/accounting/expense-list\" component={ExpenseList} />\n          <Route path=\"/tender/tenderdefining\" component={TenderDefining} />\n          <Route path=\"/tender/tenderlist\" component={TenderList} />\n          <Route path=\"/accounting/dues-payment\" component={DuesPayment} />\n          <Route path=\"/accounting/dues-listing\" component={DuesListing} />\n        </Switch>\n      </Layout>\n    );\n  }\n}\n","export default class Parameter {\n    ParamType;\n    ParamCode;\n    ParamDescription;\n    ParamValue;\n    ParamValue2;\n    ParamValue3;\n    ParamValue4;\n    ParamValue5;\n}","import Parameter from \"../../Models/Parameter\";\n\nexport default {\n  registerUser: {\n    name: \"redux-test-user-name\",\n    isRegistered: false,\n  },\n  loginUser: {\n    userId: -1,\n    userName: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    token: \"\",\n    expiration: new Date(),\n  },\n  cityList: [\n    {\n      name: \"Seçiniz\",\n      cityId: -1,\n    },\n  ],\n  selectedCityId: -1,\n  countyList: [\n    {\n      name: \"Seçiniz\",\n      countyId: -1,\n    },\n  ],\n  parameterList: [initialParameter()],\n  jwtObject: {\n    token: \"\",\n    expiration: new Date(),\n    isSuccess: false,\n    isNewPassword: false,\n  },\n  messageObject: {\n    messageType: \"\",\n    message: \"\",\n  },\n  blockList: [\n    {\n      siteId: -1,\n      code: \"\",\n    },\n  ],\n  apertment: {\n    Name: \"\",\n  },\n  site: {\n    Name: \"\",\n  },\n  actionListInfo: {\n    actionKeyList: [],\n    resourceCode: \"\",\n  },\n  executedAction: {\n    onExecute: () => {\n      alert(\"executed redux function\");\n    },\n  },\n  backDropStatus: false,\n};\n\nfunction initialParameter() {\n  let initialParameter = new Parameter();\n  initialParameter.ParamCode = -1;\n  initialParameter.ParamType = \"no param\";\n  return initialParameter;\n}\n","import { combineReducers } from \"redux\";\nimport loginReducer from \"./login-reducer\";\nimport cityReducer from \"./city-county-reducer\";\nimport countyReducer from \"./county-reducer\";\nimport parameterReducer from \"./parameter-reducer\";\nimport registerReducer from \"./register-reducer\";\nimport changeLoginStatusReducer from \"./change-login-status-reducer\";\nimport showMessageReducer from \"./message-reducer\";\nimport changeSelectedCityReducer from \"./change-selected-city-reducer\";\nimport defineBlockReducer from \"./definingReducers/define-block-reducer\";\nimport actionListReducer from \"./actionReducers/action-list-reducer\";\nimport actionExecuteReducer from \"./actionReducers/action-execute-reducer\";\nimport backdropStatusReducer from \"./actionReducers/change-backdrop-status-reducer\";\nimport changeLoginToNewPasswordReducer from \"./change-login-new-password-reducer\";\n\nconst rootReducer = combineReducers({\n  loginReducer,\n  cityReducer,\n  countyReducer,\n  parameterReducer,\n  registerReducer,\n  changeLoginStatusReducer,\n  showMessageReducer,\n  changeSelectedCityReducer,\n  defineBlockReducer,\n  actionListReducer,\n  actionExecuteReducer,\n  backdropStatusReducer,\n  changeLoginToNewPasswordReducer,\n});\n\nexport default rootReducer;\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function loginReducer(state = initialState.loginUser, action) {\n  switch (action.type) {\n    case actionTypes.LOGIN:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function cityReducer(state = initialState.cityList, action) {\n  switch (action.type) {\n    case actionTypes.GETCITYLIST:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function countyReducer(state = initialState.countyList, action) {\n  switch (action.type) {\n    case actionTypes.GETCOUNTYLIST:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function parameterReducer(\n  state = initialState.parameterList,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.GETPARAMETER:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function registerReducer(state = initialState.registerUser, action) {\n  switch (action.type) {\n    case actionTypes.REGISTER:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function changeLoginStatusReducer(\n  state = initialState.jwtObject,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.CHANGE_LOGIN_STATUS:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function showMessageReducer(\n  state = initialState.messageObject,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.SHOW_STATUS_MESSAGE:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function changeSelectedCityReducer(\n  state = initialState.selectedCityId,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.CHANGE_SELECTED_CITY_ID:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../../actions/action-types\";\nimport initialState from \"../initial-state\";\n\nexport default function defineBlockReducer(\n  state = initialState.blockList,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.SAVE_NEW_BLOCK:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../../actions/action-types\";\nimport initialState from \"../initial-state\";\n\nexport default function actionListReducer(\n  state = initialState.actionListInfo,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.CHANGE_ACTION_LIST:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../../actions/action-types\";\nimport initialState from \"../initial-state\";\n\nexport default function actionExecuteReducer(\n  state = initialState.executedAction,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.EXECUTE_ACTION:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../../actions/action-types\";\nimport initialState from \"../initial-state\";\n\nexport default function backdropStatusReducer(\n    state = initialState.actionListInfo,\n    action\n) {\n    switch (action.type) {\n        case actionTypes.BACKDROP_STATUS:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function changeLoginToNewPasswordReducer(\n  state = initialState.loginUser,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.CHANGE_LOGIN_NEW_PASSWORD:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport { Provider as AlertProvider } from \"react-alert\";\nimport AlertTemplate from \"react-alert-template-basic\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./redux/reducers/configure-store\";\nimport \"alertifyjs/build/css/alertify.css\";\nimport \"react-datasheet-grid/dist/index.css\";\nimport Alertify from \"alertifyjs\";\n\nAlertify.set(\"notifier\", \"position\", \"bottom-center\");\n//import registerServiceWorker from \"./registerServiceWorker\";\n\n//const baseUrl = document.getElementsByTagName(\"base\")[0].getAttribute(\"href\");\nconst rootElement = document.getElementById(\"root\");\n\n// optional cofiguration\nconst options = {\n  position: \"bottom center\",\n  timeout: 5000,\n  offset: \"30px\",\n  transition: \"scale\",\n};\n\nconst store = configureStore();\n\nReactDOM.render(\n  <BrowserRouter>\n    <AlertProvider template={AlertTemplate} {...options}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </AlertProvider>\n  </BrowserRouter>,\n  rootElement\n);\n\n//registerServiceWorker();\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./index\";\nimport thunk from \"redux-thunk\";\n\nexport default function configureReducer() {\n  return createStore(rootReducer, applyMiddleware(thunk));\n}\n"],"sourceRoot":""}